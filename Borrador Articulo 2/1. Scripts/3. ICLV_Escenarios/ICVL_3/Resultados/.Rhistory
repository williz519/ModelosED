theme_minimal(base_size=14) +
theme(legend.position = "none")
ggplot(d %>% filter(d$country == 'Colombia',d$time > "2020-01-01"), aes(x=time)) +
geom_line(aes(y = cum_confirm), color = "steelblue") +
geom_line(aes(y= cum_heal), color="green")+
geom_line(aes(y = cum_dead), color= "darkred", linetype="twodash")
coldata <- d %>%
filter(d$country == 'Colombia' & d$cum_confirm>0) %>%
select(time,cum_confirm)
coldata
Spaindata <- d %>%
filter(d$country == 'Spain' & d$cum_confirm>0) %>%
select(time,cum_confirm)
Spaindata
y
plot(x)
x
get_nCov2019()
remotes::install_github("CSSEGISandData/COVID-19")
remotes::install_github("CSSEGISandData/COVID-19/csse_covid_19_data/csse_covid_19_daily_reports")
library (readr)
install.packages("readr")
urlfileConfirmed = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"
urlfileDeads = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"
Confirmed <- read_csv(url(urlfileConfirmed))
library(readxl)
install.packages("readxl")
library(readxl)
Confirmed <- read_csv(url(urlfileConfirmed))
library(tidyverse)
install.packages("tidyverse")
Confirmed <- read_csv(url(urlfileConfirmed))
Confirmed <- read_csv(urlfileConfirmed)
Confirmed <- read_csv("urlfileConfirmed")
library (readr)
library(tidyverse)
library(readxl)
urlfileConfirmed = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"
urlfileDeads = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"
Confirmed <- read_csv("urlfileConfirmed")
Deads <- read_csv(url(urlfileDeads))
View(Deads)
Confirmed <- read_csv(url(urlfileConfirmed))
Deads <- read_csv(url(urlfileDeads))
x['global',]
y <- load_nCov2019()
x
y
y <- load_nCov2019()
x['global',]
#obtain top 10 country
d <- y['global'] #extract global data
#obtain top 10 country
d <- y['global'] #extract global data
View(d)
d
x['global',]
y['global']
n <- d %>% filter(time == time(y)) %>%
top_n(10, cum_confirm) %>%
arrange(desc(cum_confirm))
n
coldata <- d %>%
filter(d$country == 'Colombia' & d$cum_confirm>0) %>%
select(time,cum_confirm)
coldata[,3]<-coldata[,2]
View(coldata)
coldata <- d %>%
filter(d$country == 'Colombia' & d$cum_confirm>0) %>%
select(time,cum_confirm)
coldata
long(coldata)
nrow(coldata)
i=1;
while(i<nrow(coldata))
{coldata[i,3]<-coldata[i,2]-coldata[i-1,2]}
i=0;
while(i<nrow(coldata))
{coldata[i,3]<-coldata[i,2]-coldata[i-1,2]}
View(coldata)
i=1;
while(i<nrow(coldata))
{coldata[i+1,3]<-coldata[i+1,2]-coldata[i,2]};
View(coldata)
for(i in 0:nrow(coldata))
{coldata[i+1,3]<-coldata[i+1,2]-coldata[i,2]};
for(i in 1:nrow(coldata))
{coldata[1,3]<- 0;
coldata[i+1,3]<- coldata[i+1,2]-coldata[i,2]};
coldata
for(i in 1:nrow(coldata))
{coldata[1,3]<- 1;
coldata[i+1,3]<- coldata[i+1,2]-coldata[i,2]};
coldata
coldata <- d %>%
filter(d$country == 'Colombia' & d$cum_confirm>0) %>%
select(time,cum_confirm)
coldata
for(i in 1:nrow(coldata))
{coldata[1,3]<- 1;
coldata[i+1,3]<- coldata[i+1,2]-coldata[i,2]};
coldata
plot(time,V3)
ggplot(coldata, aes(x=time)) +
geom_col(y=V3)
coldata <- rename(coldata, replace = c("V3"="confirm"))
names(coldata)
coldata <- rename(coldata, replace = c(V3 = "confirm"))
coldata
names(coldata)
coldata <- rename(coldata, replace = c(V3 = "confirm"))
names(coldata)[3] = "confirm"
View(coldata)
ggplot(coldata, aes(x=time)) +
geom_col(y=confirm)
ggplot(coldata, aes(x=time)) +
geom_col(aes(y = confirm))
View(Confirmed)
coldata <- d %>%
filter(d$country == 'Colombia' & d$cum_confirm>0) %>%
select(time,cum_confirm)
coldata
case <- ts(coldata[,2], start=1, frequency = 1)
case
fit <- tslm(log(case) ~ trend)
fit
fc <- forecast(fit, h=10)
fc
summary(fit)
plot(coldata$time,log(coldata$cum_confirm), "b", main = "Curva Infectados Colombia" )
plot(fc)
summary(fc)
forecast(fc)
coldata <- d %>%
filter(d$country == 'Colombia' & d$cum_confirm>0) %>%
select(time,cum_confirm)
coldata
for(i in 1:nrow(coldata))
{coldata[1,3]<- 1;
coldata[i+1,3]<- coldata[i+1,2]-coldata[i,2];
coldata[1,4]<-1;
coldata[i+1,4]<- coldata[i+1,3]/coldata[i,3]};
coldata
coldata <- d %>%
filter(d$country == 'Colombia' & d$cum_confirm>0) %>%
select(time,cum_confirm)
coldata
for(i in 1:nrow(coldata))
{coldata[1,3]<- 1;
coldata[i+1,3]<- coldata[i+1,2]-coldata[i,2];
coldata[1,4]<-1;
coldata[i+1,4]<- coldata[i+1,2]/coldata[i,2]};
coldata
library (readr)
library(tidyverse)
library(readxl)
urlfileConfirmed = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"
urlfileDeads = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"
Confirmed <- read_csv(url(urlfileConfirmed))
Deads <- read_csv(url(urlfileDeads))
View(Confirmed)
View(Confirmed)
names(Confirmed)
Confirmed<-as.data.frame(read_csv(url(urlfileConfirmed)))
Deads <- as.data.frame(read_csv(url(urlfileDeads)))
Confirmed<-t(Confirmed)
View(Confirmed)
### Print outputs of additional diagnostics to new output file (remember to close file writing when complete)
sink(paste(model$apollo_control$modelName,"_additional_output.txt",sep=""),split=TRUE)
### Limpiar memoria
rm(list = ls())
workingDirectory="/Users/williz/Desktop/ModelosED/2. Articulo 2/1. Scripts/3. ICLV_Escenarios/ICVL_3/Resultados/"
setwd(workingDirectory)
### Cargar libreria Apollo
library(apollo)
### Inicializar código
apollo_initialise()
## Establecer controles principales
apollo_control = list(
modelName  = "ICLV Modelo Continuo",
modelDescr = "ICLV modelo sobre datos de elección de ruta, utilizando el modelo de medición ordenado para indicadores",
indivID    = "ViajeId",
mixing     = TRUE,
nCores     = 3
)
database = read.csv("/Users/williz/Desktop/ModelosED/2. Articulo 2/2. Database/DBMuestra_ModeloLogitVL.csv",sep="\t", dec=".",header=TRUE)
names(database)
### Vector de parametros, incluidos los que se mantienen fijos en la estimación
apollo_beta=c(asc_ruta1 = 0, asc_ruta2 = 0, asc_ruta3 = 0, asc_rutaEC = 0,
b_tt = 0, b_dt = 0,
b_CongAB  = 0, b_CongCD  = 0, b_CongEF  = 0,
b_Sem_1 = 0, b_Sem_2 = 0, b_Sem_3 = 0,
b_ACC_0 = 0, b_ACC_1 = 0, b_ACC_2 = 0,
b_NO_CAMFD = 0, b_SI_CAMFD = 0,
b_NO_PANEL = 0, b_SI_PANEL = 0,
b_NO_ZER = 0, b_SI_ZER = 0,
b_No_MTRP = 0, b_Si_MTRP = 0,
lambda1        = 1,
lambda2        = 1,
lambda3       = 1,
gamma_USOCINTURON = 0,
gamma_USODISPMOB =0,
gamma_ADULTO40 = 0,
gamma_EXP_1 = 0,
gamma_HPICO = 0,
gamma_LV1 = 0,
gamma_EDUBASICA = 0,
gamma_JOVEN30 = 0,
gamma_EXP_2 = 0, gamma_HTRB_2 = 0, gamma_HTRB_3 = 0, gamma_HTRB_4 = 0, gamma_LV2 = 0,
zeta_FRbr     = 1, zeta_EnfCond  = 1, zeta_AFrSem   = 1, zeta_CulFr    = 1, zeta_OmLmVel  = 1,
zeta_IgPare    = 1,  zeta_UsoCel    = 1,  zeta_PasoPeaton = 1,
zeta_UsoDirec = 1, zeta_UsoPito = 1,
sigma_FRbr    = 1, sigma_EnfCond  = 1, sigma_AFrSem   = 1, sigma_CulFr    = 1,
sigma_OmLmVel  = 1, sigma_IgPare    = 1,  sigma_UsoCel = 1,  sigma_PasoPeaton = 1,
sigma_UsoDirec = 1, sigma_UsoPito = 1
)
### Vector con nombres (entre comillas) de los parámetros que se mantendrán fijos en su valor inicial en apollo_beta, use apollo_beta_fixed = c () si ninguno
apollo_fixed = c("asc_ruta3", "b_CongEF", "b_Sem_3", "b_ACC_2", "b_NO_CAMFD", "b_NO_PANEL", "b_NO_ZER",
"b_No_MTRP")
### Establecer parámetros para generar sorteos
apollo_draws = list(
interDrawsType="halton",
interNDraws=100,
interUnifDraws=c(),
interNormDraws=c("eta1","eta2","eta3")
)
### Crear parametros aleatorios
apollo_randCoeff=function(apollo_beta, apollo_inputs){
randcoeff = list()
randcoeff[["LV_1"]] = gamma_USOCINTURON * USOCINTURON + gamma_USODISPMOB * USODISPMOB + eta1
randcoeff[["LV_2"]] = gamma_ADULTO40*ADULTO40 + gamma_EXP_1*EXP_1 + gamma_HPICO*HPICO +
gamma_USOCINTURON*USOCINTURON  + gamma_LV1*randcoeff[["LV_1"]] + eta2
randcoeff[["LV_3"]] = gamma_EDUBASICA * EDUBASICA + gamma_JOVEN30*JOVEN30 +  gamma_ADULTO40*ADULTO40+
gamma_EXP_2*EXP_2 + gamma_HTRB_2*HTRB_2 + gamma_HTRB_3*HTRB_3 + gamma_HTRB_4*HTRB_4 +
gamma_USOCINTURON * USOCINTURON + gamma_USODISPMOB * USODISPMOB + gamma_LV2*randcoeff[["LV_2"]] + eta3
return(randcoeff)
}
apollo_inputs = apollo_validateInputs()
apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){
### Attach inputs and detach after function exit
apollo_attach(apollo_beta, apollo_inputs)
on.exit(apollo_detach(apollo_beta, apollo_inputs))
### Create list of probabilities P
P = list()
### Likelihood of indicators
# LV1
normalDensity_settings1 = list(outcomeNormal=FRbr,
xNormal=zeta_FRbr*LV_1,
mu=0,
sigma=sigma_FRbr)
normalDensity_settings2 = list(outcomeNormal=EnfCond,
xNormal=zeta_EnfCond*LV_1,
mu=0,
sigma=sigma_EnfCond)
normalDensity_settings3 = list(outcomeNormal=AFrSem,
xNormal=zeta_AFrSem*LV_1,
mu=0,
sigma=sigma_AFrSem)
normalDensity_settings4 = list(outcomeNormal=CulFr,
xNormal=zeta_CulFr*LV_1,
mu=0,
sigma=sigma_CulFr)
normalDensity_settings5 = list(outcomeNormal=UsoPito,
xNormal=zeta_UsoPito*LV_1,
mu=0,
sigma=sigma_UsoPito)
#LV2
normalDensity_settings6 = list(outcomeNormal=OmLmVel,
xNormal=zeta_OmLmVel*LV_2,
mu=0,
sigma=sigma_OmLmVel)
normalDensity_settings7 = list(outcomeNormal=IgPare,
xNormal=zeta_IgPare*LV_2,
mu=0,
sigma=sigma_IgPare)
normalDensity_settings8 = list(outcomeNormal=UsoCel,
xNormal=zeta_UsoCel*LV_2,
mu=0,
sigma=sigma_UsoCel)
#LV3
normalDensity_settings9 = list(outcomeNormal=PasoPeaton,
xNormal=zeta_PasoPeaton*LV_3,
mu=0,
sigma=sigma_PasoPeaton)
normalDensity_settings10 = list(outcomeNormal=UsoDirec,
xNormal=zeta_UsoDirec*LV_3,
mu=0,
sigma=sigma_UsoDirec)
normalDensity_settings11 = list(outcomeNormal=UsoCel,
xNormal=zeta_UsoCel*LV_3,
mu=0,
sigma=sigma_UsoCel)
P[["indic_FRbr"]]     = apollo_normalDensity(normalDensity_settings1, functionality)
P[["indic_EnfCond"]]  = apollo_normalDensity(normalDensity_settings2, functionality)
P[["indic_AFrSem"]]   = apollo_normalDensity(normalDensity_settings3, functionality)
P[["indic_CulFr"]]    = apollo_normalDensity(normalDensity_settings4, functionality)
P[["indic_UsoPito"]]  = apollo_normalDensity(normalDensity_settings5, functionality)
P[["indic_OmLmVel"]]  = apollo_normalDensity(normalDensity_settings6, functionality)
P[["indic_IgPare"]]   = apollo_normalDensity(normalDensity_settings7, functionality)
P[["indic_UsoCel"]]   = apollo_normalDensity(normalDensity_settings8, functionality)
P[["indic_PasoPeaton"]]  = apollo_normalDensity(normalDensity_settings9, functionality)
P[["indic_UsoDirec"]]   = apollo_normalDensity(normalDensity_settings10, functionality)
P[["indic_UsoCel"]]   = apollo_normalDensity(normalDensity_settings11, functionality)
### Likelihood of choices
### List of utilities: these must use the same names as in mnl_settings, order is irrelevant
V = list()
V[['ruta1']]  = (asc_ruta1  + b_tt * TIEMPOAlt1 + b_dt * DISTAlt1 + b_CongAB*CONG_AB_A1 +
b_CongCD*CONG_CD_A1 + b_CongEF*CONG_EF_A1 +
b_Sem_1*SEMF_A1_1 + b_Sem_2*SEMF_A1_2 + b_Sem_3*SEMF_A1_3 +
b_ACC_0*ACC_A1_0 + b_ACC_1*ACC_A1_1 + b_ACC_2*ACC_A1_2 +
b_NO_CAMFD * NO_CAMFD_A1 + b_SI_CAMFD * SI_CAMFD_A1 +
b_NO_PANEL * NO_PANEL_A1 + b_SI_PANEL * SI_PANEL_A1 +
b_NO_ZER * NO_ZER_A1 + b_SI_ZER * SI_ZER_A1 + b_No_MTRP * NO_MTRP_A1 +
b_Si_MTRP * SI_MTRP_A1)
V[['ruta2']]  = (asc_ruta2  + b_tt * TIEMPOAlt2 + b_dt * DISTAlt2 + b_CongAB*CONG_AB_A2 +
b_CongCD*CONG_CD_A2 + b_CongEF*CONG_EF_A2 +
b_Sem_1*SEMF_A2_1 + b_Sem_2*SEMF_A2_2 + b_Sem_3*SEMF_A2_3 +
b_ACC_0*ACC_A2_0 + b_ACC_1*ACC_A2_1 + b_ACC_2*ACC_A2_2 +
b_NO_CAMFD * NO_CAMFD_A2 + b_SI_CAMFD * SI_CAMFD_A2 +
b_NO_PANEL * NO_PANEL_A2 + b_SI_PANEL * SI_PANEL_A2 +
b_NO_ZER * NO_ZER_A2 + b_SI_ZER * SI_ZER_A2 + b_No_MTRP * NO_MTRP_A2 +
b_Si_MTRP * SI_MTRP_A2)
V[['ruta3']]  = (asc_ruta3  + b_tt * TIEMPOAlt3 + b_dt * DISTAlt3 + b_CongAB*CONG_AB_A3 +
b_CongCD*CONG_CD_A3 + b_CongEF*CONG_EF_A3 +
b_Sem_1*SEMF_A3_1 + b_Sem_2*SEMF_A3_2 + b_Sem_3*SEMF_A3_3 +
b_ACC_0*ACC_A3_0 + b_ACC_1*ACC_A3_1 + b_ACC_2*ACC_A3_2 +
b_NO_CAMFD * NO_CAMFD_A3 + b_SI_CAMFD * SI_CAMFD_A3 +
b_NO_PANEL * NO_PANEL_A3 + b_SI_PANEL * SI_PANEL_A3 +
b_NO_ZER * NO_ZER_A3 + b_SI_ZER * SI_ZER_A3 + b_No_MTRP * NO_MTRP_A3 +
b_Si_MTRP * SI_MTRP_A3)
V[['rutaEC']] = (asc_rutaEC + b_tt * TIEMPOEC   + b_dt * DISTEC + b_CongAB*CONG_AB_EC +
b_CongCD*CONG_CD_EC + b_CongEF*CONG_EF_EC +
b_Sem_1*SEMF_EC_1 + b_Sem_2*SEMF_EC_2 + b_Sem_3*SEMF_EC_3 +
b_ACC_0*ACC_EC_0 + b_ACC_1*ACC_EC_1 + b_ACC_2*ACC_EC_2 +
b_NO_CAMFD * NO_CAMFD_EC + b_SI_CAMFD * SI_CAMFD_EC +
b_NO_PANEL * NO_PANEL_EC + b_SI_PANEL * SI_PANEL_EC +
b_NO_ZER * NO_ZER_EC + b_SI_ZER * SI_ZER_EC + b_No_MTRP * NO_MTRP_EC +
b_Si_MTRP * SI_MTRP_EC +
lambda1 * LV_1 + lambda2 * LV_2 + lambda3 * LV_3)
### Define settings for MNL model component
mnl_settings = list(
alternatives  = c(ruta1=1, ruta2=2, ruta3=3, rutaEC=4),
avail         = list(ruta1=1, ruta2=1, ruta3=1, rutaEC=1),
choiceVar     = CHOICE,
V             = V
)
### Compute probabilities for MNL model component
P[["choice"]] = apollo_mnl(mnl_settings, functionality)
### Likelihood of the whole model
P = apollo_combineModels(P, apollo_inputs, functionality)
### Take product across observation for same individual
#P = apollo_panelProd(P, apollo_inputs, functionality)
### Average across inter-individual draws
P = apollo_avgInterDraws(P, apollo_inputs, functionality)
### Prepare and return outputs of function
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
### Estimate model
model = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)
apollo_modelOutput(model, modelOutput_settings=list(printPVal=TRUE) )
apollo_saveOutput(model)
apollo_saveOutput(model, saveOutput_settings=list(printPVal=TRUE) )
### Clear memory
rm(list = ls())
### Load Apollo library
library(apollo)
### Initialise code
apollo_initialise()
### Set core controls
apollo_control = list(
modelName  = "Apollo_example_24",
modelDescr = "ICLV model on drug choice data, using ordered measurement model for indicators",
indivID    = "ID",
mixing     = TRUE,
nCores     = 3
)
database = read.csv("/Users/williz/Desktop/Apollo/Datos/apollo_drugChoiceData.csv",header=TRUE)
### Vector of parameters, including any that are kept fixed in estimation
apollo_beta = c(b_brand_Artemis    = 0,
b_brand_Novum    = 0,
b_brand_BestValue    = 0,
b_brand_Supermarket    = 0,
b_brand_PainAway    = 0,
b_country_CH  = 0,
b_country_DK  = 0,
b_country_USA  = 0,
b_country_IND  = 0,
b_country_RUS  = 0,
b_country_BRA  = 0,
b_char_standard     = 0,
b_char_fast     = 0,
b_char_double     = 0,
b_risk            = 0,
b_price           = 0,
lambda            = 1,
gamma_reg_user    = 0,
gamma_university  = 0,
gamma_age_50      = 0,
zeta_quality         = 1,
zeta_ingredient         = 1,
zeta_patent         = 1,
zeta_dominance         = 1,
tau_quality_1     =-2,
tau_quality_2     =-1,
tau_quality_3     = 1,
tau_quality_4     = 2,
tau_ingredients_1 =-2,
tau_ingredients_2 =-1,
tau_ingredients_3 = 1,
tau_ingredients_4 = 2,
tau_patent_1      =-2,
tau_patent_2      =-1,
tau_patent_3      = 1,
tau_patent_4      = 2,
tau_dominance_1   =-2,
tau_dominance_2   =-1,
tau_dominance_3   = 1,
tau_dominance_4   = 2)
### Vector with names (in quotes) of parameters to be kept fixed at their starting value in apollo_beta, use apollo_beta_fixed = c() if none
apollo_fixed = c("b_brand_Artemis", "b_country_USA", "b_char_standard")
### Set parameters for generating draws
apollo_draws = list(
interDrawsType="halton",
interNDraws=100,
interUnifDraws=c(),
interNormDraws=c("eta"),
intraDrawsType='',
intraNDraws=0,
intraUnifDraws=c(),
intraNormDraws=c()
)
### Create random parameters
apollo_randCoeff=function(apollo_beta, apollo_inputs){
randcoeff = list()
randcoeff[["LV"]] = gamma_reg_user*regular_user + gamma_university*university_educated + gamma_age_50*over_50 + eta
return(randcoeff)
}
apollo_inputs = apollo_validateInputs()
apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){
### Attach inputs and detach after function exit
apollo_attach(apollo_beta, apollo_inputs)
on.exit(apollo_detach(apollo_beta, apollo_inputs))
### Create list of probabilities P
P = list()
### Likelihood of indicators
ol_settings1 = list(outcomeOrdered=attitude_quality,
V=zeta_quality*LV,
tau=c(tau_quality_1, tau_quality_2, tau_quality_3, tau_quality_4),
rows=(task==1))
ol_settings2 = list(outcomeOrdered=attitude_ingredients,
V=zeta_ingredient*LV,
tau=c(tau_ingredients_1, tau_ingredients_2, tau_ingredients_3, tau_ingredients_4),
rows=(task==1))
ol_settings3 = list(outcomeOrdered=attitude_patent,
V=zeta_patent*LV,
tau=c(tau_patent_1, tau_patent_2, tau_patent_3, tau_patent_4),
rows=(task==1))
ol_settings4 = list(outcomeOrdered=attitude_dominance,
V=zeta_dominance*LV,
tau=c(tau_dominance_1, tau_dominance_2, tau_dominance_3, tau_dominance_4),
rows=(task==1))
P[["indic_quality"]]     = apollo_ol(ol_settings1, functionality)
P[["indic_ingredients"]] = apollo_ol(ol_settings2, functionality)
P[["indic_patent"]]      = apollo_ol(ol_settings3, functionality)
P[["indic_dominance"]]   = apollo_ol(ol_settings4, functionality)
### Likelihood of choices
### List of utilities: these must use the same names as in mnl_settings, order is irrelevant
V = list()
V[['alt1']] = ( b_brand_Artemis*(brand_1=="Artemis") + b_brand_Novum*(brand_1=="Novum")
+ b_country_CH*(country_1=="Switzerland") + b_country_DK*(country_1=="Denmark") + b_country_USA*(country_1=="USA")
+ b_char_standard*(char_1=="standard") + b_char_fast*(char_1=="fast acting") + b_char_double*(char_1=="double strength")
+ b_risk*side_effects_1
+ b_price*price_1
+ lambda*LV )
V[['alt2']] = ( b_brand_Artemis*(brand_2=="Artemis") + b_brand_Novum*(brand_2=="Novum")
+ b_country_CH*(country_2=="Switzerland") + b_country_DK*(country_2=="Denmark") + b_country_USA*(country_2=="USA")
+ b_char_standard*(char_2=="standard") + b_char_fast*(char_2=="fast acting") + b_char_double*(char_2=="double strength")
+ b_risk*side_effects_2
+ b_price*price_2
+ lambda*LV )
V[['alt3']] = ( b_brand_BestValue*(brand_3=="BestValue") + b_brand_Supermarket*(brand_3=="Supermarket") + b_brand_PainAway*(brand_3=="PainAway")
+ b_country_USA*(country_3=="USA") + b_country_IND*(country_3=="India") + b_country_RUS*(country_3=="Russia") + b_country_BRA*(country_3=="Brazil")
+ b_char_standard*(char_3=="standard") + b_char_fast*(char_3=="fast acting")
+ b_risk*side_effects_3
+ b_price*price_3 )
V[['alt4']] = ( b_brand_BestValue*(brand_4=="BestValue") + b_brand_Supermarket*(brand_4=="Supermarket") + b_brand_PainAway*(brand_4=="PainAway")
+ b_country_USA*(country_4=="USA") + b_country_IND*(country_4=="India") + b_country_RUS*(country_4=="Russia") + b_country_BRA*(country_4=="Brazil")
+ b_char_standard*(char_4=="standard") + b_char_fast*(char_4=="fast acting")
+ b_risk*side_effects_4
+ b_price*price_4 )
### Define settings for MNL model component
mnl_settings = list(
alternatives = c(alt1=1, alt2=2, alt3=3, alt4=4),
avail        = list(alt1=1, alt2=1, alt3=1, alt4=1),
choiceVar    = best,
V            = V
)
### Compute probabilities for MNL model component
P[["choice"]] = apollo_mnl(mnl_settings, functionality)
### Likelihood of the whole model
P = apollo_combineModels(P, apollo_inputs, functionality)
### Take product across observation for same individual
P = apollo_panelProd(P, apollo_inputs, functionality)
### Average across inter-individual draws
P = apollo_avgInterDraws(P, apollo_inputs, functionality)
### Prepare and return outputs of function
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
### Estimate model
model = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)
