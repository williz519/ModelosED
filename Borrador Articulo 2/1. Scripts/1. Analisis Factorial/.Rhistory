b_Cong * CG_Alt_2*T_Alt_2 +
b_Sem*SEM_A2_km +
b_ACC_0*ACC_A2_0 + b_ACC_1*ACC_A2_1 + b_ACC_2*ACC_A2_2 +
b_NO_CAMFD * NO_CAMFD_A2 + b_SI_CAMFD * SI_CAMFD_A2 +
b_NO_PANEL * NO_PANEL_A2 + b_SI_PANEL * SI_PANEL_A2 +
b_NO_ZER * NO_ZER_A2 + b_SI_ZER * SI_ZER_A2 +
b_No_MTRP * NO_MTRP_A2 + b_Si_MTRP * SI_MTRP_A2
V[['ruta3']]  = asc_ruta3  + b_tt * T_Alt_3   + b_dt * D_Alt_3 +
b_Cong * CG_Alt_3 * T_Alt_3 +
b_Sem*SEM_A3_km +
b_ACC_0*ACC_A3_0 + b_ACC_1*ACC_A3_1 + b_ACC_2*ACC_A3_2 +
b_NO_CAMFD * NO_CAMFD_A3 + b_SI_CAMFD * SI_CAMFD_A3 +
b_NO_PANEL * NO_PANEL_A3 + b_SI_PANEL * SI_PANEL_A3 +
b_NO_ZER * NO_ZER_A3 + b_SI_ZER * SI_ZER_A3 +
b_No_MTRP * NO_MTRP_A3 + b_Si_MTRP * SI_MTRP_A3
V[['rutaEC']] =  asc_ruta4 + b_tt * T_Alt_4   + b_dt * D_Alt_4 +
b_Cong * CG_Alt_4 * T_Alt_4 +
b_Sem*SEM_EC_km +
b_ACC_0*ACC_EC_0 + b_ACC_1*ACC_EC_1 + b_ACC_2*ACC_EC_2 +
b_NO_CAMFD * NO_CAMFD_EC + b_SI_CAMFD * SI_CAMFD_EC +
b_NO_PANEL * NO_PANEL_EC + b_SI_PANEL * SI_PANEL_EC +
b_NO_ZER * NO_ZER_EC + b_SI_ZER * SI_ZER_EC +
b_No_MTRP * NO_MTRP_EC + b_Si_MTRP * SI_MTRP_EC +
b_No_Info * SININFOTRF + b_Si_Info * CONINFOTRF +
b_UsoCel_P * UsoCel_Poco +  b_UsoCel_F * UsoCel_Frec
### Define settings for MNL model component
mnl_settings = list(
alternatives  = c(ruta1=1, ruta2=2, ruta3=3, rutaEC=4),
avail         = list(ruta1=1, ruta2=1, ruta3=1, rutaEC=1),
choiceVar     = CHOICE,
V             = V
)
### Compute probabilities using MNL model
P[['model']] = apollo_mnl(mnl_settings, functionality)
### Take product across observation for same individual
#P = apollo_panelProd(P, apollo_inputs, functionality)
### Prepare and return outputs of function
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
model = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)
apollo_modelOutput(model, modelOutput_settings=list(printPVal=TRUE) )
### Limpiar memoria
rm(list = ls())
workingDirectory="/Users/williz/Desktop/ModelosED/2. Articulo 2/1. Scripts/Modelos de Prueba/ICVL_MCond_3F/Version2"
setwd(workingDirectory)
### Cargar libreria Apollo
library(apollo)
### Inicializar código
apollo_initialise()
## Establecer controles principales
apollo_control = list(
modelName  = "MNL_Modelo_2",
modelDescr = "Modelo_2 MNL",
indivID    = "ViajeId",
nCores     = 1
)
database = read.csv("/Users/williz/Desktop/ModelosED/2. Articulo 2/2. Database/DBMuestra_ModeloLogitVL.csv",sep="\t", dec=".",header=TRUE)
# Normalización de las variables tiempo
for (i in 1:nrow(database)){
database$T_Alt_1[i] = (database$TIEMPOAlt1[i]- (min(c(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-3)))/(max(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-(min(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-3))
database$T_Alt_2[i] = (database$TIEMPOAlt2[i]- (min(c(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-3)))/(max(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-(min(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-3))
database$T_Alt_3[i] = (database$TIEMPOAlt3[i]- (min(c(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-3)))/(max(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-(min(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-3))
database$T_Alt_4[i] = (database$TIEMPOEC[i]- (min(c(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-3)))/(max(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-(min(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-3))
# Normalización de la variable distancia
database$D_Alt_1[i] = (database$DISTAlt1[i]- (min(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i])-0.2)))/(max(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i]))-(min(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i])-0.2)))
database$D_Alt_2[i] = (database$DISTAlt2[i]- (min(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i])-0.2)))/(max(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i]))-(min(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i])-0.2)))
database$D_Alt_3[i] = (database$DISTAlt3[i]- (min(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i])-0-2)))/(max(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i]))-(min(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i])-0.2)))
database$D_Alt_4[i] = (database$DISTEC[i]- (min(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i])-0.2)))/(max(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i]))-(min(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i])-0.2)))
if(database$HPICOHVALLE[i] == 1){
database$Vel_fl_Alt1[i] = 28/60;
database$Vel_fl_Alt2[i] = 28/60;
database$Vel_fl_Alt3[i] = 28/60;
database$Vel_fl_Alt4[i] = 28/60}
else{database$Vel_fl_Alt1[i] = 24/60;
database$Vel_fl_Alt2[i] = 24/60;
database$Vel_fl_Alt3[i]= 24/60;
database$Vel_fl_Alt4[i]= 24/60}
database$T_fl_Alt1[i] = database$DISTAlt1[i]/database$Vel_fl_Alt1[i]
database$T_fl_Alt2[i] = database$DISTAlt2[i]/database$Vel_fl_Alt2[i]
database$T_fl_Alt3[i] = database$DISTAlt3[i]/database$Vel_fl_Alt3[i]
database$T_fl_Alt4[i] = database$DISTEC[i]/database$Vel_fl_Alt4[i]
database$CG_Alt_1[i] = database$TIEMPOAlt1[i]/database$T_fl_Alt1[i]
database$CG_Alt_2[i] = database$TIEMPOAlt2[i]/database$T_fl_Alt2[i]
database$CG_Alt_3[i] = database$TIEMPOAlt3[i]/database$T_fl_Alt3[i]
database$CG_Alt_4[i] = database$TIEMPOEC[i]/database$T_fl_Alt4[i]
}
database$UsoCel_Poco <- (ifelse((database$UsoCel == 1), 1,0))
#database$UsoCel_AlgVec <- (ifelse((database$UsoCel == 3 ), 1,0))
database$UsoCel_Frec <- (ifelse((database$UsoCel > 1 ), 1,0))
### Vector de parametros, incluidos los que se mantienen fijos en la estimación
apollo_beta=c(asc_ruta1   = 0, asc_ruta2   = 0, asc_ruta3   = 0, asc_ruta4 = 0,
#b_tt  = 0,
b_dt  = 0,
b_Cong  = 0, #b_CongCD  = 0, b_CongEF  = 0,
b_Sem = 0,
b_ACC_0 = 0, b_ACC_1 = 0, b_ACC_2 = 0,
b_NO_CAMFD = 0, b_SI_CAMFD = 0,
b_NO_PANEL = 0, b_SI_PANEL = 0,
b_NO_ZER = 0, b_SI_ZER = 0,
b_No_MTRP = 0, b_Si_MTRP = 0,
b_No_Info = 0, b_Si_Info = 0,
b_UsoCel_P = 0, #b_UsoCel_A = 0,
b_UsoCel_F = 0)
### Vector con nombres (entre comillas) de los parámetros que se mantendrán fijos en su valor inicial en apollo_beta, use apollo_beta_fixed = c () si ninguno
apollo_fixed = c("asc_ruta3", "b_ACC_0", "b_NO_CAMFD", "b_No_MTRP", "b_NO_PANEL", "b_NO_ZER",
"b_Si_Info", "b_UsoCel_P")
apollo_inputs = apollo_validateInputs()
apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){
### Attach inputs and detach after function exit
apollo_attach(apollo_beta, apollo_inputs)
on.exit(apollo_detach(apollo_beta, apollo_inputs))
### Create list of probabilities P
P = list()
### List of utilities: these must use the same names as in mnl_settings, order is irrelevant
V = list()
V[['ruta1']]  = asc_ruta1  +  b_dt * D_Alt_1 +
b_Cong * CG_Alt_1*T_Alt_1 +
b_Sem*SEM_A1_km +
b_ACC_0*ACC_A1_0 + b_ACC_1*ACC_A1_1 + b_ACC_2*ACC_A1_2 +
b_NO_CAMFD * NO_CAMFD_A1 + b_SI_CAMFD * SI_CAMFD_A1 +
b_NO_PANEL * NO_PANEL_A1 + b_SI_PANEL * SI_PANEL_A1 +
b_NO_ZER * NO_ZER_A1 + b_SI_ZER * SI_ZER_A1 +
b_No_MTRP * NO_MTRP_A1 + b_Si_MTRP * SI_MTRP_A1
V[['ruta2']]  = asc_ruta2  +  b_dt * D_Alt_2 +
b_Cong * CG_Alt_2*T_Alt_2 +
b_Sem*SEM_A2_km +
b_ACC_0*ACC_A2_0 + b_ACC_1*ACC_A2_1 + b_ACC_2*ACC_A2_2 +
b_NO_CAMFD * NO_CAMFD_A2 + b_SI_CAMFD * SI_CAMFD_A2 +
b_NO_PANEL * NO_PANEL_A2 + b_SI_PANEL * SI_PANEL_A2 +
b_NO_ZER * NO_ZER_A2 + b_SI_ZER * SI_ZER_A2 +
b_No_MTRP * NO_MTRP_A2 + b_Si_MTRP * SI_MTRP_A2
V[['ruta3']]  = asc_ruta3  +  b_dt * D_Alt_3 +
b_Cong * CG_Alt_3 * T_Alt_3 +
b_Sem*SEM_A3_km +
b_ACC_0*ACC_A3_0 + b_ACC_1*ACC_A3_1 + b_ACC_2*ACC_A3_2 +
b_NO_CAMFD * NO_CAMFD_A3 + b_SI_CAMFD * SI_CAMFD_A3 +
b_NO_PANEL * NO_PANEL_A3 + b_SI_PANEL * SI_PANEL_A3 +
b_NO_ZER * NO_ZER_A3 + b_SI_ZER * SI_ZER_A3 +
b_No_MTRP * NO_MTRP_A3 + b_Si_MTRP * SI_MTRP_A3
V[['rutaEC']] =  asc_ruta4 +  b_dt * D_Alt_4 +
b_Cong * CG_Alt_4 * T_Alt_4 +
b_Sem*SEM_EC_km +
b_ACC_0*ACC_EC_0 + b_ACC_1*ACC_EC_1 + b_ACC_2*ACC_EC_2 +
b_NO_CAMFD * NO_CAMFD_EC + b_SI_CAMFD * SI_CAMFD_EC +
b_NO_PANEL * NO_PANEL_EC + b_SI_PANEL * SI_PANEL_EC +
b_NO_ZER * NO_ZER_EC + b_SI_ZER * SI_ZER_EC +
b_No_MTRP * NO_MTRP_EC + b_Si_MTRP * SI_MTRP_EC +
b_No_Info * SININFOTRF + b_Si_Info * CONINFOTRF +
b_UsoCel_P * UsoCel_Poco +  b_UsoCel_F * UsoCel_Frec
### Define settings for MNL model component
mnl_settings = list(
alternatives  = c(ruta1=1, ruta2=2, ruta3=3, rutaEC=4),
avail         = list(ruta1=1, ruta2=1, ruta3=1, rutaEC=1),
choiceVar     = CHOICE,
V             = V
)
### Compute probabilities using MNL model
P[['model']] = apollo_mnl(mnl_settings, functionality)
### Take product across observation for same individual
#P = apollo_panelProd(P, apollo_inputs, functionality)
### Prepare and return outputs of function
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
model = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)
apollo_modelOutput(model, modelOutput_settings=list(printPVal=TRUE) )
### Limpiar memoria
rm(list = ls())
workingDirectory="/Users/williz/Desktop/ModelosED/2. Articulo 2/1. Scripts/Modelos de Prueba/ICVL_MCond_3F/Version2"
setwd(workingDirectory)
### Cargar libreria Apollo
library(apollo)
### Inicializar código
apollo_initialise()
## Establecer controles principales
apollo_control = list(
modelName  = "MNL_Modelo_2",
modelDescr = "Modelo_2 MNL",
indivID    = "ViajeId",
nCores     = 1
)
database = read.csv("/Users/williz/Desktop/ModelosED/2. Articulo 2/2. Database/DBMuestra_ModeloLogitVL.csv",sep="\t", dec=".",header=TRUE)
# Normalización de las variables tiempo
for (i in 1:nrow(database)){
database$T_Alt_1[i] = (database$TIEMPOAlt1[i]- (min(c(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-3)))/(max(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-(min(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-3))
database$T_Alt_2[i] = (database$TIEMPOAlt2[i]- (min(c(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-3)))/(max(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-(min(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-3))
database$T_Alt_3[i] = (database$TIEMPOAlt3[i]- (min(c(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-3)))/(max(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-(min(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-3))
database$T_Alt_4[i] = (database$TIEMPOEC[i]- (min(c(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-3)))/(max(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-(min(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-3))
# Normalización de la variable distancia
database$D_Alt_1[i] = (database$DISTAlt1[i]- (min(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i])-0.2)))/(max(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i]))-(min(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i])-0.2)))
database$D_Alt_2[i] = (database$DISTAlt2[i]- (min(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i])-0.2)))/(max(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i]))-(min(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i])-0.2)))
database$D_Alt_3[i] = (database$DISTAlt3[i]- (min(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i])-0-2)))/(max(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i]))-(min(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i])-0.2)))
database$D_Alt_4[i] = (database$DISTEC[i]- (min(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i])-0.2)))/(max(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i]))-(min(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i])-0.2)))
if(database$HPICOHVALLE[i] == 1){
database$Vel_fl_Alt1[i] = 28/60;
database$Vel_fl_Alt2[i] = 28/60;
database$Vel_fl_Alt3[i] = 28/60;
database$Vel_fl_Alt4[i] = 28/60}
else{database$Vel_fl_Alt1[i] = 24/60;
database$Vel_fl_Alt2[i] = 24/60;
database$Vel_fl_Alt3[i]= 24/60;
database$Vel_fl_Alt4[i]= 24/60}
database$T_fl_Alt1[i] = database$DISTAlt1[i]/database$Vel_fl_Alt1[i]
database$T_fl_Alt2[i] = database$DISTAlt2[i]/database$Vel_fl_Alt2[i]
database$T_fl_Alt3[i] = database$DISTAlt3[i]/database$Vel_fl_Alt3[i]
database$T_fl_Alt4[i] = database$DISTEC[i]/database$Vel_fl_Alt4[i]
database$CG_Alt_1[i] = database$TIEMPOAlt1[i]/database$T_fl_Alt1[i]
database$CG_Alt_2[i] = database$TIEMPOAlt2[i]/database$T_fl_Alt2[i]
database$CG_Alt_3[i] = database$TIEMPOAlt3[i]/database$T_fl_Alt3[i]
database$CG_Alt_4[i] = database$TIEMPOEC[i]/database$T_fl_Alt4[i]
}
database$UsoCel_Poco <- (ifelse((database$UsoCel == 1), 1,0))
#database$UsoCel_AlgVec <- (ifelse((database$UsoCel == 3 ), 1,0))
database$UsoCel_Frec <- (ifelse((database$UsoCel > 1 ), 1,0))
### Vector de parametros, incluidos los que se mantienen fijos en la estimación
apollo_beta=c(asc_ruta1   = 0, asc_ruta2   = 0, asc_ruta3   = 0, asc_ruta4 = 0,
b_tt  = 0,
b_dt  = 0,
#b_Cong  = 0, #b_CongCD  = 0, b_CongEF  = 0,
b_Sem = 0,
b_ACC_0 = 0, b_ACC_1 = 0, b_ACC_2 = 0,
b_NO_CAMFD = 0, b_SI_CAMFD = 0,
b_NO_PANEL = 0, b_SI_PANEL = 0,
b_NO_ZER = 0, b_SI_ZER = 0,
b_No_MTRP = 0, b_Si_MTRP = 0,
b_No_Info = 0, b_Si_Info = 0,
b_UsoCel_P = 0, #b_UsoCel_A = 0,
b_UsoCel_F = 0)
### Vector con nombres (entre comillas) de los parámetros que se mantendrán fijos en su valor inicial en apollo_beta, use apollo_beta_fixed = c () si ninguno
apollo_fixed = c("asc_ruta3", "b_ACC_0", "b_NO_CAMFD", "b_No_MTRP", "b_NO_PANEL", "b_NO_ZER",
"b_Si_Info", "b_UsoCel_P")
apollo_inputs = apollo_validateInputs()
apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){
### Attach inputs and detach after function exit
apollo_attach(apollo_beta, apollo_inputs)
on.exit(apollo_detach(apollo_beta, apollo_inputs))
### Create list of probabilities P
P = list()
### List of utilities: these must use the same names as in mnl_settings, order is irrelevant
V = list()
V[['ruta1']]  = asc_ruta1  + b_tt * T_Alt_1*(1 + CG_Alt_1) + b_dt * D_Alt_1 +
#b_Cong * CG_Alt_1*T_Alt_1 +
b_Sem*SEM_A1_km +
b_ACC_0*ACC_A1_0 + b_ACC_1*ACC_A1_1 + b_ACC_2*ACC_A1_2 +
b_NO_CAMFD * NO_CAMFD_A1 + b_SI_CAMFD * SI_CAMFD_A1 +
b_NO_PANEL * NO_PANEL_A1 + b_SI_PANEL * SI_PANEL_A1 +
b_NO_ZER * NO_ZER_A1 + b_SI_ZER * SI_ZER_A1 +
b_No_MTRP * NO_MTRP_A1 + b_Si_MTRP * SI_MTRP_A1
V[['ruta2']]  = asc_ruta2  + b_tt * T_Alt_2*(1 + CG_Alt_2) + b_dt * D_Alt_2 +
#b_Cong * CG_Alt_2*T_Alt_2 +
b_Sem*SEM_A2_km +
b_ACC_0*ACC_A2_0 + b_ACC_1*ACC_A2_1 + b_ACC_2*ACC_A2_2 +
b_NO_CAMFD * NO_CAMFD_A2 + b_SI_CAMFD * SI_CAMFD_A2 +
b_NO_PANEL * NO_PANEL_A2 + b_SI_PANEL * SI_PANEL_A2 +
b_NO_ZER * NO_ZER_A2 + b_SI_ZER * SI_ZER_A2 +
b_No_MTRP * NO_MTRP_A2 + b_Si_MTRP * SI_MTRP_A2
V[['ruta3']]  = asc_ruta3  + b_tt * T_Alt_3*(1 + CG_Alt_3) + b_dt * D_Alt_3 +
#b_Cong * CG_Alt_3 * T_Alt_3 +
b_Sem*SEM_A3_km +
b_ACC_0*ACC_A3_0 + b_ACC_1*ACC_A3_1 + b_ACC_2*ACC_A3_2 +
b_NO_CAMFD * NO_CAMFD_A3 + b_SI_CAMFD * SI_CAMFD_A3 +
b_NO_PANEL * NO_PANEL_A3 + b_SI_PANEL * SI_PANEL_A3 +
b_NO_ZER * NO_ZER_A3 + b_SI_ZER * SI_ZER_A3 +
b_No_MTRP * NO_MTRP_A3 + b_Si_MTRP * SI_MTRP_A3
V[['rutaEC']] =  asc_ruta4 + b_tt * T_Alt_4*(1 + CG_Alt_4) + b_dt * D_Alt_4 +
#b_Cong * CG_Alt_4 * T_Alt_4 +
b_Sem*SEM_EC_km +
b_ACC_0*ACC_EC_0 + b_ACC_1*ACC_EC_1 + b_ACC_2*ACC_EC_2 +
b_NO_CAMFD * NO_CAMFD_EC + b_SI_CAMFD * SI_CAMFD_EC +
b_NO_PANEL * NO_PANEL_EC + b_SI_PANEL * SI_PANEL_EC +
b_NO_ZER * NO_ZER_EC + b_SI_ZER * SI_ZER_EC +
b_No_MTRP * NO_MTRP_EC + b_Si_MTRP * SI_MTRP_EC +
b_No_Info * SININFOTRF + b_Si_Info * CONINFOTRF +
b_UsoCel_P * UsoCel_Poco +  b_UsoCel_F * UsoCel_Frec
### Define settings for MNL model component
mnl_settings = list(
alternatives  = c(ruta1=1, ruta2=2, ruta3=3, rutaEC=4),
avail         = list(ruta1=1, ruta2=1, ruta3=1, rutaEC=1),
choiceVar     = CHOICE,
V             = V
)
### Compute probabilities using MNL model
P[['model']] = apollo_mnl(mnl_settings, functionality)
### Take product across observation for same individual
#P = apollo_panelProd(P, apollo_inputs, functionality)
### Prepare and return outputs of function
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
model = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)
apollo_modelOutput(model, modelOutput_settings=list(printPVal=TRUE) )
library(psych)
library(tidyverse)
library(readxl)
library(lubridate)
library(sf)
library(leaflet)
library(RColorBrewer)
library(sqldf)
require(reshape)
require(dplyr)
require(psych)
require(GGally)
library(corrplot)
library(corrr)
library(umx)
### Limpiar memoria
rm(list = ls())
workingDirectory="/Users/williz/Desktop/ModelosED/2. Articulo 2/1. Scripts/1. Analisis Factorial"
setwd(workingDirectory)
DBModLog <- read.csv("/Users/williz/Desktop/ModelosED/2. Articulo 2/2. Database/DBMuestra_ModeloLogitVL.csv",header = TRUE, sep = "\t")
DBModLog$Experiencia
ModoCond <- DBModLog %>%
select("FRbr", "UsoDirec","EnfCond","AFrSem","CulFr","OmLmVel",
"IgPare","UsoCel","PasoPeaton","INFOTRAFICO","DispMob","Experiencia",
"CinSeg","UsoPito")
psych::alpha(ModoCond, check.keys=TRUE)
ModoCond[c("Experiencia", "DispMob", "INFOTRAFICO", "CinSeg")] <- NULL
cor(ModoCond)
psych::alpha(ModoCond)
cor(ModoCond, use = "pairwise.complete.obs")
Rcor <- cor(ModoCond)
# Gráfico de las Correlaciones
corrplot(Rcor, order = "AOE", method = c("shade"), tl.col = "black", addCoef.col = "black",
tl.srt= 45, tl.cex = 1, type = "upper", diag = F,  addshade = "all")
corrplot.mixed(Rcor,lower.col = "black",number.cex=.7, title("Matriz de Correlación"))
# Determinante de la Matriz de correlaciones
det(Rcor)
#Test de esfericidad de Bartlett
print(cortest.bartlett(Rcor, n=nrow(ModoCond)))
#Analisis de Componentes Principales
pca1 <- princomp(ModoCond, scores = TRUE, cor = TRUE)
summary(pca1)
fa1 <-factanal(ModoCond, factor = 3, rotation = "varimax", na.rm = TRUE, lower = 0.05)
print(fa1,cutoff=0.2, sort=FALSE)
factor.plot(fa1,cut=0.5)
fa.diagram(fa)
fa.parallel.poly(fa1)
factores <- factanal(ModoCond, factor=3, rotation = "varimax", na.rm = TRUE, scores = "regression")$scores
indicators2 <- cbind(ModoCond, factores)
indicators2$Factor1 <- round(((indicators2$Factor1 - min(indicators2$Factor1))/(max(indicators2$Factor1)-min(indicators2$Factor1))),3)
indicators2$Factor2 <- round(((indicators2$Factor2 - min(indicators2$Factor2))/(max(indicators2$Factor2)-min(indicators2$Factor2))),3)
indicators2$Factor3 <- round(((indicators2$Factor3 - min(indicators2$Factor3))/(max(indicators2$Factor3)-min(indicators2$Factor3))),3)
indicators2
indicators2 <- rename(indicators2, replace =c(Factor1 = "ActAgr",
Factor2 = "LimVel",
Factor3 = "ConVial"))
par(mfrow=c(1,3))
hist(indicators2$ActAgr, freq = TRUE, main = "Distribución del Factor 1",
xlab = "Actitud Agresiva", ylab = "Frecuencia", col = "red")
hist(indicators2$LimVel, freq = TRUE, main = "Distribución del Factor 2",
xlab = "Limite de Velocidad", ylab = "Frecuencia", col = "blue")
hist(indicators2$ConVial, freq = TRUE, main = "Distribución del Factor 3",
xlab = "Conciencia Vial", ylab = "Frecuencia", col = "green")
fa1 <-factanal(ModoCond, factor = 5, rotation = "varimax", na.rm = TRUE, lower = 0.05)
print(fa1,cutoff=0.2, sort=FALSE)
fa1 <-factanal(ModoCond, factor = 6, rotation = "varimax", na.rm = TRUE, lower = 0.05)
print(fa1,cutoff=0.2, sort=FALSE)
factor.plot(fa1,cut=0.5)
fa1 <-factanal(ModoCond, factor = 6, rotation = "varimax", na.rm = TRUE, lower = 0.05)
sink()
fa1 <-factanal(ModoCond, factor = 6, rotation = "varimax", na.rm = TRUE, lower = 0.05)
print(fa1,cutoff=0.2, sort=FALSE)
fa1 <-factanal(ModoCond, factor = 4, rotation = "varimax", na.rm = TRUE, lower = 0.05)
print(fa1,cutoff=0.2, sort=FALSE)
#Analisis Factorial
fa <-factanal(ModoCond, factors = 2, rotation = "varimax", na.rm = TRUE,lower = 0.05)
print(fa,cutoff=0.2, sort=FALSE)
fa1 <-factanal(ModoCond, factor = 3, rotation = "varimax", na.rm = TRUE, lower = 0.05)
print(fa1,cutoff=0.2, sort=FALSE)
factor.plot(fa1,cut=0.5)
ACA <- ModoCond %>%
select("FRbr","EnfCond","AFrSem","CulFr", "UsoPito")
psych::alpha(ACA)
VLV <- ModoCond %>%
select("IgPare","OmLmVel")
psych::alpha(VLV)
CNV <- ModoCond %>%
select("UsoCel","PasoPeaton", "UsoDirec")
psych::alpha(CNV)
CNV <- ModoCond %>%
select("PasoPeaton", "UsoDirec")
psych::alpha(CNV)
CNV <- ModoCond %>%
select("PasoPeaton")
psych::alpha(CNV)
VLV <- ModoCond %>%
select("IgPare","OmLmVel", "UsoCel")
psych::alpha(VLV)
CNV <- ModoCond %>%
select("PasoPeaton", "UsoDirec")
psych::alpha(CNV)
VLV <- ModoCond %>%
select("IgPare","OmLmVel")
psych::alpha(VLV)
CNV <- ModoCond %>%
select("PasoPeaton", "UsoDirec")
psych::alpha(CNV)
# Cargar Datos desde MAC
DBModLog <- read.csv("/Users/williz/Desktop/ModelosED/2. Articulo 2/2. Database/DBMuestra_ModeloLogitVL.csv", header = TRUE, sep = "\t")
MCond <- DBModLog
names(MCond)
MCond[c("ViajeId")]<-NULL
names(MCond)
model_0 <- " #Variables Latentes
FA_1 =~ FRbr +  AFrSem + EnfCond + UsoPito + CulFr
FA_2 =~ IgPare + OmLmVel
FA_3 =~ PasoPeaton + UsoDirec
# Regresiones
FA_1 ~ EDUBASICA + JOVEN30 + ADULTO40 + ADULTO60 + EXP_2 + EXP_3 +  EXP_4 + EXP_5 + HTRB_2 + HTRB_3 + HPICO  + CSECO +
SININFOTRF  + USODISPMOB + FA_2
FA_2 ~ EDUBASICA + JOVEN30 + ADULTO40 + ADULTO60 + EXP_2 + EXP_3 +  EXP_4 + EXP_5 + HTRB_2 + HTRB_3 + HPICO  + CSECO +
SININFOTRF  + USODISPMOB
FA_3 ~ EDUBASICA + JOVEN30 + ADULTO40 + ADULTO60 + EXP_2 + EXP_3 +  EXP_4 + EXP_5 + HTRB_2 + HTRB_3 + HPICO  + CSECO +
SININFOTRF  + USODISPMOB
# Interceptos "
fit_0 <- cfa(model_0, data = MCond, orthogonal = TRUE)
library(lavaan)
library(tidyverse)
library(readxl)
library(lubridate)
library(openxlsx)
library(sf)
library(leaflet)
library(RColorBrewer)
library(dplyr)
library(readxl)
library(xlsx)
library(sqldf)
require(reshape)
require(dplyr)
require(psych)
require(GGally)
library(semPlot)
library(MVN)
library(mvtnorm)
model_3F_0 <- " #Variables Latentes
FA_1 =~ FRbr +  AFrSem + EnfCond + UsoPito + CulFr
FA_2 =~ IgPare + OmLmVel
FA_3 =~ PasoPeaton + UsoDirec
# Regresiones
FA_1 ~ EDUBASICA + JOVEN30 + ADULTO40 + ADULTO60 + EXP_2 + EXP_3 +  EXP_4 + EXP_5 + HTRB_2 + HTRB_3 + HPICO  + CSECO +
SININFOTRF  + USODISPMOB + FA_2
FA_2 ~ EDUBASICA + JOVEN30 + ADULTO40 + ADULTO60 + EXP_2 + EXP_3 +  EXP_4 + EXP_5 + HTRB_2 + HTRB_3 + HPICO  + CSECO +
SININFOTRF  + USODISPMOB
FA_3 ~ EDUBASICA + JOVEN30 + ADULTO40 + ADULTO60 + EXP_2 + EXP_3 +  EXP_4 + EXP_5 + HTRB_2 + HTRB_3 + HPICO  + CSECO +
SININFOTRF  + USODISPMOB
# Interceptos "
fit_0 <- cfa(model_3F_0, data = MCond, orthogonal = TRUE)
summary(fit_0, fit.measures= TRUE, standardized = TRUE)
model_3F_0 <- " #Variables Latentes
FA_1 =~ FRbr +  AFrSem + EnfCond + UsoPito + CulFr
FA_2 =~ IgPare + OmLmVel
FA_3 =~ PasoPeaton + UsoDirec
# Regresiones
FA_1 ~ EDUBASICA + JOVEN30 + ADULTO40 + ADULTO60 + EXP_2 + EXP_3 +  EXP_4 + EXP_5 + HTRB_2 + HTRB_3 + HPICO  + CSECO +
SININFOTRF  + USODISPMOB +
FA_2 ~ EDUBASICA + JOVEN30 + ADULTO40 + ADULTO60 + EXP_2 + EXP_3 +  EXP_4 + EXP_5 + HTRB_2 + HTRB_3 + HPICO  + CSECO +
SININFOTRF  + USODISPMOB
FA_3 ~ EDUBASICA + JOVEN30 + ADULTO40 + ADULTO60 + EXP_2 + EXP_3 +  EXP_4 + EXP_5 + HTRB_2 + HTRB_3 + HPICO  + CSECO +
SININFOTRF  + USODISPMOB
# Interceptos "
fit_0 <- cfa(model_3F_0, data = MCond, orthogonal = TRUE)
summary(fit_0, fit.measures= TRUE, standardized = TRUE)
model_3F_0 <- " #Variables Latentes
FA_1 =~ FRbr +  AFrSem + EnfCond + UsoPito + CulFr
FA_2 =~ IgPare + OmLmVel
FA_3 =~ PasoPeaton + UsoDirec
# Regresiones
FA_1 ~ EDUBASICA + JOVEN30 + ADULTO40 + ADULTO60 + EXP_2 + EXP_3 +  EXP_4 + EXP_5 + HTRB_2 + HTRB_3 + HPICO  + CSECO +
SININFOTRF  + USODISPMOB +
FA_2 ~ EDUBASICA + JOVEN30 + ADULTO40 + ADULTO60 + EXP_2 + EXP_3 +  EXP_4 + EXP_5 + HTRB_2 + HTRB_3 + HPICO  + CSECO +
SININFOTRF  + USODISPMOB
FA_3 ~ EDUBASICA + JOVEN30 + ADULTO40 + ADULTO60 + EXP_2 + EXP_3 +  EXP_4 + EXP_5 + HTRB_2 + HTRB_3 + HPICO  + CSECO +
SININFOTRF  + USODISPMOB
# Interceptos "
fit_0 <- cfa(model_3F_0, data = MCond, orthogonal = TRUE)
model_3F_0 <- " #Variables Latentes
FA_1 =~ FRbr +  AFrSem + EnfCond + UsoPito + CulFr
FA_2 =~ IgPare + OmLmVel
FA_3 =~ PasoPeaton + UsoDirec
# Regresiones
FA_1 ~ EDUBASICA + JOVEN30 + ADULTO40 + ADULTO60 + EXP_2 + EXP_3 +  EXP_4 + EXP_5 + HTRB_2 + HTRB_3 + HPICO  + CSECO +
SININFOTRF  + USODISPMOB
FA_2 ~ EDUBASICA + JOVEN30 + ADULTO40 + ADULTO60 + EXP_2 + EXP_3 +  EXP_4 + EXP_5 + HTRB_2 + HTRB_3 + HPICO  + CSECO +
SININFOTRF  + USODISPMOB
FA_3 ~ EDUBASICA + JOVEN30 + ADULTO40 + ADULTO60 + EXP_2 + EXP_3 +  EXP_4 + EXP_5 + HTRB_2 + HTRB_3 + HPICO  + CSECO +
SININFOTRF  + USODISPMOB
# Interceptos "
fit_0 <- cfa(model_3F_0, data = MCond, orthogonal = TRUE)
summary(fit_0, fit.measures= TRUE, standardized = TRUE)
#semPaths(fit_0, what = "std", style = "mx", title = FALSE, curvePivot = TRUE)
#parameterestimates(fit11)
modindices(fit_0, sort = TRUE, maximum.number = 10)
model_3F_0 <- " #Variables Latentes
FA_1 =~ FRbr +  AFrSem + EnfCond + UsoPito + CulFr
FA_2 =~ IgPare + OmLmVel
FA_3 =~ PasoPeaton + UsoDirec
# Regresiones
FA_1 ~ EDUBASICA + JOVEN30 + ADULTO40 + ADULTO60 + EXP_2 + EXP_3 +  EXP_4 + EXP_5 + HTRB_2 + HTRB_3 + HPICO  + CSECO +
SININFOTRF  + USODISPMOB + FA_2
FA_2 ~ EDUBASICA + JOVEN30 + ADULTO40 + ADULTO60 + EXP_2 + EXP_3 +  EXP_4 + EXP_5 + HTRB_2 + HTRB_3 + HPICO  + CSECO +
SININFOTRF  + USODISPMOB
FA_3 ~ EDUBASICA + JOVEN30 + ADULTO40 + ADULTO60 + EXP_2 + EXP_3 +  EXP_4 + EXP_5 + HTRB_2 + HTRB_3 + HPICO  + CSECO +
SININFOTRF  + USODISPMOB
# Interceptos "
fit_0 <- cfa(model_3F_0, data = MCond, orthogonal = TRUE)
summary(fit_0, fit.measures= TRUE, standardized = TRUE)
#semPaths(fit_0, what = "std", style = "mx", title = FALSE, curvePivot = TRUE)
#parameterestimates(fit11)
modindices(fit_0, sort = TRUE, maximum.number = 10)
