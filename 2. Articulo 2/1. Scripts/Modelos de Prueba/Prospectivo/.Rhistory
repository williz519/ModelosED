b_NO_CAMFD * NO_CAMFD_A2 + b_SI_CAMFD * SI_CAMFD_A2 +
b_NO_PANEL * NO_PANEL_A2 + b_SI_PANEL * SI_PANEL_A2 +
b_NO_ZER * NO_ZER_A2 + b_SI_ZER * SI_ZER_A2 +
b_No_MTRP * NO_MTRP_A2 + b_Si_MTRP * SI_MTRP_A2
V[['ruta3']]  = asc_ruta3 + b_tg * (W_Pgain_Alt3*VP3) + b_tl * (W_Ploss_Alt3*VN3) + b_dt * D_Alt_3 +
b_CongAB*CONG_AB_A3 + b_CongCD*CONG_CD_A3 + b_CongEF*CONG_EF_A3 +
b_Sem*SEM_A3_km +
b_ACC_0*ACC_A3_0 + b_ACC_1*ACC_A3_1 + b_ACC_2*ACC_A3_2 +
b_NO_CAMFD * NO_CAMFD_A3 + b_SI_CAMFD * SI_CAMFD_A3 +
b_NO_PANEL * NO_PANEL_A3 + b_SI_PANEL * SI_PANEL_A3 +
b_NO_ZER * NO_ZER_A3 + b_SI_ZER * SI_ZER_A3 +
b_No_MTRP * NO_MTRP_A3 + b_Si_MTRP * SI_MTRP_A3
V[['rutaEC']] = asc_ruta4 + b_tg * (W_Pgain_Alt4*VP4) + b_tl * (W_Ploss_Alt4*VN4) + b_dt * D_Alt_4 +
b_CongAB*CONG_AB_EC + b_CongCD*CONG_CD_EC + b_CongEF*CONG_EF_EC +
b_Sem*SEM_EC_km +
b_ACC_0*ACC_EC_0 + b_ACC_1*ACC_EC_1 + b_ACC_2*ACC_EC_2 +
b_NO_CAMFD * NO_CAMFD_EC + b_SI_CAMFD * SI_CAMFD_EC +
b_NO_PANEL * NO_PANEL_EC + b_SI_PANEL * SI_PANEL_EC +
b_NO_ZER * NO_ZER_EC + b_SI_ZER * SI_ZER_EC +
b_No_MTRP * NO_MTRP_EC + b_Si_MTRP * SI_MTRP_EC
### Define settings for MNL model component
mnl_settings = list(
alternatives  = c(ruta1=1, ruta2=2, ruta3=3, rutaEC=4),
avail         = list(ruta1=1, ruta2=1, ruta3=1, rutaEC=1),
choiceVar     = CHOICE,
V             = V
)
### Compute probabilities using MNL model
P[['model']] = apollo_mnl(mnl_settings, functionality)
### Take product across observation for same individual
#P = apollo_panelProd(P, apollo_inputs, functionality)
### Prepare and return outputs of function
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
model = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)
database$W_Pgain_Alt4
database$Pgain_Alt1
if (database$Pgain_Alt1[z]>0){
database$W_Pgain_Alt1[z] <- exp(-(-log(database$Pgain_Alt1[z])**gama))}
else{database$W_Pgain_Alt1[z] <- 0}
for(z in 1:nrow(database)){
gama = 1.16 # Hensher et al (2011) gama=0.37 Razo & Gao(2011), gama=0.74 Wu & Gonzalez
if (database$Pgain_Alt1[z]>0){
database$W_Pgain_Alt1[z] <- exp(-(-log(database$Pgain_Alt1[z])**gama))}
else{database$W_Pgain_Alt1[z] <- 0}}
database$W_Pgain_Alt1
database$Pgain_Alt1
exp(-(-log(database$Pgain_Alt1[1])**gama
log(database$Pgain_Alt1[z])
log(database$Pgain_Alt1[1])
log(database$Pgain_Alt1[1])**gama
gama
(log(database$Pgain_Alt1[1]))**gama
(log(database$Pgain_Alt1[1]))**1.16
(log(database$Pgain_Alt1[1]))
(log(database$Pgain_Alt1[1]))^gama
(log(database$Pgain_Alt1[1]))*1.16
(log(database$Pgain_Alt1[1]))**1.16
(log(database$Pgain_Alt1[1]))*gama
(log(database$Pgain_Alt1[1]))**gama
1.6789**1.56
(log(database$Pgain_Alt1[1]))**gama
(log(database$Pgain_Alt1[1]))
log(database$Pgain_Alt1[1])
(-log(database$Pgain_Alt1[1]))
(-log(database$Pgain_Alt1[1]))**gama
exp(-(-log(database$Pgain_Alt1[z]))**gama)
#install.packages("apollo")
### Clear memory
rm(list = ls())
workingDirectory="/Users/williz/Desktop/ModelosED/2. Articulo 2/1. Scripts/Modelos de Prueba/Prospectivo"
setwd(workingDirectory)
### Load Apollo library
library(apollo)
### Initialise code
apollo_initialise()
## Establecer controles principales
apollo_control = list(
modelName  = "Prospectivo Simple",
modelDescr = "Modelos Prospectivo en Eleccion de Ruta",
indivID    = "ViajeId"
)
database = read.csv("/Users/williz/Desktop/ModelosED/2. Articulo 2/2. Database/DBMuestra_ModeloLogitVL.csv",sep="\t", dec=".",header=TRUE)
for (i in 1:nrow(database)){
# NormalizaciÃ³n de las variables tiempo
database$T_Alt_1[i] = (database$TIEMPOAlt1[i]- (min(c(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-0.5)))/(max(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-(min(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-0.5))
database$T_Alt_2[i] = (database$TIEMPOAlt2[i]- (min(c(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-0.5)))/(max(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-(min(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-0.5))
database$T_Alt_3[i] = (database$TIEMPOAlt3[i]- (min(c(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-0.5)))/(max(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-(min(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-0.5))
database$T_Alt_4[i] = (database$TIEMPOEC[i]- (min(c(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-0.5)))/(max(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-(min(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-0.5))
# NormalizaciÃ³n de la variable distancia
database$D_Alt_1[i] = (database$DISTAlt1[i]- (min(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i])-0.1)))/(max(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i]))-(min(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i])-0.1)))
database$D_Alt_2[i] = (database$DISTAlt2[i]- (min(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i])-0.1)))/(max(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i]))-(min(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i])-0.1)))
database$D_Alt_3[i] = (database$DISTAlt3[i]- (min(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i])-0.1)))/(max(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i]))-(min(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i])-0.1)))
database$D_Alt_4[i] = (database$DISTEC[i]- (min(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i])-0.1)))/(max(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i]))-(min(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i])-0.1)))
#Tiempos de Referencia
database$T_rp[i] = quantile(c(database$T_Alt_1[i],database$T_Alt_2[i],database$T_Alt_3[i]), probs = 0.7)
}
alpha=0.88
beta=0.88
lamda= 2.25
for(z in 1:nrow(database)){
#Tiempo Alt_1
database$DT1[z] <- database$T_Alt_1[z]-database$T_rp[z]
if(database$DT1[z] >= 0)
{database$VN1[z] <- -lamda*(database$DT1[z])**beta
if (database$DT1[z]> 0.5){
database$Ploss_Alt1[z]= 0.1}
else{ if(database$DT1[z]> 0.2){
database$Ploss_Alt1[z] = 0.15}
else{database$Ploss_Alt1[z] = 0.25}}}
else
{database$VN1[z]<- 0
database$Ploss_Alt1[z] = 0}
if(database$DT1[z]< 0)
{database$VP1[z] <- (-database$DT1[z])**alpha
if (database$DT1[z]< -0.5){
database$Pgain_Alt1[z]<- 0.1}
else{ if(database$DT1[z]< -0.2){
database$Pgain_Alt1[z] <- 0.15}
else{database$Pgain_Alt1[z] <- 0.25}}}
else
{database$VP1[z]<- 0
database$Pgain_Alt1[z] <- 0}
#Tiempo Alt_2
database$DT2[z] <- database$T_Alt_2[z]- database$T_rp[z]
if(database$DT2[z] >= 0)
{database$VN2[z] <- -lamda*(database$DT2[z])**beta
if (database$DT2[z]> 0.5){
database$Ploss_Alt2[z]= 0.1}
else{ if(database$DT2[z]> 0.2){
database$Ploss_Alt2[z] = 0.15}
else{database$Ploss_Alt2[z] = 0.25}}}
else
{database$VN2[z]<- 0
database$Ploss_Alt2[z] = 0}
if(database$DT2[z]< 0)
{database$VP2[z] <- (-database$DT2[z])**alpha
if (database$DT2[z]< -0.5){
database$Pgain_Alt2[z]<- 0.1}
else{ if(database$DT2[z]< -0.2){
database$Pgain_Alt2[z] <- 0.15}
else{database$Pgain_Alt2[z] <- 0.25}}}
else
{database$VP2[z]<- 0
database$Pgain_Alt2[z] <- 0}
#Tiempo Alt_3
database$DT3[z] <- database$T_Alt_3[z]-database$T_rp[z]
if(database$DT3[z] >= 0)
{database$VN3[z] <- -lamda*(database$DT3[z])**beta
if (database$DT3[z]> 0.5){
database$Ploss_Alt3[z]= 0.1}
else{ if(database$DT3[z]> 0.2){
database$Ploss_Alt3[z] = 0.15}
else{database$Ploss_Alt3[z] = 0.25}}}
else
{database$VN3[z]<- 0
database$Ploss_Alt3[z] = 0}
if(database$DT3[z]< 0)
{database$VP3[z] <- (-database$DT3[z])**alpha
if (database$DT3[z]< -0.5){
database$Pgain_Alt3[z]<- 0.1}
else{ if(database$DT3[z]< -0.2){
database$Pgain_Alt3[z] <- 0.15}
else{database$Pgain_Alt3[z] <- 0.25}}}
else
{database$VP3[z]<- 0
database$Pgain_Alt3[z] <- 0}
#Tiempo Alt_4
database$DT4[z] <- database$T_Alt_4[z]-database$T_rp[z]
if(database$DT4[z] >= 0)
{database$VN4[z] <- -lamda*(database$DT4[z])**beta
if (database$DT4[z]> 0.5){
database$Ploss_Alt4[z]= 0.1}
else{ if(database$DT4[z]> 0.2){
database$Ploss_Alt4[z] = 0.15}
else{database$Ploss_Alt4[z] = 0.25}}}
else
{database$VN4[z]<- 0
database$Ploss_Alt4[z] = 0}
if(database$DT4[z]< 0)
{database$VP4[z] <- (-database$DT4[z])**alpha
if (database$DT4[z]< -0.5){
database$Pgain_Alt4[z]<- 0.1}
else{ if(database$DT4[z]< -0.2){
database$Pgain_Alt4[z] <- 0.15}
else{database$Pgain_Alt4[z] <- 0.25}}}
else
{database$VP4[z]<- 0
database$Pgain_Alt4[z] <- 0}
}
#Prelec I
for(z in 1:nrow(database)){
gama = 1.16 # Hensher et al (2011) gama=0.37 Razo & Gao(2011), gama=0.74 Wu & Gonzalez
if (database$Pgain_Alt1[z]>0){
database$W_Pgain_Alt1[z] <- exp(-(-log(database$Pgain_Alt1[z]))**gama)}
else{database$W_Pgain_Alt1[z] <- 0}
if(database$Ploss_Alt1[z]>0){
database$W_Ploss_Alt1[z] <- exp(-(-log(database$Ploss_Alt1[z]))**gama)}
else{database$W_Ploss_Alt1[z] <- 0}
if(database$Pgain_Alt2>0){
database$W_Pgain_Alt2[z] <- exp(-(-log(database$Pgain_Alt2[z]))**gama)}
else{database$W_Pgain_Alt2[z] <- 0}
if(database$Ploss_Alt2[z]>0){
database$W_Ploss_Alt2[z] <- exp(-(-log(database$Ploss_Alt2[z]))**gama)}
else{database$W_Ploss_Alt2[z] <-0}
if (database$Pgain_Alt3[z]>0){
database$W_Pgain_Alt3[z] <- exp(-(-log(database$Pgain_Alt3[z]))**gama)}
else{database$W_Pgain_Alt3[z]<-0}
if(database$Ploss_Alt3[z]>0){
database$W_Ploss_Alt3[z] <- exp(-(-log(database$Ploss_Alt3[z]))**gama)}
else{database$W_Ploss_Alt3[z]<-0}
if(database$Pgain_Alt4[z]>0){
database$W_Pgain_Alt4[z] <- exp(-(-log(database$Pgain_Alt4[z]))**gama)}
else{database$W_Pgain_Alt4[z]<-0}
if(database$Ploss_Alt4[z]>0){
database$W_Ploss_Alt4[z] <- exp(-(-log(database$Ploss_Alt4[z]))**gama)}
else{database$W_Ploss_Alt4[z] <-0}
}
### Vector de parametros, incluidos los que se mantienen fijos en la estimaciÃ³n
apollo_beta=c(asc_ruta1   = 0, asc_ruta2   = 0, asc_ruta3   = 0, asc_ruta4 = 0,
b_tg  = 0, b_tl  = 0,
b_dt  = 0,
b_CongAB  = 0, b_CongCD  = 0, b_CongEF  = 0,
b_Sem = 0,
b_ACC_0 = 0, b_ACC_1 = 0, b_ACC_2 = 0,
b_NO_CAMFD = 0, b_SI_CAMFD = 0,
b_NO_PANEL = 0, b_SI_PANEL = 0,
b_NO_ZER = 0, b_SI_ZER = 0,
b_No_MTRP = 0, b_Si_MTRP = 0)
### Vector con nombres (entre comillas) de los parÃ¡metros que se mantendrÃ¡n fijos en su valor inicial en apollo_beta, use apollo_beta_fixed = c () si ninguno
apollo_fixed = c("asc_ruta3", "b_CongAB", "b_ACC_0", "b_NO_CAMFD", "b_No_MTRP", "b_NO_PANEL", "b_NO_ZER")
apollo_inputs = apollo_validateInputs()
apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){
### Attach inputs and detach after function exit
apollo_attach(apollo_beta, apollo_inputs)
on.exit(apollo_detach(apollo_beta, apollo_inputs))
### Crear una lista de probabilidades P
P = list()
### List of utilities: these must use the same names as in mnl_settings, order is irrelevant
V = list()
V[['ruta1']]  = asc_ruta1 + b_tg * (W_Pgain_Alt1*VP1) + b_tl * (W_Ploss_Alt1*VN1) + b_dt * D_Alt_1 +
b_CongAB*CONG_AB_A1 + b_CongCD*CONG_CD_A1 + b_CongEF*CONG_EF_A1 +
b_Sem*SEM_A1_km +
b_ACC_0*ACC_A1_0 + b_ACC_1*ACC_A1_1 + b_ACC_2*ACC_A1_2 +
b_NO_CAMFD * NO_CAMFD_A1 + b_SI_CAMFD * SI_CAMFD_A1 +
b_NO_PANEL * NO_PANEL_A1 + b_SI_PANEL * SI_PANEL_A1 +
b_NO_ZER * NO_ZER_A1 + b_SI_ZER * SI_ZER_A1 +
b_No_MTRP * NO_MTRP_A1 + b_Si_MTRP * SI_MTRP_A1
V[['ruta2']]  = asc_ruta2 + b_tg * (W_Pgain_Alt2*VP2) + b_tl * (W_Ploss_Alt2*VN2) + b_dt * D_Alt_2 +
b_CongAB*CONG_AB_A2 + b_CongCD*CONG_CD_A2 + b_CongEF*CONG_EF_A2 +
b_Sem*SEM_A2_km +
b_ACC_0*ACC_A2_0 + b_ACC_1*ACC_A2_1 + b_ACC_2*ACC_A2_2 +
b_NO_CAMFD * NO_CAMFD_A2 + b_SI_CAMFD * SI_CAMFD_A2 +
b_NO_PANEL * NO_PANEL_A2 + b_SI_PANEL * SI_PANEL_A2 +
b_NO_ZER * NO_ZER_A2 + b_SI_ZER * SI_ZER_A2 +
b_No_MTRP * NO_MTRP_A2 + b_Si_MTRP * SI_MTRP_A2
V[['ruta3']]  = asc_ruta3 + b_tg * (W_Pgain_Alt3*VP3) + b_tl * (W_Ploss_Alt3*VN3) + b_dt * D_Alt_3 +
b_CongAB*CONG_AB_A3 + b_CongCD*CONG_CD_A3 + b_CongEF*CONG_EF_A3 +
b_Sem*SEM_A3_km +
b_ACC_0*ACC_A3_0 + b_ACC_1*ACC_A3_1 + b_ACC_2*ACC_A3_2 +
b_NO_CAMFD * NO_CAMFD_A3 + b_SI_CAMFD * SI_CAMFD_A3 +
b_NO_PANEL * NO_PANEL_A3 + b_SI_PANEL * SI_PANEL_A3 +
b_NO_ZER * NO_ZER_A3 + b_SI_ZER * SI_ZER_A3 +
b_No_MTRP * NO_MTRP_A3 + b_Si_MTRP * SI_MTRP_A3
V[['rutaEC']] = asc_ruta4 + b_tg * (W_Pgain_Alt4*VP4) + b_tl * (W_Ploss_Alt4*VN4) + b_dt * D_Alt_4 +
b_CongAB*CONG_AB_EC + b_CongCD*CONG_CD_EC + b_CongEF*CONG_EF_EC +
b_Sem*SEM_EC_km +
b_ACC_0*ACC_EC_0 + b_ACC_1*ACC_EC_1 + b_ACC_2*ACC_EC_2 +
b_NO_CAMFD * NO_CAMFD_EC + b_SI_CAMFD * SI_CAMFD_EC +
b_NO_PANEL * NO_PANEL_EC + b_SI_PANEL * SI_PANEL_EC +
b_NO_ZER * NO_ZER_EC + b_SI_ZER * SI_ZER_EC +
b_No_MTRP * NO_MTRP_EC + b_Si_MTRP * SI_MTRP_EC
### Define settings for MNL model component
mnl_settings = list(
alternatives  = c(ruta1=1, ruta2=2, ruta3=3, rutaEC=4),
avail         = list(ruta1=1, ruta2=1, ruta3=1, rutaEC=1),
choiceVar     = CHOICE,
V             = V
)
### Compute probabilities using MNL model
P[['model']] = apollo_mnl(mnl_settings, functionality)
### Take product across observation for same individual
#P = apollo_panelProd(P, apollo_inputs, functionality)
### Prepare and return outputs of function
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
model = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)
apollo_modelOutput(model, modelOutput_settings=list(printPVal=TRUE) )
#install.packages("apollo")
### Clear memory
rm(list = ls())
workingDirectory="/Users/williz/Desktop/ModelosED/2. Articulo 2/1. Scripts/Modelos de Prueba/Prospectivo"
setwd(workingDirectory)
### Load Apollo library
library(apollo)
### Initialise code
apollo_initialise()
## Establecer controles principales
apollo_control = list(
modelName  = "Prospectivo Simple",
modelDescr = "Modelos Prospectivo en Eleccion de Ruta",
indivID    = "ViajeId"
)
database = read.csv("/Users/williz/Desktop/ModelosED/2. Articulo 2/2. Database/DBMuestra_ModeloLogitVL.csv",sep="\t", dec=".",header=TRUE)
for (i in 1:nrow(database)){
# NormalizaciÃ³n de las variables tiempo
database$T_Alt_1[i] = (database$TIEMPOAlt1[i]- (min(c(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-0.5)))/(max(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-(min(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-0.5))
database$T_Alt_2[i] = (database$TIEMPOAlt2[i]- (min(c(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-0.5)))/(max(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-(min(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-0.5))
database$T_Alt_3[i] = (database$TIEMPOAlt3[i]- (min(c(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-0.5)))/(max(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-(min(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-0.5))
database$T_Alt_4[i] = (database$TIEMPOEC[i]- (min(c(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-0.5)))/(max(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-(min(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-0.5))
# NormalizaciÃ³n de la variable distancia
database$D_Alt_1[i] = (database$DISTAlt1[i]- (min(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i])-0.1)))/(max(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i]))-(min(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i])-0.1)))
database$D_Alt_2[i] = (database$DISTAlt2[i]- (min(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i])-0.1)))/(max(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i]))-(min(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i])-0.1)))
database$D_Alt_3[i] = (database$DISTAlt3[i]- (min(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i])-0.1)))/(max(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i]))-(min(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i])-0.1)))
database$D_Alt_4[i] = (database$DISTEC[i]- (min(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i])-0.1)))/(max(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i]))-(min(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i])-0.1)))
#Tiempos de Referencia
database$T_rp[i] = quantile(c(database$T_Alt_1[i],database$T_Alt_2[i],database$T_Alt_3[i]), probs = 0.7)
}
alpha=0.88
beta=0.88
lamda= 2.25
for(z in 1:nrow(database)){
#Tiempo Alt_1
database$DT1[z] <- database$T_Alt_1[z]-database$T_rp[z]
if(database$DT1[z] >= 0)
{database$VN1[z] <- -lamda*(database$DT1[z])**beta
if (database$DT1[z]> 0.5){
database$Ploss_Alt1[z]= 0.1}
else{ if(database$DT1[z]> 0.2){
database$Ploss_Alt1[z] = 0.15}
else{database$Ploss_Alt1[z] = 0.25}}}
else
{database$VN1[z]<- 0
database$Ploss_Alt1[z] = 0}
if(database$DT1[z]< 0)
{database$VP1[z] <- (-database$DT1[z])**alpha
if (database$DT1[z]< -0.5){
database$Pgain_Alt1[z]<- 0.1}
else{ if(database$DT1[z]< -0.2){
database$Pgain_Alt1[z] <- 0.15}
else{database$Pgain_Alt1[z] <- 0.25}}}
else
{database$VP1[z]<- 0
database$Pgain_Alt1[z] <- 0}
#Tiempo Alt_2
database$DT2[z] <- database$T_Alt_2[z]- database$T_rp[z]
if(database$DT2[z] >= 0)
{database$VN2[z] <- -lamda*(database$DT2[z])**beta
if (database$DT2[z]> 0.5){
database$Ploss_Alt2[z]= 0.1}
else{ if(database$DT2[z]> 0.2){
database$Ploss_Alt2[z] = 0.15}
else{database$Ploss_Alt2[z] = 0.25}}}
else
{database$VN2[z]<- 0
database$Ploss_Alt2[z] = 0}
if(database$DT2[z]< 0)
{database$VP2[z] <- (-database$DT2[z])**alpha
if (database$DT2[z]< -0.5){
database$Pgain_Alt2[z]<- 0.1}
else{ if(database$DT2[z]< -0.2){
database$Pgain_Alt2[z] <- 0.15}
else{database$Pgain_Alt2[z] <- 0.25}}}
else
{database$VP2[z]<- 0
database$Pgain_Alt2[z] <- 0}
#Tiempo Alt_3
database$DT3[z] <- database$T_Alt_3[z]-database$T_rp[z]
if(database$DT3[z] >= 0)
{database$VN3[z] <- -lamda*(database$DT3[z])**beta
if (database$DT3[z]> 0.5){
database$Ploss_Alt3[z]= 0.1}
else{ if(database$DT3[z]> 0.2){
database$Ploss_Alt3[z] = 0.15}
else{database$Ploss_Alt3[z] = 0.25}}}
else
{database$VN3[z]<- 0
database$Ploss_Alt3[z] = 0}
if(database$DT3[z]< 0)
{database$VP3[z] <- (-database$DT3[z])**alpha
if (database$DT3[z]< -0.5){
database$Pgain_Alt3[z]<- 0.1}
else{ if(database$DT3[z]< -0.2){
database$Pgain_Alt3[z] <- 0.15}
else{database$Pgain_Alt3[z] <- 0.25}}}
else
{database$VP3[z]<- 0
database$Pgain_Alt3[z] <- 0}
#Tiempo Alt_4
database$DT4[z] <- database$T_Alt_4[z]-database$T_rp[z]
if(database$DT4[z] >= 0)
{database$VN4[z] <- -lamda*(database$DT4[z])**beta
if (database$DT4[z]> 0.5){
database$Ploss_Alt4[z]= 0.1}
else{ if(database$DT4[z]> 0.2){
database$Ploss_Alt4[z] = 0.15}
else{database$Ploss_Alt4[z] = 0.25}}}
else
{database$VN4[z]<- 0
database$Ploss_Alt4[z] = 0}
if(database$DT4[z]< 0)
{database$VP4[z] <- (-database$DT4[z])**alpha
if (database$DT4[z]< -0.5){
database$Pgain_Alt4[z]<- 0.1}
else{ if(database$DT4[z]< -0.2){
database$Pgain_Alt4[z] <- 0.15}
else{database$Pgain_Alt4[z] <- 0.25}}}
else
{database$VP4[z]<- 0
database$Pgain_Alt4[z] <- 0}
}
#Prelec I
for(z in 1:nrow(database)){
gama = 1.16 # Hensher et al (2011) gama=0.37 Razo & Gao(2011), gama=0.74 Wu & Gonzalez
if (database$Pgain_Alt1[z]>0){
database$W_Pgain_Alt1[z] <- exp(-(-log(database$Pgain_Alt1[z]))**gama)}
else{database$W_Pgain_Alt1[z] <- 0}
if(database$Ploss_Alt1[z]>0){
database$W_Ploss_Alt1[z] <- exp(-(-log(database$Ploss_Alt1[z]))**gama)}
else{database$W_Ploss_Alt1[z] <- 0}
if(database$Pgain_Alt2>0){
database$W_Pgain_Alt2[z] <- exp(-(-log(database$Pgain_Alt2[z]))**gama)}
else{database$W_Pgain_Alt2[z] <- 0}
if(database$Ploss_Alt2[z]>0){
database$W_Ploss_Alt2[z] <- exp(-(-log(database$Ploss_Alt2[z]))**gama)}
else{database$W_Ploss_Alt2[z] <-0}
if (database$Pgain_Alt3[z]>0){
database$W_Pgain_Alt3[z] <- exp(-(-log(database$Pgain_Alt3[z]))**gama)}
else{database$W_Pgain_Alt3[z]<-0}
if(database$Ploss_Alt3[z]>0){
database$W_Ploss_Alt3[z] <- exp(-(-log(database$Ploss_Alt3[z]))**gama)}
else{database$W_Ploss_Alt3[z]<-0}
if(database$Pgain_Alt4[z]>0){
database$W_Pgain_Alt4[z] <- exp(-(-log(database$Pgain_Alt4[z]))**gama)}
else{database$W_Pgain_Alt4[z]<-0}
if(database$Ploss_Alt4[z]>0){
database$W_Ploss_Alt4[z] <- exp(-(-log(database$Ploss_Alt4[z]))**gama)}
else{database$W_Ploss_Alt4[z] <-0}
}
### Vector de parametros, incluidos los que se mantienen fijos en la estimaciÃ³n
apollo_beta=c(asc_ruta1   = 0, asc_ruta2   = 0, asc_ruta3   = 0, asc_ruta4 = 0,
b_tg  = 0, b_tl  = 0,
b_dt  = 0,
b_CongAB  = 0, b_CongCD  = 0, b_CongEF  = 0,
b_Sem = 0,
b_ACC_0 = 0, b_ACC_1 = 0, b_ACC_2 = 0,
b_NO_CAMFD = 0, b_SI_CAMFD = 0,
b_NO_PANEL = 0, b_SI_PANEL = 0,
b_NO_ZER = 0, b_SI_ZER = 0,
b_No_MTRP = 0, b_Si_MTRP = 0)
### Vector con nombres (entre comillas) de los parÃ¡metros que se mantendrÃ¡n fijos en su valor inicial en apollo_beta, use apollo_beta_fixed = c () si ninguno
apollo_fixed = c("asc_ruta3", "b_CongAB", "b_ACC_0", "b_NO_CAMFD", "b_No_MTRP", "b_NO_PANEL", "b_NO_ZER")
apollo_inputs = apollo_validateInputs()
apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){
### Attach inputs and detach after function exit
apollo_attach(apollo_beta, apollo_inputs)
on.exit(apollo_detach(apollo_beta, apollo_inputs))
### Crear una lista de probabilidades P
P = list()
### List of utilities: these must use the same names as in mnl_settings, order is irrelevant
V = list()
V[['ruta1']]  = asc_ruta1 +  b_dt * D_Alt_1 +
b_CongAB*CONG_AB_A1 + b_CongCD*CONG_CD_A1 + b_CongEF*CONG_EF_A1 +
b_Sem*SEM_A1_km +
b_ACC_0*ACC_A1_0 + b_ACC_1*ACC_A1_1 + b_ACC_2*ACC_A1_2 +
b_NO_CAMFD * NO_CAMFD_A1 + b_SI_CAMFD * SI_CAMFD_A1 +
b_NO_PANEL * NO_PANEL_A1 + b_SI_PANEL * SI_PANEL_A1 +
b_NO_ZER * NO_ZER_A1 + b_SI_ZER * SI_ZER_A1 +
b_No_MTRP * NO_MTRP_A1 + b_Si_MTRP * SI_MTRP_A1
V[['ruta2']]  = asc_ruta2 +  b_dt * D_Alt_2 +
b_CongAB*CONG_AB_A2 + b_CongCD*CONG_CD_A2 + b_CongEF*CONG_EF_A2 +
b_Sem*SEM_A2_km +
b_ACC_0*ACC_A2_0 + b_ACC_1*ACC_A2_1 + b_ACC_2*ACC_A2_2 +
b_NO_CAMFD * NO_CAMFD_A2 + b_SI_CAMFD * SI_CAMFD_A2 +
b_NO_PANEL * NO_PANEL_A2 + b_SI_PANEL * SI_PANEL_A2 +
b_NO_ZER * NO_ZER_A2 + b_SI_ZER * SI_ZER_A2 +
b_No_MTRP * NO_MTRP_A2 + b_Si_MTRP * SI_MTRP_A2
V[['ruta3']]  = asc_ruta3 +  b_dt * D_Alt_3 +
b_CongAB*CONG_AB_A3 + b_CongCD*CONG_CD_A3 + b_CongEF*CONG_EF_A3 +
b_Sem*SEM_A3_km +
b_ACC_0*ACC_A3_0 + b_ACC_1*ACC_A3_1 + b_ACC_2*ACC_A3_2 +
b_NO_CAMFD * NO_CAMFD_A3 + b_SI_CAMFD * SI_CAMFD_A3 +
b_NO_PANEL * NO_PANEL_A3 + b_SI_PANEL * SI_PANEL_A3 +
b_NO_ZER * NO_ZER_A3 + b_SI_ZER * SI_ZER_A3 +
b_No_MTRP * NO_MTRP_A3 + b_Si_MTRP * SI_MTRP_A3
V[['rutaEC']] = asc_ruta4 + b_tg * (W_Pgain_Alt4*VP4) + b_tl * (W_Ploss_Alt4*VN4) + b_dt * D_Alt_4 +
b_CongAB*CONG_AB_EC + b_CongCD*CONG_CD_EC + b_CongEF*CONG_EF_EC +
b_Sem*SEM_EC_km +
b_ACC_0*ACC_EC_0 + b_ACC_1*ACC_EC_1 + b_ACC_2*ACC_EC_2 +
b_NO_CAMFD * NO_CAMFD_EC + b_SI_CAMFD * SI_CAMFD_EC +
b_NO_PANEL * NO_PANEL_EC + b_SI_PANEL * SI_PANEL_EC +
b_NO_ZER * NO_ZER_EC + b_SI_ZER * SI_ZER_EC +
b_No_MTRP * NO_MTRP_EC + b_Si_MTRP * SI_MTRP_EC
### Define settings for MNL model component
mnl_settings = list(
alternatives  = c(ruta1=1, ruta2=2, ruta3=3, rutaEC=4),
avail         = list(ruta1=1, ruta2=1, ruta3=1, rutaEC=1),
choiceVar     = CHOICE,
V             = V
)
### Compute probabilities using MNL model
P[['model']] = apollo_mnl(mnl_settings, functionality)
### Take product across observation for same individual
#P = apollo_panelProd(P, apollo_inputs, functionality)
### Prepare and return outputs of function
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
model = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)
apollo_modelOutput(model, modelOutput_settings=list(printPVal=TRUE) )
