"b_CongEF_ruta1",
"b_CongEF_ruta2",
"b_CongEF_ruta3",
"b_CongEF_rutaEC")
apollo_inputs = apollo_validateInputs()
apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){
### Attach inputs and detach after function exit
apollo_attach(apollo_beta, apollo_inputs)
on.exit(apollo_detach(apollo_beta, apollo_inputs))
### Create list of probabilities P
P = list()
### List of utilities: these must use the same names as in mnl_settings, order is irrelevant
V = list()
V[['ruta1']]  = asc_ruta1  + b_tt * TIEMPOAlt1 + b_dt * DISTAlt1 + b_CongAB_ruta1*CONG_AB_A1 +
b_CongCD_ruta1*CONG_CD_A1 + b_CongEF_ruta1*CONG_EF_A1
V[['ruta2']]  = asc_ruta2  + b_tt * TIEMPOAlt2 + b_dt * DISTAlt2 + b_CongAB_ruta2*CONG_AB_A2 +
b_CongCD_ruta2*CONG_CD_A2 + b_CongEF_ruta2*CONG_EF_A2
V[['ruta3']]  = asc_ruta3  + b_tt * TIEMPOAlt3 + b_dt * DISTAlt3 + b_CongAB_ruta3*CONG_AB_A3 +
b_CongCD_ruta3*CONG_CD_A3 + b_CongEF_ruta3*CONG_EF_A3
V[['rutaEC']] = asc_rutaEC + b_tt * TIEMPOEC   + b_dt * DISTEC + b_CongAB_rutaEC*CONG_AB_EC +
b_CongCD_rutaEC*CONG_CD_EC + b_CongEF_rutaEC*CONG_EF_EC
### Define settings for MNL model component
mnl_settings = list(
alternatives  = c(ruta1=1, ruta2=2, ruta3=3, rutaEC=4),
avail         = list(ruta1=1, ruta2=1, ruta3=1, rutaEC=1),
choiceVar     = CHOICE,
V             = V
)
### Compute probabilities using MNL model
P[['model']] = apollo_mnl(mnl_settings, functionality)
### Take product across observation for same individual
#P = apollo_panelProd(P, apollo_inputs, functionality)
### Prepare and return outputs of function
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
model = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)
apollo_modelOutput(model, modelOutput_settings=list(printPVal=TRUE) )
apollo_saveOutput(model, saveOutput_settings=list(printPVal=TRUE))
### Limpiar memoria
rm(list = ls())
workingDirectory="/Users/williz/Desktop/ModelosED/1. Articulo 2/1. Scripts/Modelos MNL/MNL_Modelo_1"
setwd(workingDirectory)
###Cargar la libreria knitr
library(knitr)
### Cargar libreria Apollo
library(apollo)
### Inicializar código
apollo_initialise()
## Establecer controles principales
apollo_control = list(
modelName  = "MNL_Modelo_1",
modelDescr = "Modelo MNL Simple",
indivID    = "ViajeId",
nCores     = 1
)
database = read.csv("/Users/williz/Desktop/ModelosED/1. Articulo 2/2. Database/DBMuestra_ModeloLogitVL.csv",sep="\t", dec=".",header=TRUE)
### Vector de parametros, incluidos los que se mantienen fijos en la estimación
apollo_beta=c(asc_ruta1   = 0, asc_ruta2   = 0, asc_ruta3   = 0, asc_rutaEC  = 0,
b_tt  = 0,
b_dt  = 0,
b_CongAB_ruta1  = 0, b_CongCD_ruta1  = 0, b_CongEF_ruta1  = 1,
b_CongAB_ruta2  = 0, b_CongCD_ruta2  = 0, b_CongEF_ruta2  = 1,
b_CongAB_ruta3  = 0, b_CongCD_ruta3  = 0, b_CongEF_ruta3  = 1,
b_CongAB_rutaEC  = 0, b_CongCD_rutaEC  = 0, b_CongEF_rutaEC  = 1,
b_Sem_0_ruta1 = 0, b_Sem_0_ruta2 = 0, b_Sem_0_ruta3 = 0, b_Sem_0_rutaEC = 0,
b_Sem_1_ruta1 = 0, b_Sem_1_ruta2 = 0, b_Sem_1_ruta3 = 0, b_Sem_1_rutaEC = 0,
b_Sem_2_ruta1 = 0, b_Sem_2_ruta2 = 0, b_Sem_2_ruta3 = 0, b_Sem_2_rutaEC = 0,
b_Sem_3_ruta1 = 0, b_Sem_3_ruta2 = 0, b_Sem_3_ruta3 = 0, b_Sem_3_rutaEC = 0,
b_Sem_4_ruta1 = 1, b_Sem_4_ruta2 = 1, b_Sem_4_ruta3 = 1, b_Sem_4_rutaEC = 0)
### Vector con nombres (entre comillas) de los parámetros que se mantendrán fijos en su valor inicial en apollo_beta, use apollo_beta_fixed = c () si ninguno
apollo_fixed = c("asc_ruta1",
"b_CongEF_ruta1", "b_CongEF_ruta2", "b_CongEF_ruta3", "b_CongEF_rutaEC",
"b_Sem_4_ruta1", "b_Sem_4_ruta2", "b_Sem_4_ruta3", "b_Sem_4_rutaEC")
apollo_inputs = apollo_validateInputs()
apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){
### Attach inputs and detach after function exit
apollo_attach(apollo_beta, apollo_inputs)
on.exit(apollo_detach(apollo_beta, apollo_inputs))
### Create list of probabilities P
P = list()
### List of utilities: these must use the same names as in mnl_settings, order is irrelevant
V = list()
V[['ruta1']]  = asc_ruta1  + b_tt * TIEMPOAlt1 + b_dt * DISTAlt1 + b_CongAB_ruta1*CONG_AB_A1 +
b_CongCD_ruta1*CONG_CD_A1 + b_CongEF_ruta1*CONG_EF_A1 + b_Sem_0_ruta1*SEMF_A1_0 +
b_Sem_1_ruta1*SEMF_A1_1 + b_Sem_2_ruta1*SEMF_A1_2 + b_Sem_3_ruta1*SEMF_A1_3 +
b_Sem_4_ruta1*SEMF_A1_4 +  b_ACC_0_ruta1*ACC_A1_0 + b_ACC_1_ruta1*ACC_A1_1 +
b_ACC_2_ruta1*ACC_A1_2
V[['ruta2']]  = asc_ruta2  + b_tt * TIEMPOAlt2 + b_dt * DISTAlt2 + b_CongAB_ruta2*CONG_AB_A2 +
b_CongCD_ruta2*CONG_CD_A2 + b_CongEF_ruta2*CONG_EF_A2 + b_Sem_0_ruta2*SEMF_A2_0 +
b_Sem_1_ruta2*SEMF_A2_1 + b_Sem_2_ruta2*SEMF_A2_2 + b_Sem_3_ruta2*SEMF_A2_3 +
b_Sem_4_ruta2*SEMF_A2_4 + b_ACC_0_ruta2*ACC_A2_0 + b_ACC_1_ruta2*ACC_A2_1 +
b_ACC_2_ruta2*ACC_A2_2
V[['ruta3']]  = asc_ruta3  + b_tt * TIEMPOAlt3 + b_dt * DISTAlt3 + b_CongAB_ruta3*CONG_AB_A3 +
b_CongCD_ruta3*CONG_CD_A3 + b_CongEF_ruta3*CONG_EF_A3 + b_Sem_0_ruta3*SEMF_A3_0 +
b_Sem_1_ruta3*SEMF_A3_1 + b_Sem_2_ruta3*SEMF_A3_2 + b_Sem_3_ruta3*SEMF_A3_3 +
b_Sem_4_ruta3*SEMF_A3_4 + b_ACC_0_ruta3*ACC_A3_0 + b_ACC_1_ruta3*ACC_A3_1 +
b_ACC_2_ruta3*ACC_A3_2
V[['rutaEC']] = asc_rutaEC + b_tt * TIEMPOEC   + b_dt * DISTEC + b_CongAB_rutaEC*CONG_AB_EC +
b_CongCD_rutaEC*CONG_CD_EC + b_CongEF_rutaEC*CONG_EF_EC + b_Sem_0_rutaEC*SEMF_EC_0 +
b_Sem_1_rutaEC*SEMF_EC_1 + b_Sem_2_rutaEC*SEMF_EC_2 + b_Sem_3_rutaEC*SEMF_EC_3 +
b_Sem_4_rutaEC*SEMF_EC_4 + b_ACC_0_rutaEC*ACC_EC_0 + b_ACC_1_rutaEC*ACC_EC_1 +
b_ACC_2_rutaEC*ACC_EC_2
### Define settings for MNL model component
mnl_settings = list(
alternatives  = c(ruta1=1, ruta2=2, ruta3=3, rutaEC=4),
avail         = list(ruta1=1, ruta2=1, ruta3=1, rutaEC=1),
choiceVar     = CHOICE,
V             = V
)
### Compute probabilities using MNL model
P[['model']] = apollo_mnl(mnl_settings, functionality)
### Take product across observation for same individual
#P = apollo_panelProd(P, apollo_inputs, functionality)
### Prepare and return outputs of function
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
model = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)
apollo_modelOutput(model, modelOutput_settings=list(printPVal=TRUE) )
### Limpiar memoria
rm(list = ls())
workingDirectory="/Users/williz/Desktop/ModelosED/1. Articulo 2/1. Scripts/Modelos MNL/MNL_Modelo_1"
setwd(workingDirectory)
###Cargar la libreria knitr
library(knitr)
### Cargar libreria Apollo
library(apollo)
### Inicializar código
apollo_initialise()
## Establecer controles principales
apollo_control = list(
modelName  = "MNL_Modelo_1",
modelDescr = "Modelo MNL Simple",
indivID    = "ViajeId",
nCores     = 1
)
database = read.csv("/Users/williz/Desktop/ModelosED/1. Articulo 2/2. Database/DBMuestra_ModeloLogitVL.csv",sep="\t", dec=".",header=TRUE)
### Vector de parametros, incluidos los que se mantienen fijos en la estimación
apollo_beta=c(asc_ruta1   = 0, asc_ruta2   = 0, asc_ruta3   = 0, asc_rutaEC  = 0,
b_tt  = 0,
b_dt  = 0,
b_CongAB_ruta1  = 0, b_CongCD_ruta1  = 0, b_CongEF_ruta1  = 1,
b_CongAB_ruta2  = 0, b_CongCD_ruta2  = 0, b_CongEF_ruta2  = 1,
b_CongAB_ruta3  = 0, b_CongCD_ruta3  = 0, b_CongEF_ruta3  = 1,
b_CongAB_rutaEC  = 0, b_CongCD_rutaEC  = 0, b_CongEF_rutaEC  = 1,
b_Sem_0_ruta1 = 0, b_Sem_0_ruta2 = 0, b_Sem_0_ruta3 = 0, b_Sem_0_rutaEC = 0,
b_Sem_1_ruta1 = 0, b_Sem_1_ruta2 = 0, b_Sem_1_ruta3 = 0, b_Sem_1_rutaEC = 0,
b_Sem_2_ruta1 = 0, b_Sem_2_ruta2 = 0, b_Sem_2_ruta3 = 0, b_Sem_2_rutaEC = 0,
b_Sem_3_ruta1 = 0, b_Sem_3_ruta2 = 0, b_Sem_3_ruta3 = 0, b_Sem_3_rutaEC = 0,
b_Sem_4_ruta1 = 1, b_Sem_4_ruta2 = 1, b_Sem_4_ruta3 = 1, b_Sem_4_rutaEC = 0)
### Vector con nombres (entre comillas) de los parámetros que se mantendrán fijos en su valor inicial en apollo_beta, use apollo_beta_fixed = c () si ninguno
apollo_fixed = c("asc_ruta1",
"b_CongEF_ruta1", "b_CongEF_ruta2", "b_CongEF_ruta3", "b_CongEF_rutaEC",
"b_Sem_4_ruta1", "b_Sem_4_ruta2", "b_Sem_4_ruta3", "b_Sem_4_rutaEC")
apollo_inputs = apollo_validateInputs()
apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){
### Attach inputs and detach after function exit
apollo_attach(apollo_beta, apollo_inputs)
on.exit(apollo_detach(apollo_beta, apollo_inputs))
### Create list of probabilities P
P = list()
### List of utilities: these must use the same names as in mnl_settings, order is irrelevant
V = list()
V[['ruta1']]  = asc_ruta1  + b_tt * TIEMPOAlt1 + b_dt * DISTAlt1 + b_CongAB_ruta1*CONG_AB_A1 +
b_CongCD_ruta1*CONG_CD_A1 + b_CongEF_ruta1*CONG_EF_A1 + b_Sem_0_ruta1*SEMF_A1_0 +
b_Sem_1_ruta1*SEMF_A1_1 + b_Sem_2_ruta1*SEMF_A1_2 + b_Sem_3_ruta1*SEMF_A1_3 +
b_Sem_4_ruta1*SEMF_A1_4
V[['ruta2']]  = asc_ruta2  + b_tt * TIEMPOAlt2 + b_dt * DISTAlt2 + b_CongAB_ruta2*CONG_AB_A2 +
b_CongCD_ruta2*CONG_CD_A2 + b_CongEF_ruta2*CONG_EF_A2 + b_Sem_0_ruta2*SEMF_A2_0 +
b_Sem_1_ruta2*SEMF_A2_1 + b_Sem_2_ruta2*SEMF_A2_2 + b_Sem_3_ruta2*SEMF_A2_3 +
b_Sem_4_ruta2*SEMF_A2_4
V[['ruta3']]  = asc_ruta3  + b_tt * TIEMPOAlt3 + b_dt * DISTAlt3 + b_CongAB_ruta3*CONG_AB_A3 +
b_CongCD_ruta3*CONG_CD_A3 + b_CongEF_ruta3*CONG_EF_A3 + b_Sem_0_ruta3*SEMF_A3_0 +
b_Sem_1_ruta3*SEMF_A3_1 + b_Sem_2_ruta3*SEMF_A3_2 + b_Sem_3_ruta3*SEMF_A3_3 +
b_Sem_4_ruta3*SEMF_A3_4
V[['rutaEC']] = asc_rutaEC + b_tt * TIEMPOEC   + b_dt * DISTEC + b_CongAB_rutaEC*CONG_AB_EC +
b_CongCD_rutaEC*CONG_CD_EC + b_CongEF_rutaEC*CONG_EF_EC + b_Sem_0_rutaEC*SEMF_EC_0 +
b_Sem_1_rutaEC*SEMF_EC_1 + b_Sem_2_rutaEC*SEMF_EC_2 + b_Sem_3_rutaEC*SEMF_EC_3 +
b_Sem_4_rutaEC*SEMF_EC_4
### Define settings for MNL model component
mnl_settings = list(
alternatives  = c(ruta1=1, ruta2=2, ruta3=3, rutaEC=4),
avail         = list(ruta1=1, ruta2=1, ruta3=1, rutaEC=1),
choiceVar     = CHOICE,
V             = V
)
### Compute probabilities using MNL model
P[['model']] = apollo_mnl(mnl_settings, functionality)
### Take product across observation for same individual
#P = apollo_panelProd(P, apollo_inputs, functionality)
### Prepare and return outputs of function
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
model = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)
apollo_modelOutput(model, modelOutput_settings=list(printPVal=TRUE) )
apollo_saveOutput(model, saveOutput_settings=list(printPVal=TRUE))
### Limpiar memoria
rm(list = ls())
workingDirectory="/Users/williz/Desktop/ModelosED/1. Articulo 2/1. Scripts/Modelos MNL/MNL_Modelo_1"
setwd(workingDirectory)
###Cargar la libreria knitr
library(knitr)
### Cargar libreria Apollo
library(apollo)
### Inicializar código
apollo_initialise()
## Establecer controles principales
apollo_control = list(
modelName  = "MNL_Modelo_1",
modelDescr = "Modelo MNL Simple",
indivID    = "ViajeId",
nCores     = 1
)
database = read.csv("/Users/williz/Desktop/ModelosED/1. Articulo 2/2. Database/DBMuestra_ModeloLogitVL.csv",sep="\t", dec=".",header=TRUE)
### Vector de parametros, incluidos los que se mantienen fijos en la estimación
apollo_beta=c(asc_ruta1   = 0, asc_ruta2   = 0, asc_ruta3   = 0, asc_rutaEC  = 0,
b_tt  = 0,
b_dt  = 0,
b_CongAB_ruta1  = 0, b_CongCD_ruta1  = 0, b_CongEF_ruta1  = 0,
b_CongAB_ruta2  = 0, b_CongCD_ruta2  = 0, b_CongEF_ruta2  = 0,
b_CongAB_ruta3  = 0, b_CongCD_ruta3  = 0, b_CongEF_ruta3  = 0,
b_CongAB_rutaEC  = 0, b_CongCD_rutaEC  = 0, b_CongEF_rutaEC  = 0,
b_Sem_0_ruta1 = 0, b_Sem_0_ruta2 = 0, b_Sem_0_ruta3 = 0, b_Sem_0_rutaEC = 0,
b_Sem_1_ruta1 = 0, b_Sem_1_ruta2 = 0, b_Sem_1_ruta3 = 0, b_Sem_1_rutaEC = 0,
b_Sem_2_ruta1 = 0, b_Sem_2_ruta2 = 0, b_Sem_2_ruta3 = 0, b_Sem_2_rutaEC = 0,
b_Sem_3_ruta1 = 0, b_Sem_3_ruta2 = 0, b_Sem_3_ruta3 = 0, b_Sem_3_rutaEC = 0,
b_Sem_4_ruta1 = 0, b_Sem_4_ruta2 = 0, b_Sem_4_ruta3 = 0, b_Sem_4_rutaEC = 0)
### Vector con nombres (entre comillas) de los parámetros que se mantendrán fijos en su valor inicial en apollo_beta, use apollo_beta_fixed = c () si ninguno
apollo_fixed = c("asc_ruta3",
"b_CongEF_ruta1", "b_CongEF_ruta2", "b_CongEF_ruta3", "b_CongEF_rutaEC",
"b_Sem_4_ruta1", "b_Sem_4_ruta2", "b_Sem_4_ruta3", "b_Sem_4_rutaEC")
apollo_inputs = apollo_validateInputs()
apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){
### Attach inputs and detach after function exit
apollo_attach(apollo_beta, apollo_inputs)
on.exit(apollo_detach(apollo_beta, apollo_inputs))
### Create list of probabilities P
P = list()
### List of utilities: these must use the same names as in mnl_settings, order is irrelevant
V = list()
V[['ruta1']]  = asc_ruta1  + b_tt * TIEMPOAlt1 + b_dt * DISTAlt1 + b_CongAB_ruta1*CONG_AB_A1 +
b_CongCD_ruta1*CONG_CD_A1 + b_CongEF_ruta1*CONG_EF_A1 + b_Sem_0_ruta1*SEMF_A1_0 +
b_Sem_1_ruta1*SEMF_A1_1 + b_Sem_2_ruta1*SEMF_A1_2 + b_Sem_3_ruta1*SEMF_A1_3 +
b_Sem_4_ruta1*SEMF_A1_4
V[['ruta2']]  = asc_ruta2  + b_tt * TIEMPOAlt2 + b_dt * DISTAlt2 + b_CongAB_ruta2*CONG_AB_A2 +
b_CongCD_ruta2*CONG_CD_A2 + b_CongEF_ruta2*CONG_EF_A2 + b_Sem_0_ruta2*SEMF_A2_0 +
b_Sem_1_ruta2*SEMF_A2_1 + b_Sem_2_ruta2*SEMF_A2_2 + b_Sem_3_ruta2*SEMF_A2_3 +
b_Sem_4_ruta2*SEMF_A2_4
V[['ruta3']]  = asc_ruta3  + b_tt * TIEMPOAlt3 + b_dt * DISTAlt3 + b_CongAB_ruta3*CONG_AB_A3 +
b_CongCD_ruta3*CONG_CD_A3 + b_CongEF_ruta3*CONG_EF_A3 + b_Sem_0_ruta3*SEMF_A3_0 +
b_Sem_1_ruta3*SEMF_A3_1 + b_Sem_2_ruta3*SEMF_A3_2 + b_Sem_3_ruta3*SEMF_A3_3 +
b_Sem_4_ruta3*SEMF_A3_4
V[['rutaEC']] = asc_rutaEC + b_tt * TIEMPOEC   + b_dt * DISTEC + b_CongAB_rutaEC*CONG_AB_EC +
b_CongCD_rutaEC*CONG_CD_EC + b_CongEF_rutaEC*CONG_EF_EC + b_Sem_0_rutaEC*SEMF_EC_0 +
b_Sem_1_rutaEC*SEMF_EC_1 + b_Sem_2_rutaEC*SEMF_EC_2 + b_Sem_3_rutaEC*SEMF_EC_3 +
b_Sem_4_rutaEC*SEMF_EC_4
### Define settings for MNL model component
mnl_settings = list(
alternatives  = c(ruta1=1, ruta2=2, ruta3=3, rutaEC=4),
avail         = list(ruta1=1, ruta2=1, ruta3=1, rutaEC=1),
choiceVar     = CHOICE,
V             = V
)
### Compute probabilities using MNL model
P[['model']] = apollo_mnl(mnl_settings, functionality)
### Take product across observation for same individual
#P = apollo_panelProd(P, apollo_inputs, functionality)
### Prepare and return outputs of function
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
model = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)
apollo_modelOutput(model, modelOutput_settings=list(printPVal=TRUE) )
apollo_saveOutput(model, saveOutput_settings=list(printPVal=TRUE))
DBModelo = read.csv("/Users/williz/Desktop/ModelosED/1. Articulo 2/2. Database/ModeloLogitVL.csv", sep="\t", dec=".")
MCond <- DBModelo
dplyr::glimpse(MCond)
MCond$JOVEN30 <- (ifelse((MCond$EDAD == 1), 1,0))
MCond$ADULTO40 <- (ifelse((MCond$EDAD == 2),1,0))
MCond$ADULTO60 <- (ifelse((MCond$EDAD == 3),1,0))
MCond$ADULTOMAYOR <- (ifelse((MCond$EDAD == 4),1,0))
# NIVEL EDUCATIVO EDUBASICA - EDUSUP
MCond$EDUBASICA <- (ifelse((MCond$NIVEL_EDUCATIVO == 1), 1,0))
MCond$EDUSUP <- (ifelse((MCond$NIVEL_EDUCATIVO == 2 | MCond$NIVEL_EDUCATIVO == 3),1,0))
# HORA DEL RECORRIDO HPICO - HVALLE
MCond$HPICO <- (ifelse((MCond$HPICOHVALLE == 1), 1,0))
MCond$HVALLE <- (ifelse((MCond$HPICOHVALLE == 2), 1,0))
# CONDICIONES CLIMATICAS CSECO - CLLUVIA
MCond$CSECO <- (ifelse((MCond$CLIMA == 1),1,0))
MCond$CLLUVIA <- (ifelse((MCond$CLIMA == 2),1,0))
# NIVEL DE CONGESTION
MCond$CONG_A1 <- as.numeric(MCond$CONG_A1)
MCond$CONG_AB_A1 <- (ifelse((MCond$CONG_A1 == 1), 1,0))
MCond$CONG_CD_A1 <- (ifelse((MCond$CONG_A1 == 2 | MCond$CONG_A1 == 0), 1,0))
MCond$CONG_EF_A1 <- (ifelse((MCond$CONG_A1 >= 3), 1,0))
MCond$CONG_A2 <- as.numeric(MCond$CONG_A2)
MCond$CONG_AB_A2 <- (ifelse((MCond$CONG_A2 == 1), 1,0))
MCond$CONG_CD_A2 <- (ifelse((MCond$CONG_A2 == 2 | MCond$CONG_A2 == 0), 1,0))
MCond$CONG_EF_A2 <- (ifelse((MCond$CONG_A2 >= 3), 1,0))
MCond$CONG_A3 <- as.numeric(MCond$CONG_A3)
MCond$CONG_AB_A3 <- (ifelse((MCond$CONG_A3 == 1), 1,0))
MCond$CONG_CD_A3 <- (ifelse((MCond$CONG_A3 == 2 | MCond$CONG_A3 == 0), 1,0))
MCond$CONG_EF_A3 <- (ifelse((MCond$CONG_A3 >= 3), 1,0))
MCond$CONG_AB_EC <- (ifelse((MCond$CONGESTION == 1 | MCond$CONGESTION == 2), 1,0))
MCond$CONG_CD_EC <- (ifelse((MCond$CONGESTION == 3 | MCond$CONGESTION == 4), 1,0))
MCond$CONG_EF_EC <- (ifelse((MCond$CONGESTION == 5 | MCond$CONGESTION == 6), 1,0))
# INFORMACION TRAFICO DE LA CIUDAD
MCond$SININFOTRF <- (ifelse((MCond$INFOTRAFICO == 1),1,0))
MCond$CONINFOTRF <- (ifelse((MCond$INFOTRAFICO == 2),1,0))
# Uso de cinturon de seguridad
MCond$USOCINTURON <-(ifelse((MCond$CinSeg == 2),1,0))
MCond$NOUSOCINTURON <-(ifelse((MCond$CinSeg == 1),1,0))
#Uso dispositivos
MCond$USODISPMOB <- (ifelse((MCond$DispMob != 1 ),1,0))
MCond$NOUSODISPMOB <- (ifelse((MCond$DispMob ==1),1,0))
MCond$NO_MTRP_A1 <- (ifelse((MCond$MtrP_A1 == 0),1,0))
MCond$NO_MTRP_A2 <- (ifelse((MCond$MtrP_A2 == 0),1,0))
MCond$NO_MTRP_A3 <- (ifelse((MCond$MtrP_A3 == 0),1,0))
MCond$NO_MTRP_EC <- (ifelse((MCond$MtrP_EC == 0),1,0))
MCond$SI_MTRP_A1 <- (ifelse((MCond$MtrP_A1 >= 1 | MCond$MtrP_A1 == 999),1,0))
MCond$SI_MTRP_A2 <- (ifelse((MCond$MtrP_A2 >= 1 | MCond$MtrP_A2 == 999),1,0))
MCond$SI_MTRP_A3 <- (ifelse((MCond$MtrP_A3 >= 1 | MCond$MtrP_A3 == 999),1,0))
MCond$SI_MTRP_EC <- (ifelse((MCond$MtrP_EC >= 1 | MCond$MtrP_EC == 999),1,0))
MCond$NO_ZER_A1 <- (ifelse((MCond$ZER_A1 == 0),1,0))
MCond$NO_ZER_A2 <- (ifelse((MCond$ZER_A2 == 0),1,0))
MCond$NO_ZER_A3 <- (ifelse((MCond$ZER_A3 == 0),1,0))
MCond$NO_ZER_EC <- (ifelse((MCond$ZER_EC == 0),1,0))
MCond$SI_ZER_A1 <- (ifelse((MCond$ZER_A1 >= 1 | MCond$ZER_A1 == 999),1,0))
MCond$SI_ZER_A2 <- (ifelse((MCond$ZER_A2 >= 1 | MCond$ZER_A2 == 999),1,0))
MCond$SI_ZER_A3 <- (ifelse((MCond$ZER_A3 >= 1 | MCond$ZER_A3 == 999),1,0))
MCond$SI_ZER_EC <- (ifelse((MCond$ZER_EC >= 1 | MCond$ZER_EC == 999),1,0))
MCond$HTRB_1 <- (ifelse((MCond$HORAS_TRABAJO <= 5),1,0))
MCond$HTRB_2 <- (ifelse((MCond$HORAS_TRABAJO > 5 & MCond$HORAS_TRABAJO <= 8),1,0))
MCond$HTRB_3 <- (ifelse((MCond$HORAS_TRABAJO > 8 & MCond$HORAS_TRABAJO <= 12),1,0))
MCond$HTRB_4 <- (ifelse((MCond$HORAS_TRABAJO > 12),1,0))
MCond$SEMF_A1_1 <- (ifelse((MCond$Semaf_A1 <= 7),1,0))
MCond$SEMF_A1_2 <- (ifelse((MCond$Semaf_A1 >= 8 & MCond$Semaf_A1 <= 15),1,0))
MCond$SEMF_A1_3 <- (ifelse((MCond$Semaf_A1 > 16),1,0))
MCond$SEMF_A2_1 <- (ifelse((MCond$Semaf_A2 <= 7),1,0))
MCond$SEMF_A2_2 <- (ifelse((MCond$Semaf_A2 >= 8 & MCond$Semaf_A2 <= 15),1,0))
MCond$SEMF_A2_3 <- (ifelse((MCond$Semaf_A2 > 16),1,0))
MCond$SEMF_A3_1 <- (ifelse((MCond$Semaf_A3 <= 7),1,0))
MCond$SEMF_A3_2 <- (ifelse((MCond$Semaf_A3 >= 8 & MCond$Semaf_A3 <= 15),1,0))
MCond$SEMF_A3_3 <- (ifelse((MCond$Semaf_A3 > 16),1,0))
MCond$SEMF_EC_1 <- (ifelse((MCond$Semaf_EC <= 7),1,0))
MCond$SEMF_EC_2 <- (ifelse((MCond$Semaf_EC >= 8 & MCond$Semaf_EC <= 15),1,0))
MCond$SEMF_EC_3 <- (ifelse((MCond$Semaf_EC > 16),1,0))
MCond$NO_CAMFD_A1 <- (ifelse((MCond$CamFD_A1 == 0),1,0))
MCond$SI_CAMFD_A1 <- (ifelse((MCond$CamFD_A1 >= 1),1,0))
MCond$NO_CAMFD_A2 <- (ifelse((MCond$CamFD_A2 == 0),1,0))
MCond$SI_CAMFD_A2 <- (ifelse((MCond$CamFD_A2 >= 1),1,0))
MCond$NO_CAMFD_A3 <- (ifelse((MCond$CamFD_A3 == 0),1,0))
MCond$SI_CAMFD_A3 <- (ifelse((MCond$CamFD_A3 >= 1),1,0))
MCond$NO_CAMFD_EC <- (ifelse((MCond$CamFD_EC == 0),1,0))
MCond$SI_CAMFD_EC <- (ifelse((MCond$CamFD_EC >= 1),1,0))
MCond$ACC_A1_0 <- (ifelse((MCond$Acc_A1 == 0),1,0))
MCond$ACC_A1_1 <- (ifelse((MCond$Acc_A1 == 1),1,0))
MCond$ACC_A1_2 <- (ifelse((MCond$Acc_A1 >= 2),1,0))
MCond$ACC_A2_0 <- (ifelse((MCond$Acc_A2 == 0),1,0))
MCond$ACC_A2_1 <- (ifelse((MCond$Acc_A2 == 1),1,0))
MCond$ACC_A2_2 <- (ifelse((MCond$Acc_A2 >= 2),1,0))
MCond$ACC_A3_0 <- (ifelse((MCond$Acc_A3 == 0),1,0))
MCond$ACC_A3_1 <- (ifelse((MCond$Acc_A3 == 1),1,0))
MCond$ACC_A3_2 <- (ifelse((MCond$Acc_A3 >= 2),1,0))
MCond$ACC_EC_0 <- (ifelse((MCond$Acc_EC == 0),1,0))
MCond$ACC_EC_1 <- (ifelse((MCond$Acc_EC == 1),1,0))
MCond$ACC_EC_2 <- (ifelse((MCond$Acc_EC >= 2),1,0))
MCond$NO_PANEL_A1 <- (ifelse((MCond$Paneles_A1 == 0 | MCond$Paneles_A1 == 999),1,0))
MCond$SI_PANEL_A1 <- (ifelse((MCond$Paneles_A1 >= 1),1,0))
MCond$NO_PANEL_A2 <- (ifelse((MCond$Paneles_A2 == 0 | MCond$Paneles_A2 == 999),1,0))
MCond$SI_PANEL_A2 <- (ifelse((MCond$Paneles_A2 >= 1),1,0))
MCond$NO_PANEL_A3 <- (ifelse((MCond$Paneles_A3 == 0 | MCond$Paneles_A3 == 999),1,0))
MCond$SI_PANEL_A3 <- (ifelse((MCond$Paneles_A3 >= 1),1,0))
MCond$NO_PANEL_EC <- (ifelse((MCond$Paneles_EC == 0 | MCond$Paneles_EC == 999),1,0))
MCond$SI_PANEL_EC <- (ifelse((MCond$Paneles_EC >= 1),1,0))
MCond$EXP_1 <- ifelse((MCond$Experiencia == 1),1,0)
MCond$EXP_2 <- ifelse((MCond$Experiencia == 2),1,0)
MCond$EXP_3 <- ifelse((MCond$Experiencia == 3),1,0)
MCond$EXP_4 <- ifelse((MCond$Experiencia == 4),1,0)
MCond$EXP_5 <- ifelse((MCond$Experiencia == 5),1,0)
# ?Quiero orden!
tibble::as_tibble(MCond)
names(MCond)
dplyr::glimpse(MCond)
# DB Completa
write.table(MCond,
file="/Users/williz/Desktop/ModelosED/1. Articulo 2/2. Database/DBCompleta_ModeloLogitVL.csv", sep="\t", dec=".")
MUESTRA <- MCond %>%
# Filtrar viajes Eliminados en la primera revisión
filter(!(MUESTRA %in% c("0")))
write.table(MUESTRA,
file="/Users/williz/Desktop/ModelosED/1. Articulo 2/2. Database/DBMuestra_ModeloLogitVL.csv", sep="\t", dec=".")
library(readr)
apollo_drugChoiceData <- read_csv("~/Desktop/Apollo/Datos/apollo_drugChoiceData.csv")
View(apollo_drugChoiceData)
### Limpiar memoria
rm(list = ls())
workingDirectory="/Users/williz/Desktop/ModelosED/1. Articulo 2/1. Scripts/Modelos MNL/MNL_Modelo_0"
setwd(workingDirectory)
### Cargar libreria Apollo
library(apollo)
### Inicializar código
apollo_initialise()
## Establecer controles principales
apollo_control = list(
modelName  = "MNL_Modelo_0",
modelDescr = "Modelo MNL Simple",
indivID    = "ViajeId",
nCores     = 1
)
database = read.csv("/Users/williz/Desktop/ModelosED/1. Articulo 2/2. Database/DBMuestra_ModeloLogitVL.csv",sep="\t", dec=".",header=TRUE)
### Vector de parametros, incluidos los que se mantienen fijos en la estimación
apollo_beta=c(asc_ruta1   = 0, asc_ruta2   = 0, asc_ruta3   = 0, asc_rutaEC  = 0,
b_tt  = 0,
b_dt  = 0,
b_CongAB  = 0, b_CongCD  = 0, b_CongEF  = 0)
### Vector con nombres (entre comillas) de los parámetros que se mantendrán fijos en su valor inicial en apollo_beta, use apollo_beta_fixed = c () si ninguno
apollo_fixed = c("asc_ruta3")
apollo_inputs = apollo_validateInputs()
apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){
### Attach inputs and detach after function exit
apollo_attach(apollo_beta, apollo_inputs)
on.exit(apollo_detach(apollo_beta, apollo_inputs))
### Create list of probabilities P
P = list()
### List of utilities: these must use the same names as in mnl_settings, order is irrelevant
V = list()
V[['ruta1']]  = asc_ruta1  + b_tt * TIEMPOAlt1 + b_dt * DISTAlt1 + b_CongAB*CONG_AB_A1 +
b_CongCD*CONG_CD_A1 + b_CongEF*CONG_EF_A1
V[['ruta2']]  = asc_ruta2  + b_tt * TIEMPOAlt2 + b_dt * DISTAlt2 + b_CongAB*CONG_AB_A2 +
b_CongCD*CONG_CD_A2 + b_CongEF*CONG_EF_A2
V[['ruta3']]  = asc_ruta3  + b_tt * TIEMPOAlt3 + b_dt * DISTAlt3 + b_CongAB*CONG_AB_A3 +
b_CongCD*CONG_CD_A3 + b_CongEF*CONG_EF_A3
V[['rutaEC']] = asc_rutaEC + b_tt * TIEMPOEC   + b_dt * DISTEC + b_CongAB*CONG_AB_EC +
b_CongCD*CONG_CD_EC + b_CongEF*CONG_EF_EC
### Define settings for MNL model component
mnl_settings = list(
alternatives  = c(ruta1=1, ruta2=2, ruta3=3, rutaEC=4),
avail         = list(ruta1=1, ruta2=1, ruta3=1, rutaEC=1),
choiceVar     = CHOICE,
V             = V
)
### Compute probabilities using MNL model
P[['model']] = apollo_mnl(mnl_settings, functionality)
### Take product across observation for same individual
#P = apollo_panelProd(P, apollo_inputs, functionality)
### Prepare and return outputs of function
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
model = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)
apollo_modelOutput(model, modelOutput_settings=list(printPVal=TRUE) )
### Limpiar memoria
rm(list = ls())
workingDirectory="/Users/williz/Desktop/ModelosED/1. Articulo 2/1. Scripts/Modelos MNL/MNL_Modelo_0"
setwd(workingDirectory)
### Cargar libreria Apollo
library(apollo)
### Inicializar código
apollo_initialise()
## Establecer controles principales
apollo_control = list(
modelName  = "MNL_Modelo_0",
modelDescr = "Modelo MNL Simple",
indivID    = "ViajeId",
nCores     = 1
)
database = read.csv("/Users/williz/Desktop/ModelosED/1. Articulo 2/2. Database/DBMuestra_ModeloLogitVL.csv",sep="\t", dec=".",header=TRUE)
### Vector de parametros, incluidos los que se mantienen fijos en la estimación
apollo_beta=c(asc_ruta1   = 0, asc_ruta2   = 0, asc_ruta3   = 0, asc_rutaEC  = 0,
b_tt  = 0,
b_dt  = 0,
b_CongAB= 0, b_CongCD = 0, b_CongEF = 0)
### Vector con nombres (entre comillas) de los parámetros que se mantendrán fijos en su valor inicial en apollo_beta, use apollo_beta_fixed = c () si ninguno
apollo_fixed = c("asc_ruta3",
"b_CongEF")
apollo_inputs = apollo_validateInputs()
apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){
### Attach inputs and detach after function exit
apollo_attach(apollo_beta, apollo_inputs)
on.exit(apollo_detach(apollo_beta, apollo_inputs))
### Create list of probabilities P
P = list()
### List of utilities: these must use the same names as in mnl_settings, order is irrelevant
V = list()
V[['ruta1']]  = asc_ruta1  + b_tt * TIEMPOAlt1 + b_dt * DISTAlt1 + b_CongAB*CONG_AB_A1 +
b_CongCD*CONG_CD_A1 + b_CongEF*CONG_EF_A1
V[['ruta2']]  = asc_ruta2  + b_tt * TIEMPOAlt2 + b_dt * DISTAlt2 + b_CongAB*CONG_AB_A2 +
b_CongCD*CONG_CD_A2 + b_CongEF*CONG_EF_A2
V[['ruta3']]  = asc_ruta3  + b_tt * TIEMPOAlt3 + b_dt * DISTAlt3 + b_CongAB*CONG_AB_A3 +
b_CongCD*CONG_CD_A3 + b_CongEF*CONG_EF_A3
V[['rutaEC']] = asc_rutaEC + b_tt * TIEMPOEC   + b_dt * DISTEC + b_CongAB*CONG_AB_EC +
b_CongCD*CONG_CD_EC + b_CongEF*CONG_EF_EC
### Define settings for MNL model component
mnl_settings = list(
alternatives  = c(ruta1=1, ruta2=2, ruta3=3, rutaEC=4),
avail         = list(ruta1=1, ruta2=1, ruta3=1, rutaEC=1),
choiceVar     = CHOICE,
V             = V
)
### Compute probabilities using MNL model
P[['model']] = apollo_mnl(mnl_settings, functionality)
### Take product across observation for same individual
#P = apollo_panelProd(P, apollo_inputs, functionality)
### Prepare and return outputs of function
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
model = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)
apollo_modelOutput(model, modelOutput_settings=list(printPVal=TRUE) )
