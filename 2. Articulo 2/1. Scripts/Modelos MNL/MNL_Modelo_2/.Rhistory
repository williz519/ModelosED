labels = c('0','1','2','3','4'))
DBCompleta$Semaf_A1 <- as.numeric(DBCompleta$Semaf_A1)
DBCompleta$Semaf_A1[is.na(DBCompleta$Semaf_A1)]<- 999
DBCompleta$Semaf_A2 <- as.numeric(DBCompleta$Semaf_A2)
DBCompleta$Semaf_A2[is.na(DBCompleta$Semaf_A2)]<- 999
DBCompleta$Semaf_A3 <- as.numeric(DBCompleta$Semaf_A3)
DBCompleta$Semaf_A3[is.na(DBCompleta$Semaf_A3)]<- 999
DBCompleta$Semf_EC <- as.numeric(DBCompleta$Semf_EC)
DBCompleta$Semf_EC[is.na(DBCompleta$Semf_EC)]<- 999
DBCompleta$MtrP_A1 <- as.numeric(DBCompleta$MtrP_A1)
DBCompleta$MtrP_A1[is.na(DBCompleta$MtrP_A1)]<- 999
DBCompleta$MtrP_A2 <- as.numeric(DBCompleta$MtrP_A2)
DBCompleta$MtrP_A2[is.na(DBCompleta$MtrP_A2)]<- 999
DBCompleta$MtrP_A3 <- as.numeric(DBCompleta$MtrP_A3)
DBCompleta$MtrP_A3[is.na(DBCompleta$MtrP_A3)]<- 999
DBCompleta$MtrP_EC <- as.numeric(DBCompleta$MtrP_EC)
DBCompleta$MtrP_EC[is.na(DBCompleta$MtrP_EC)]<- 999
DBCompleta$ZER_A1 <- as.numeric(DBCompleta$ZER_A1)
DBCompleta$ZER_A1[is.na(DBCompleta$ZER_A1)]<- 999
DBCompleta$ZER_A2 <- as.numeric(DBCompleta$ZER_A2)
DBCompleta$ZER_A2[is.na(DBCompleta$ZER_A2)]<- 999
DBCompleta$ZER_A3 <- as.numeric(DBCompleta$ZER_A3)
DBCompleta$ZER_A3[is.na(DBCompleta$ZER_A3)]<- 999
DBCompleta$ZER_EC <- as.numeric(DBCompleta$ZER_EC)
DBCompleta$ZER_EC[is.na(DBCompleta$ZER_EC)]<- 999
DBCompleta$Acc_A1 <- as.numeric(DBCompleta$Acc_A1)
DBCompleta$Acc_A1[is.na(DBCompleta$Acc_A1)]<- 999
DBCompleta$Acc_A2 <- as.numeric(DBCompleta$Acc_A2)
DBCompleta$Acc_A2[is.na(DBCompleta$Acc_A2)]<- 999
DBCompleta$Acc_A3 <- as.numeric(DBCompleta$Acc_A3)
DBCompleta$Acc_A3[is.na(DBCompleta$Acc_A3)]<- 999
DBCompleta$Acc_EC <- as.numeric(DBCompleta$Acc_EC)
DBCompleta$Acc_EC[is.na(DBCompleta$Acc_EC)]<- 999
DBCompleta$CamFD_A1 <- as.numeric(DBCompleta$CamFD_A1)
DBCompleta$CamFD_A1[is.na(DBCompleta$CamFD_A1)]<- 999
DBCompleta$CamFD_A2 <- as.numeric(DBCompleta$CamFD_A2)
DBCompleta$CamFD_A2[is.na(DBCompleta$CamFD_A2)]<- 999
DBCompleta$CamFD_A3 <- as.numeric(DBCompleta$CamFD_A3)
DBCompleta$CamFD_A3[is.na(DBCompleta$CamFD_A3)]<- 999
DBCompleta$CamFD_EC <- as.numeric(DBCompleta$CamFD_EC)
DBCompleta$CamFD_EC[is.na(DBCompleta$CamFD_EC)]<- 999
DBCompleta$Paneles_A1 <- as.numeric(DBCompleta$Paneles_A1)
DBCompleta$Paneles_A1[is.na(DBCompleta$Paneles_A1)]<- 999
DBCompleta$Paneles_A2 <- as.numeric(DBCompleta$Paneles_A2)
DBCompleta$Paneles_A2[is.na(DBCompleta$Paneles_A2)]<- 999
DBCompleta$Paneles_A3 <- as.numeric(DBCompleta$Paneles_A3)
DBCompleta$Paneles_A3[is.na(DBCompleta$Paneles_A3)]<- 999
DBCompleta$Paneles_EC <- as.numeric(DBCompleta$Paneles_EC)
DBCompleta$Paneles_EC[is.na(DBCompleta$Paneles_EC)]<- 999
summary(DBCompleta)
Datos <- RutasGoogle %>%
select(ViajeId,"DISTAlt1", "TIEMPOAlt1","CONG_A1",
"DISTAlt2", "TIEMPOAlt2", "CONG_A2",
"DISTAlt3", "TIEMPOAlt3","CONG_A3",
"DISTEC", "TIEMPOEC",
"COSTO", "CHOICE") %>%
# Rutas Google
inner_join(Rutas200 %>%
select(ViajeId,Clima,Congestion,Pavimento,Incidente,
Meridiano,Horario),
by = "ViajeId") %>%
# Base de Datos Completa
inner_join(DBCompleta %>%
select(ViajeId:Paneles_A3),
by = "ViajeId") %>%
# Modo conducción
inner_join(DBModoConduccion %>%
select(ViajeId:DispMob),
by = "ViajeId") %>%
# Personalidad conductor
inner_join(DBPersonalidad %>%
select(ViajeId:Experiencia),
by = "ViajeId")
names(Datos)
#Eliminamos
Datos <- Datos[ ,!colnames(Datos)=="geometry"]
names(Datos)
Datos <- rename(Datos, replace = c(Clima="CLIMA",
Congestion ="CONGESTION",
Pavimento="PAVIMENTO",
Incidente="INCIDENTE",
Meridiano = "MERIDIANO",
Horario ="HPICOHVALLE",
TiempoProf = "TIEMPO_PROFESION",
Edad = "EDAD",
NivEdu = "NIVEL_EDUCATIVO",
HorTrDia = "HORAS_TRABAJO",
Genero = "GENERO",
Acc_viajes = "Acc_EC",
Paneles_viajes = "Paneles_EC",
Semf_EC = "Semaf_EC"))
names(Datos)
head(Datos)
#Convertir Factores en Variables Numericas
str(Datos$HPICOHVALLE)
Datos$CLIMA <- factor(Datos$CLIMA,
levels = c("Despejado", "Lluvioso"),
labels = c('1','2'))
Datos$CONGESTION <- factor(Datos$CONGESTION,
levels = c("Nivel A: flujo libre",
"Nivel B: flujo libre con restricciones",
"Nivel C: flujo medio",
"Nivel D: flujo estable",
"Nivel E: flujo bajo",
"Nivel F: flujo congestionado"),
labels = c('1','2','3','4','5','6'))
Datos$PAVIMENTO <- factor(Datos$PAVIMENTO,
levels = c("Óptimas condiciones",
"Regular estado",
"Mal estado"),
labels = c('1','2','3'))
Datos$INCIDENTE <- factor(Datos$INCIDENTE,
levels = c("No", "Si"),
labels = c('1','2'))
Datos$MERIDIANO <- factor(Datos$MERIDIANO,
levels = c("AM","PM"),
labels = c('1','2'))
Datos$HPICOHVALLE <- factor(Datos$HPICOHVALLE,
levels = c("Valle","Pico"),
labels = c('1','2'))
names(Datos)
DBModelo <- Datos %>%
select("ViajeId","MUESTRA","VALIDAR", "GENERO", "TIEMPO_PROFESION", "HORAS_TRABAJO","NIVEL_EDUCATIVO",
"EDAD","DISTAlt1", "TIEMPOAlt1","CONG_A1",
"DISTAlt2","TIEMPOAlt2","CONG_A2" ,
"DISTAlt3", "TIEMPOAlt3", "CONG_A3",
"DISTEC","TIEMPOEC", "Semaf_A1","Semaf_A2","Semaf_A3","Semaf_EC","CamFD_A1",
"CamFD_A2","CamFD_A3","CamFD_EC", "ZER_A1","ZER_A2","ZER_A3","ZER_EC","MtrP_A1",
"MtrP_A2", "MtrP_A3", "MtrP_EC", "Acc_EC", "Acc_A1", "Acc_A2", "Acc_A3",
"Paneles_EC", "Paneles_A1", "Paneles_A2", "Paneles_A3",
"INFOTRAFICO","CLIMA","CONGESTION","PAVIMENTO",
"INCIDENTE", "MERIDIANO", "HPICOHVALLE","COSTO", "CHOICE",
"Experiencia", "PasoPeaton", "UsoPito",
"CinSeg","FRbr", "UsoDirec",
"EnfCond", "AFrSem", "CulFr",
"OmLmVel" , "IgPare", "UsoCel",
"ComVrb", "Ans", "ComAfec", "PrPer", "AmbTr","StrC","ConCl","DispMob")
names(DBModelo)
write.table(DBModelo,
file="/Users/williz/Desktop/ModelosED/2. Articulo 2/2. Database/ModeloLogitVL.csv", sep="\t", dec=".")
DBModelo = read.csv("/Users/williz/Desktop/ModelosED/2. Articulo 2/2. Database/ModeloLogitVL.csv", sep="\t", dec=".")
MCond <- DBModelo
dplyr::glimpse(MCond)
MCond$JOVEN30 <- (ifelse((MCond$EDAD == 1), 1,0))
MCond$ADULTO40 <- (ifelse((MCond$EDAD == 2),1,0))
MCond$ADULTO60 <- (ifelse((MCond$EDAD == 3),1,0))
MCond$ADULTOMAYOR <- (ifelse((MCond$EDAD == 4),1,0))
# NIVEL EDUCATIVO EDUBASICA - EDUSUP
MCond$EDUBASICA <- (ifelse((MCond$NIVEL_EDUCATIVO == 1), 1,0))
MCond$EDUSUP <- (ifelse((MCond$NIVEL_EDUCATIVO == 2 | MCond$NIVEL_EDUCATIVO == 3),1,0))
# HORA DEL RECORRIDO HPICO - HVALLE
MCond$HPICO <- (ifelse((MCond$HPICOHVALLE == 1), 1,0))
MCond$HVALLE <- (ifelse((MCond$HPICOHVALLE == 2), 1,0))
# CONDICIONES CLIMATICAS CSECO - CLLUVIA
MCond$CSECO <- (ifelse((MCond$CLIMA == 1),1,0))
MCond$CLLUVIA <- (ifelse((MCond$CLIMA == 2),1,0))
# NIVEL DE CONGESTION
MCond$CONG_A1 <- as.numeric(MCond$CONG_A1)
MCond$CONG_AB_A1 <- (ifelse((MCond$CONG_A1 == 1), 1,0))
MCond$CONG_CD_A1 <- (ifelse((MCond$CONG_A1 == 2 | MCond$CONG_A1 == 0), 1,0))
MCond$CONG_EF_A1 <- (ifelse((MCond$CONG_A1 >= 3), 1,0))
MCond$CONG_A2 <- as.numeric(MCond$CONG_A2)
MCond$CONG_AB_A2 <- (ifelse((MCond$CONG_A2 == 1), 1,0))
MCond$CONG_CD_A2 <- (ifelse((MCond$CONG_A2 == 2 | MCond$CONG_A2 == 0), 1,0))
MCond$CONG_EF_A2 <- (ifelse((MCond$CONG_A2 >= 3), 1,0))
MCond$CONG_A3 <- as.numeric(MCond$CONG_A3)
MCond$CONG_AB_A3 <- (ifelse((MCond$CONG_A3 == 1), 1,0))
MCond$CONG_CD_A3 <- (ifelse((MCond$CONG_A3 == 2 | MCond$CONG_A3 == 0), 1,0))
MCond$CONG_EF_A3 <- (ifelse((MCond$CONG_A3 >= 3), 1,0))
MCond$CONG_AB_EC <- (ifelse((MCond$CONGESTION == 1 | MCond$CONGESTION == 2), 1,0))
MCond$CONG_CD_EC <- (ifelse((MCond$CONGESTION == 3 | MCond$CONGESTION == 4), 1,0))
MCond$CONG_EF_EC <- (ifelse((MCond$CONGESTION == 5 | MCond$CONGESTION == 6), 1,0))
# INFORMACION TRAFICO DE LA CIUDAD
MCond$SININFOTRF <- (ifelse((MCond$INFOTRAFICO == 1),1,0))
MCond$CONINFOTRF <- (ifelse((MCond$INFOTRAFICO == 2),1,0))
# Uso de cinturon de seguridad
MCond$USOCINTURON <-(ifelse((MCond$CinSeg == 2),1,0))
MCond$NOUSOCINTURON <-(ifelse((MCond$CinSeg == 1),1,0))
#Uso dispositivos
MCond$USODISPMOB <- (ifelse((MCond$DispMob != 1 ),1,0))
MCond$NOUSODISPMOB <- (ifelse((MCond$DispMob ==1),1,0))
MCond$NO_MTRP_A1 <- (ifelse((MCond$MtrP_A1 == 0),1,0))
MCond$NO_MTRP_A2 <- (ifelse((MCond$MtrP_A2 == 0),1,0))
MCond$NO_MTRP_A3 <- (ifelse((MCond$MtrP_A3 == 0),1,0))
MCond$NO_MTRP_EC <- (ifelse((MCond$MtrP_EC == 0),1,0))
MCond$SI_MTRP_A1 <- (ifelse((MCond$MtrP_A1 >= 1 | MCond$MtrP_A1 == 999),1,0))
MCond$SI_MTRP_A2 <- (ifelse((MCond$MtrP_A2 >= 1 | MCond$MtrP_A2 == 999),1,0))
MCond$SI_MTRP_A3 <- (ifelse((MCond$MtrP_A3 >= 1 | MCond$MtrP_A3 == 999),1,0))
MCond$SI_MTRP_EC <- (ifelse((MCond$MtrP_EC >= 1 | MCond$MtrP_EC == 999),1,0))
MCond$NO_ZER_A1 <- (ifelse((MCond$ZER_A1 == 0),1,0))
MCond$NO_ZER_A2 <- (ifelse((MCond$ZER_A2 == 0),1,0))
MCond$NO_ZER_A3 <- (ifelse((MCond$ZER_A3 == 0),1,0))
MCond$NO_ZER_EC <- (ifelse((MCond$ZER_EC == 0),1,0))
MCond$SI_ZER_A1 <- (ifelse((MCond$ZER_A1 >= 1 | MCond$ZER_A1 == 999),1,0))
MCond$SI_ZER_A2 <- (ifelse((MCond$ZER_A2 >= 1 | MCond$ZER_A2 == 999),1,0))
MCond$SI_ZER_A3 <- (ifelse((MCond$ZER_A3 >= 1 | MCond$ZER_A3 == 999),1,0))
MCond$SI_ZER_EC <- (ifelse((MCond$ZER_EC >= 1 | MCond$ZER_EC == 999),1,0))
MCond$HTRB_1 <- (ifelse((MCond$HORAS_TRABAJO <= 5),1,0))
MCond$HTRB_2 <- (ifelse((MCond$HORAS_TRABAJO > 5 & MCond$HORAS_TRABAJO <= 8),1,0))
MCond$HTRB_3 <- (ifelse((MCond$HORAS_TRABAJO > 8 & MCond$HORAS_TRABAJO <= 12),1,0))
MCond$HTRB_4 <- (ifelse((MCond$HORAS_TRABAJO > 12),1,0))
MCond$SEMF_A1_1 <- (ifelse((MCond$Semaf_A1 <= 7),1,0))
MCond$SEMF_A1_2 <- (ifelse((MCond$Semaf_A1 >= 8 & MCond$Semaf_A1 <= 15),1,0))
MCond$SEMF_A1_3 <- (ifelse((MCond$Semaf_A1 > 16),1,0))
MCond$SEMF_A2_1 <- (ifelse((MCond$Semaf_A2 <= 7),1,0))
MCond$SEMF_A2_2 <- (ifelse((MCond$Semaf_A2 >= 8 & MCond$Semaf_A2 <= 15),1,0))
MCond$SEMF_A2_3 <- (ifelse((MCond$Semaf_A2 > 16),1,0))
MCond$SEMF_A3_1 <- (ifelse((MCond$Semaf_A3 <= 7),1,0))
MCond$SEMF_A3_2 <- (ifelse((MCond$Semaf_A3 >= 8 & MCond$Semaf_A3 <= 15),1,0))
MCond$SEMF_A3_3 <- (ifelse((MCond$Semaf_A3 > 16),1,0))
MCond$SEMF_EC_1 <- (ifelse((MCond$Semaf_EC <= 7),1,0))
MCond$SEMF_EC_2 <- (ifelse((MCond$Semaf_EC >= 8 & MCond$Semaf_EC <= 15),1,0))
MCond$SEMF_EC_3 <- (ifelse((MCond$Semaf_EC > 16),1,0))
MCond$NO_CAMFD_A1 <- (ifelse((MCond$CamFD_A1 == 0),1,0))
MCond$SI_CAMFD_A1 <- (ifelse((MCond$CamFD_A1 >= 1),1,0))
MCond$NO_CAMFD_A2 <- (ifelse((MCond$CamFD_A2 == 0),1,0))
MCond$SI_CAMFD_A2 <- (ifelse((MCond$CamFD_A2 >= 1),1,0))
MCond$NO_CAMFD_A3 <- (ifelse((MCond$CamFD_A3 == 0),1,0))
MCond$SI_CAMFD_A3 <- (ifelse((MCond$CamFD_A3 >= 1),1,0))
MCond$NO_CAMFD_EC <- (ifelse((MCond$CamFD_EC == 0),1,0))
MCond$SI_CAMFD_EC <- (ifelse((MCond$CamFD_EC >= 1),1,0))
MCond$ACC_A1_0 <- (ifelse((MCond$Acc_A1 == 0),1,0))
MCond$ACC_A1_1 <- (ifelse((MCond$Acc_A1 == 1),1,0))
MCond$ACC_A1_2 <- (ifelse((MCond$Acc_A1 >= 2),1,0))
MCond$ACC_A2_0 <- (ifelse((MCond$Acc_A2 == 0),1,0))
MCond$ACC_A2_1 <- (ifelse((MCond$Acc_A2 == 1),1,0))
MCond$ACC_A2_2 <- (ifelse((MCond$Acc_A2 >= 2),1,0))
MCond$ACC_A3_0 <- (ifelse((MCond$Acc_A3 == 0),1,0))
MCond$ACC_A3_1 <- (ifelse((MCond$Acc_A3 == 1),1,0))
MCond$ACC_A3_2 <- (ifelse((MCond$Acc_A3 >= 2),1,0))
MCond$ACC_EC_0 <- (ifelse((MCond$Acc_EC == 0),1,0))
MCond$ACC_EC_1 <- (ifelse((MCond$Acc_EC == 1),1,0))
MCond$ACC_EC_2 <- (ifelse((MCond$Acc_EC >= 2),1,0))
MCond$NO_PANEL_A1 <- (ifelse((MCond$Paneles_A1 == 0 | MCond$Paneles_A1 == 999),1,0))
MCond$SI_PANEL_A1 <- (ifelse((MCond$Paneles_A1 >= 1),1,0))
MCond$NO_PANEL_A2 <- (ifelse((MCond$Paneles_A2 == 0 | MCond$Paneles_A2 == 999),1,0))
MCond$SI_PANEL_A2 <- (ifelse((MCond$Paneles_A2 >= 1),1,0))
MCond$NO_PANEL_A3 <- (ifelse((MCond$Paneles_A3 == 0 | MCond$Paneles_A3 == 999),1,0))
MCond$SI_PANEL_A3 <- (ifelse((MCond$Paneles_A3 >= 1),1,0))
MCond$NO_PANEL_EC <- (ifelse((MCond$Paneles_EC == 0 | MCond$Paneles_EC == 999),1,0))
MCond$SI_PANEL_EC <- (ifelse((MCond$Paneles_EC >= 1),1,0))
MCond$EXP_1 <- ifelse((MCond$Experiencia == 1),1,0)
MCond$EXP_2 <- ifelse((MCond$Experiencia == 2),1,0)
MCond$EXP_3 <- ifelse((MCond$Experiencia == 3),1,0)
MCond$EXP_4 <- ifelse((MCond$Experiencia == 4),1,0)
MCond$EXP_5 <- ifelse((MCond$Experiencia == 5),1,0)
# ?Quiero orden!
tibble::as_tibble(MCond)
names(MCond)
dplyr::glimpse(MCond)
summary(MCond)
MCond[c("TIEMPO_PROFESION", "HORAS_TRABAJO","NIVEL_EDUCATIVO","EDAD","Semaf_A1", "Semaf_A2","Semaf_A3",
"Semaf_EC","CamFD_A1","CamFD_A2","CamFD_A3","CamFD_EC","ZER_A1","ZER_A2","ZER_A3","ZER_EC",
"MtrP_A1","MtrP_A2","MtrP_A3","MtrP_EC","Acc_EC","Acc_rutas_1","Acc_rutas_2","Acc_rutas_3",
"Paneles_EC", "Paneles_rutas_1","Paneles_rutas_2", "Paneles_rutas_3","CLIMA" )] <- NULL
# ?Quiero orden!
tibble::as_tibble(MCond)
names(MCond)
dplyr::glimpse(MCond)
summary(MCond)
# DB Completa
write.table(MCond,
file="/Users/williz/Desktop/ModelosED/2. Articulo 2/2. Database/DBCompleta_ModeloLogitVL.csv", sep="\t", dec=".")
MUESTRA <- MCond %>%
# Filtrar viajes Eliminados en la primera revisión
filter(!(MUESTRA %in% c("0")))
write.table(MUESTRA,
file="/Users/williz/Desktop/ModelosED/2. Articulo 2/2. Database/DBMuestra_ModeloLogitVL.csv", sep="\t", dec=".")
VALIDACION <- MCond %>%
# Filtrar viajes Eliminados en la primera revisión
filter(!(MUESTRA %in% c("1")))
write.table(VALIDACION,
file="/Users/williz/Desktop/ModelosED/2. Articulo 2/2. Database/DBValidacion.csv", sep="\t", dec=".")
library(psych)
library(tidyverse)
library(readxl)
library(lubridate)
library(sf)
library(leaflet)
library(RColorBrewer)
library(sqldf)
require(reshape)
require(dplyr)
require(psych)
require(GGally)
library(corrplot)
library(corrr)
library(umx)
workingDirectory="/Users/williz/Desktop/ModelosED/2. Articulo 2/1. Scripts/1. Analisis Factorial"
setwd(workingDirectory)
DBModLog <- read.csv("/Users/williz/Desktop/ModelosED/2. Articulo 2/2. Database/DBMuestra_ModeloLogitVL.csv",header = TRUE, sep = "\t")
#names(DBModoCond)
names(DBModLog)
ModoCond <- DBModLog %>%
select("FRbr", "UsoDirec","EnfCond","AFrSem","CulFr","OmLmVel",
"IgPare","UsoCel","PasoPeaton","INFOTRAFICO","DispMob","Experiencia",
"CinSeg","UsoPito")
names(ModoCond)
psych::alpha(ModoCond)
cor(ModoCond)
tibble::as_tibble(ModoCond)
ModoCond[c("CinSeg","DispMob","Experiencia","INFOTRAFICO")] <- NULL
names(ModoCond)
psych::alpha(ModoCond)
#Alpha de Cronbach
psych::alpha(ModoCond)
cor(ModoCond, use = "pairwise.complete.obs")
Rcor <- cor(ModoCond)
# Gráfico de las Correlaciones
corrplot(Rcor, order = "AOE", method = c("shade"), tl.col = "black", addCoef.col = "black",
tl.srt= 45, tl.cex = 1, type = "upper", diag = F,  addshade = "all")
corrplot.mixed(Rcor,lower.col = "black",number.cex=.7, title("Matriz de Correlación"))
# Determinante de la Matriz de correlaciones
det(Rcor)
#Test de esfericidad de Bartlett
print(cortest.bartlett(Rcor, n=nrow(ModoCond)))
#KMO
print(KMO(Rcor))
### Limpiar memoria
rm(list = ls())
workingDirectory="/Users/williz/Desktop/ModelosED/2. Articulo 2/1. Scripts/Modelos MNL/MNL_Modelo_2"
setwd(workingDirectory)
### Cargar libreria Apollo
library(apollo)
### Inicializar código
apollo_initialise()
## Establecer controles principales
apollo_control = list(
modelName  = "MNL_Modelo_2",
modelDescr = "Modelo MNL Con Camaras, Paneles, MTRP y ZER ",
indivID    = "ViajeId",
nCores     = 1
)
database = read.csv("/Users/williz/Desktop/ModelosED/2. Articulo 2/2. Database/DBMuestra_ModeloLogitVL.csv",sep="\t", dec=".",header=TRUE)
### Vector de parametros, incluidos los que se mantienen fijos en la estimación
apollo_beta=c(asc_ruta1   = 0, asc_ruta2   = 0, asc_ruta3   = 0, asc_rutaEC  = 0,
b_tt  = 0,
b_dt  = 0,
b_CongAB  = 0, b_CongCD  = 0, b_CongEF  = 0,
b_Sem_1 = 0, b_Sem_2 = 0, b_Sem_3 = 0,
b_ACC_0 = 0, b_ACC_1 = 0, b_ACC_2 = 0,
b_NO_CAMFD = 0, b_SI_CAMFD = 0,
b_NO_PANEL = 0, b_SI_PANEL = 0,
b_NO_ZER = 0, b_SI_ZER = 0,
b_No_MTRP = 0, b_Si_MTRP = 0)
### Vector con nombres (entre comillas) de los parámetros que se mantendrán fijos en su valor inicial en apollo_beta, use apollo_beta_fixed = c () si ninguno
apollo_fixed = c("asc_ruta3", "b_CongEF", "b_Sem_3", "b_ACC_2", "b_NO_CAMFD", "b_NO_PANEL", "b_NO_ZER",
"b_No_MTRP")
apollo_inputs = apollo_validateInputs()
apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){
### Attach inputs and detach after function exit
apollo_attach(apollo_beta, apollo_inputs)
on.exit(apollo_detach(apollo_beta, apollo_inputs))
### Create list of probabilities P
P = list()
### List of utilities: these must use the same names as in mnl_settings, order is irrelevant
V = list()
V[['ruta1']]  = asc_ruta1  + b_tt * TIEMPOAlt1 + b_dt * DISTAlt1 + b_CongAB*CONG_AB_A1 +
b_CongCD*CONG_CD_A1 + b_CongEF*CONG_EF_A1 +
b_Sem_1*SEMF_A1_1 + b_Sem_2*SEMF_A1_2 + b_Sem_3*SEMF_A1_3 +
b_ACC_0*ACC_A1_0 + b_ACC_1*ACC_A1_1 + b_ACC_2*ACC_A1_2 +
b_NO_CAMFD * NO_CAMFD_A1 + b_SI_CAMFD * SI_CAMFD_A1 +
b_NO_PANEL * NO_PANEL_A1 + b_SI_PANEL * SI_PANEL_A1 +
b_NO_ZER * NO_ZER_A1 + b_SI_ZER * SI_ZER_A1 + b_No_MTRP * NO_MTRP_A1 +
b_Si_MTRP * SI_MTRP_A1
V[['ruta2']]  = asc_ruta2  + b_tt * TIEMPOAlt2 + b_dt * DISTAlt2 + b_CongAB*CONG_AB_A2 +
b_CongCD*CONG_CD_A2 + b_CongEF*CONG_EF_A2 +
b_Sem_1*SEMF_A2_1 + b_Sem_2*SEMF_A2_2 + b_Sem_3*SEMF_A2_3 +
b_ACC_0*ACC_A2_0 + b_ACC_1*ACC_A2_1 + b_ACC_2*ACC_A2_2 +
b_NO_CAMFD * NO_CAMFD_A2 + b_SI_CAMFD * SI_CAMFD_A2 +
b_NO_PANEL * NO_PANEL_A2 + b_SI_PANEL * SI_PANEL_A2 +
b_NO_ZER * NO_ZER_A2 + b_SI_ZER * SI_ZER_A2 + b_No_MTRP * NO_MTRP_A2 +
b_Si_MTRP * SI_MTRP_A2
V[['ruta3']]  = asc_ruta3  + b_tt * TIEMPOAlt3 + b_dt * DISTAlt3 + b_CongAB*CONG_AB_A3 +
b_CongCD*CONG_CD_A3 + b_CongEF*CONG_EF_A3 +
b_Sem_1*SEMF_A3_1 + b_Sem_2*SEMF_A3_2 + b_Sem_3*SEMF_A3_3 +
b_ACC_0*ACC_A3_0 + b_ACC_1*ACC_A3_1 + b_ACC_2*ACC_A3_2 +
b_NO_CAMFD * NO_CAMFD_A3 + b_SI_CAMFD * SI_CAMFD_A3 +
b_NO_PANEL * NO_PANEL_A3 + b_SI_PANEL * SI_PANEL_A3 +
b_NO_ZER * NO_ZER_A3 + b_SI_ZER * SI_ZER_A3 + b_No_MTRP * NO_MTRP_A3 +
b_Si_MTRP * SI_MTRP_A3
V[['rutaEC']] = asc_rutaEC + b_tt * TIEMPOEC   + b_dt * DISTEC + b_CongAB*CONG_AB_EC +
b_CongCD*CONG_CD_EC + b_CongEF*CONG_EF_EC +
b_Sem_1*SEMF_EC_1 + b_Sem_2*SEMF_EC_2 + b_Sem_3*SEMF_EC_3 +
b_ACC_0*ACC_EC_0 + b_ACC_1*ACC_EC_1 + b_ACC_2*ACC_EC_2 +
b_NO_CAMFD * NO_CAMFD_EC + b_SI_CAMFD * SI_CAMFD_EC +
b_NO_PANEL * NO_PANEL_EC + b_SI_PANEL * SI_PANEL_EC +
b_NO_ZER * NO_ZER_EC + b_SI_ZER * SI_ZER_EC + b_No_MTRP * NO_MTRP_EC +
b_Si_MTRP * SI_MTRP_EC
### Define settings for MNL model component
mnl_settings = list(
alternatives  = c(ruta1=1, ruta2=2, ruta3=3, rutaEC=4),
avail         = list(ruta1=1, ruta2=1, ruta3=1, rutaEC=1),
choiceVar     = CHOICE,
V             = V
)
### Compute probabilities using MNL model
P[['model']] = apollo_mnl(mnl_settings, functionality)
### Take product across observation for same individual
#P = apollo_panelProd(P, apollo_inputs, functionality)
### Prepare and return outputs of function
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
model = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)
apollo_modelOutput(model, modelOutput_settings=list(printPVal=TRUE) )
apollo_saveOutput(model, saveOutput_settings=list(printPVal=TRUE) )
#Cargas las Bases de Datos
rm(list = ls())
workingDirectory="/Users/williz/Desktop/ModelosED/2. Articulo 2/1. Scripts/Modelos MNL/MNL_Modelo_2/"
setwd(workingDirectory)
db = read.csv("/Users/williz/Desktop/ModelosED/2. Articulo 2/2. Database/DBValidacion.csv",sep="\t", dec=".",header=TRUE)
est= read.csv("/Users/williz/Desktop/ModelosED/2. Articulo 2/1. Scripts/Modelos MNL/MNL_Modelo_2/MNL_Modelo_2_estimates.csv",sep=",", dec=".",header=TRUE
)
names(db)
asc_ruta1  =  est[1,2]
asc_ruta2  =  est[2,2]
asc_ruta3  =  est[3,2]
asc_rutaEC = est[4,2]
b_tt       = est[5,2]
b_dt       = est[6,2]
b_CongAB   = est[7,2]
b_CongCD   = est[8,2]
b_CongEF   = est[9,2]
b_Sem_1    = est[10,2]
b_Sem_2    = est[11,2]
b_Sem_3    = est[12,2]
b_ACC_0    = est[13,2]
b_ACC_1    = est[14,2]
b_ACC_2    = est[15,2]
b_NO_CAMFD = est[16,2]
b_SI_CAMFD = est[17,2]
b_NO_PANEL = est[18,2]
b_SI_PANEL = est[19,2]
b_NO_ZER   =  est[20,2]
b_SI_ZER   = est[21,2]
b_No_MTRP  =  est[22,2]
b_Si_MTRP  = est[23,2]
V_1 = array()
V_2 = array()
V_3 = array()
V_4 = array()
for (i in 1:nrow(db)){
V_1[i] = asc_ruta1  + b_tt * db$TIEMPOAlt1[i] + b_dt * db$DISTAlt1[i] + b_CongAB*db$CONG_AB_A1[i] +
b_CongCD*db$CONG_CD_A1[i] + b_CongEF*db$CONG_EF_A1[i] +
b_Sem_1*db$SEMF_A1_1[i] + b_Sem_2*db$SEMF_A1_2[i] + b_Sem_3*db$SEMF_A1_3[i] +
b_ACC_0*db$ACC_A1_0[i] + b_ACC_1*db$ACC_A1_1[i] + b_ACC_2*db$ACC_A1_2[i] +
b_NO_CAMFD * db$NO_CAMFD_A1[i] + b_SI_CAMFD * db$SI_CAMFD_A1[i] +
b_NO_PANEL * db$NO_PANEL_A1[i] + b_SI_PANEL * db$SI_PANEL_A1[i] +
b_NO_ZER * db$NO_ZER_A1[i] + b_SI_ZER * db$SI_ZER_A1[i] + b_No_MTRP * db$NO_MTRP_A1[i] +
b_Si_MTRP * db$SI_MTRP_A1[i]
V_2[i] = asc_ruta2  + b_tt * db$TIEMPOAlt2[i] + b_dt * db$DISTAlt2[i] + b_CongAB* db$CONG_AB_A2[i] +
b_CongCD*db$CONG_CD_A2[i] + b_CongEF*db$CONG_EF_A2[i] +
b_Sem_1*db$SEMF_A2_1[i] + b_Sem_2*db$SEMF_A2_2[i] + b_Sem_3*db$SEMF_A2_3[i] +
b_ACC_0*db$ACC_A2_0[i] + b_ACC_1*db$ACC_A2_1[i] + b_ACC_2*db$ACC_A2_2[i] +
b_NO_CAMFD * db$NO_CAMFD_A2[i] + b_SI_CAMFD * db$SI_CAMFD_A2[i] +
b_NO_PANEL * db$NO_PANEL_A2[i] + b_SI_PANEL * db$SI_PANEL_A2[i] +
b_NO_ZER * db$NO_ZER_A2[i] + b_SI_ZER * db$SI_ZER_A2[i] + b_No_MTRP * db$NO_MTRP_A2[i] +
b_Si_MTRP * db$SI_MTRP_A2[i]
V_3[i] = asc_ruta3  + b_tt * db$TIEMPOAlt3[i] + b_dt * db$DISTAlt3[i] + b_CongAB*db$CONG_AB_A3[i] +
b_CongCD*db$CONG_CD_A3[i] + b_CongEF*db$CONG_EF_A3[i] +
b_Sem_1*db$SEMF_A3_1[i] + b_Sem_2*db$SEMF_A3_2[i] + b_Sem_3*db$SEMF_A3_3[i] +
b_ACC_0*db$ACC_A3_0[i] + b_ACC_1*db$ACC_A3_1[i] + b_ACC_2*db$ACC_A3_2[i] +
b_NO_CAMFD * db$NO_CAMFD_A3[i] + b_SI_CAMFD * db$SI_CAMFD_A3[i] +
b_NO_PANEL * db$NO_PANEL_A3[i] + b_SI_PANEL * db$SI_PANEL_A3[i] +
b_NO_ZER * db$NO_ZER_A3[i] + b_SI_ZER * db$SI_ZER_A3[i] + b_No_MTRP * db$NO_MTRP_A3[i] +
b_Si_MTRP * db$SI_MTRP_A3[i]
V_4[i] = asc_rutaEC + b_tt * db$TIEMPOEC[i]   + b_dt * db$DISTEC[i] + b_CongAB*db$CONG_AB_EC[i] +
b_CongCD*db$CONG_CD_EC[i] + b_CongEF*db$CONG_EF_EC[i] +
b_Sem_1*db$SEMF_EC_1[i] + b_Sem_2*db$SEMF_EC_2[i] + b_Sem_3*db$SEMF_EC_3[i] +
b_ACC_0*db$ACC_EC_0[i] + b_ACC_1*db$ACC_EC_1[i] + b_ACC_2*db$ACC_EC_2[i] +
b_NO_CAMFD * db$NO_CAMFD_EC[i] + b_SI_CAMFD * db$SI_CAMFD_EC[i] +
b_NO_PANEL * db$NO_PANEL_EC[i] + b_SI_PANEL * db$SI_PANEL_EC[i] +
b_NO_ZER * db$NO_ZER_EC[i] + b_SI_ZER * db$SI_ZER_EC[i] + b_No_MTRP * db$NO_MTRP_EC[i] +
b_Si_MTRP * db$SI_MTRP_EC[i]
}
P_r1 = array()
P_r2 = array()
P_r3 = array()
P_r4 = array()
for (i in 1:nrow(db)){
P_r1[i] = exp(V_1[i])/(exp(V_1[i])+exp(V_2[i])+exp(V_3[i])+exp(V_4[i]))
P_r2[i] = exp(V_2[i])/(exp(V_1[i])+exp(V_2[i])+exp(V_3[i])+exp(V_4[i]))
P_r3[i] = exp(V_3[i])/(exp(V_1[i])+exp(V_2[i])+exp(V_3[i])+exp(V_4[i]))
P_r4[i] = exp(V_4[i])/(exp(V_1[i])+exp(V_2[i])+exp(V_3[i])+exp(V_4[i]))}
db$P_r1 <- P_r1
db$P_r2 <- P_r2
db$P_r3 <- P_r3
db$P_r4 <- P_r4
Eleccion = array()
for (i in 1:nrow(db)){
if (max(db$P_r1[i],db$P_r2[i],db$P_r3[i],db$P_r4[i]) == db$P_r1[i]) {Eleccion[i] = 1}
else
{if (max(db$P_r1[i],db$P_r2[i],db$P_r3[i],db$P_r4[i]) == db$P_r2[i]) {Eleccion[i] = 2}
else
{if (max(db$P_r1[i],db$P_r2[i],db$P_r3[i],db$P_r4[i]) == db$P_r3[i]) {Eleccion[i] = 3}
else
{Eleccion[i] = 4
}}}}
db$PREDICTED <- Eleccion
Conteo = array()
db$Conteo <- Conteo
table(db$CHOICE)
table(db$PREDICTED)
for (i in 1:nrow(db)){
if (db$CHOICE[i] == db$PREDICTED[i]) {db$Conteo[i]=1}
else
{db$Conteo[i] = 0}
}
CP <- data.frame(db$CHOICE,db$PREDICTED, db$Conteo)
CP
table(db$Conteo)
