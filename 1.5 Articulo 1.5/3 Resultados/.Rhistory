prediccion <- factor(prediccion,
levels = 1:3,
labels = c("Baja","Media","Alta"))
matriz_confusion <- table(db$Velocidad, prediccion,
dnn = c("observaciones", "predicciones"))
matriz_confusion
max(db$V_promedio)
db$Velocidad <- (ifelse((db$V_promedio<20), 1,
ifelse((db$V_promedio < 33), 2,3)))
db$Velocidad <- factor(db$Velocidad,
levels = 1:3,
labels = c("Baja","Media","Alta"))
db$Velocidad <- ordered(db$Velocidad, levels = c("Baja","Media","Alta"))
modelo_log <- polr(db$Velocidad ~ db$CONGESTION + db$CLIMA + db$Semaforos +
db$HORAS_TRABAJO + db$HPICOHVALLE + db$Experiencia + db$MERIDIANO, data = db)
summary(modelo_log)
# Probabilidades estimadas
Prob <- data.frame(db$Velocidad, db$CONGESTION, db$CLIMA, db$Semaforos,
db$HORAS_TRABAJO, db$HPICOHVALLE, db$Experiencia,
db$MERIDIANO, fitted.values(modelo_log))
Tabla <- data.frame(db$Velocidad, Prob$Baja, Prob$Media, Prob$Alta)
Tabla
prediccion = array()
for (i in 1:nrow(db)){
if (max(Prob$Baja[i],Prob$Media[i], Prob$Alta[i]) == Prob$Baja[i]) {prediccion[i] = 1}
else
{if (max(Prob$Baja[i],Prob$Media[i], Prob$Alta[i]) == Prob$Media[i]) {prediccion[i] = 2}
else
{prediccion[i] = 3
}}}
prediccion <- factor(prediccion,
levels = 1:3,
labels = c("Baja","Media","Alta"))
matriz_confusion <- table(db$Velocidad, prediccion,
dnn = c("observaciones", "predicciones"))
matriz_confusion
db$V_promedio
db$Velocidad
# Limpiar Entorno de trabajo
rm(list = ls())
workingDirectory="/Users/williz/Desktop/ModelosED/1.5 Articulo 1.5/3 Resultados"
setwd(workingDirectory)
# Cargar datos
Datos   <- readRDS("/Users/williz/Desktop/ModelosED/1.5 Articulo 1.5/2 Database/DBCOMPLETA.rds")
Rutas   <- readRDS("/Users/williz/Desktop/ModelosED/1.5 Articulo 1.5/2 Database/Rutas.rds")
db   <- Datos %>%
select(ViajeId:USOCINTURON) %>%
# Rutas
inner_join(Rutas %>%
select(ViajeId, Duracion, Distancia, V_promedio, V_Total),
by = "ViajeId")
library(dplyr)
# Limpiar Entorno de trabajo
rm(list = ls())
workingDirectory="/Users/williz/Desktop/ModelosED/1.5 Articulo 1.5/3 Resultados"
setwd(workingDirectory)
# Cargar datos
Datos   <- readRDS("/Users/williz/Desktop/ModelosED/1.5 Articulo 1.5/2 Database/DBCOMPLETA.rds")
Rutas   <- readRDS("/Users/williz/Desktop/ModelosED/1.5 Articulo 1.5/2 Database/Rutas.rds")
db   <- Datos %>%
select(ViajeId:USOCINTURON) %>%
# Rutas
inner_join(Rutas %>%
select(ViajeId, Duracion, Distancia, V_promedio, V_Total),
by = "ViajeId")
db   <- Datos %>%
select(ViajeId:USOCINTURON) %>%
# Rutas
inner_join(Rutas %>%
select(ViajeId, Duracion, Distancia, V_promedio, V_Total),
by = "ViajeId")
db   <- Datos %>%
select(ViajeId:USOCINTURON) %>%
# Rutas
inner_join(Rutas %>%
select(ViajeId, Duracion, Distancia, V_promedio, V_Total),
by = "ViajeId")
install.packages("dplyr")
library(dplyr)
library(dplyr)
library(readxl)
library(xlsx)
library(sqldf)
require(reshape)
require(dplyr)
require(psych)
require(GGally)
# Limpiar Entorno de trabajo
rm(list = ls())
workingDirectory="/Users/williz/Desktop/ModelosED/1.5 Articulo 1.5/3 Resultados"
setwd(workingDirectory)
# Cargar datos
Datos   <- readRDS("/Users/williz/Desktop/ModelosED/1.5 Articulo 1.5/2 Database/DBCOMPLETA.rds")
Rutas   <- readRDS("/Users/williz/Desktop/ModelosED/1.5 Articulo 1.5/2 Database/Rutas.rds")
db   <- Datos %>%
select(ViajeId:USOCINTURON) %>%
# Rutas
inner_join(Rutas %>%
select(ViajeId, Duracion, Distancia, V_promedio, V_Total),
by = "ViajeId")
db   <- Datos %>%
select(ViajeId:USOCINTURON) %>%
# Rutas
inner_join(Rutas %>%
select(ViajeId, Duracion, Distancia, V_promedio, V_total),
by = "ViajeId")
db <- db %>%
mutate(
GENERO        = factor(GENERO,
levels = 1:3,
labels = c("Masculino","Femenino","Otro")),
CLIMA         = factor(CLIMA,
levels = 1:2,
labels = c("Despejado",
"Lluvioso")),
CONGESTION    = factor(CONGESTION,
levels = 1:6,
labels = c("Nivel A",
"Nivel B",
"Nivel C",
"Nivel D",
"Nivel E",
"Nivel F")),
PAVIMENTO     = factor(PAVIMENTO,
levels = 1:3,
labels = c("Óptimas condiciones",
"Regular estado",
"Mal estado")),
INCIDENTE     = factor(INCIDENTE,
levels = 1:2,
labels = c("No","Si")),
MERIDIANO     = factor(MERIDIANO,
levels = 1:2,
labels = c("AM", "PM")),
HPICOHVALLE   = factor(HPICOHVALLE,
levels = 1:2,
labels = c("Valle","Pico")),
EDAD          = factor(EDAD,
levels = 1:4,
labels = c("18-29", "30-40", "41-60", "Mayor 60")),
NIVEL_EDUCATIVO = factor(NIVEL_EDUCATIVO,
levels = 0:4,
labels = c("Primaria", "Bachiller", "Tecnología", "Profesional", "NR")),
Experiencia = factor(Experiencia,
levels = 1:5,
labels = c("Menos 2 años", "De 2 a 5 años", "De 5 a 8 años", "De 8 a 12 años", "Más de 12 años")),
PasoPeaton = factor(PasoPeaton,
levels = 1:5,
labels = c("Nunca", "Casi Nunca", "Ocasionalmente", "Casi siempre", "Siempre")),
UsoPito = factor(UsoPito,
levels = 1:5,
labels = c("Nunca", "Casi Nunca", "Ocasionalmente", "Casi siempre", "Siempre")),
CinSeg = factor(CinSeg,
levels = 1:2,
labels = c("No", "Si")),
FRbr = factor(FRbr,
levels = 1:5,
labels = c("Nunca", "Casi Nunca", "Ocasionalmente", "Casi siempre", "Siempre")),
UsoDirec = factor(UsoDirec,
levels = 1:5,
labels = c("Nunca", "Casi Nunca", "Ocasionalmente", "Casi siempre", "Siempre")),
EnfCond = factor(EnfCond,
levels = 1:5,
labels = c("Nunca", "Casi Nunca", "Ocasionalmente", "Casi siempre", "Siempre")),
AFrSem = factor(AFrSem,
levels = 1:5,
labels = c("Nunca", "Casi Nunca", "Ocasionalmente", "Casi siempre", "Siempre")),
CulFr = factor(CulFr,
levels = 1:5,
labels = c("Nunca", "Casi Nunca", "Ocasionalmente", "Casi siempre", "Siempre")),
OmLmVel = factor(OmLmVel,
levels = 1:5,
labels = c("Nunca", "Casi Nunca", "Ocasionalmente", "Casi siempre", "Siempre")),
IgPare = factor(IgPare,
levels = 1:5,
labels = c("Nunca", "Casi Nunca", "Ocasionalmente", "Casi siempre", "Siempre")),
UsoCel = factor(UsoCel,
levels = 1:5,
labels = c("Nunca", "Casi Nunca", "Ocasionalmente", "Casi siempre", "Siempre")),
ComVrb = factor(ComVrb,
levels = 1:5,
labels = c("Muy Serio", "Serio", "Indiferente", "Conversador", "Muy Conversador")),
Ans = factor(Ans,
levels = 1:5,
labels = c("Relajado", "Algo relajado", "Neutro", "Algo tenso", "Tenso")),
ComAfec = factor(ComAfec,
levels = 1:5,
labels = c("Muy Amable", "Amable", "Neutro", "Antipatico", "Muy Antipatico")),
PrPer = factor(PrPer,
levels = 1:5,
labels = c("Muy Ordenado", "Ordenado", "Neutro", "Desordenado", "Muy desordenado")),
AmbTr = factor(AmbTr,
levels = 1:5,
labels = c("Muy Ordenado",
"Ordenado",
"Neutro",
"Desordenado",
"Muy desordenado")),
StrC = factor(StrC,
levels = 1:5,
labels = c("Muy Tranquilo",
"Tranquilo",
"Neutro",
"Tensionado",
"Muy Tensionado")),
ConCl = factor(ConCl,
levels = 1:5,
labels = c("Muy Respetuoso",
"Respetuoso",
"Indiferente",
"Irrespetuoso",
"Muy Irrespetuoso")),
DispMob = factor(DispMob,
levels = 1:6,
labels = c("Ninguno",
"Tappsy",
"EasyTaxi",
"Coopebombas",
"Tax Individual",
"Otra")))
db$V_total
saveRDS(db, "/Users/williz/Desktop/ModelosED/1.5 Articulo 1.5/2 Database/DataBase.rds")
# Limpiar Entorno de trabajo
rm(list = ls())
db   <- readRDS("/Users/williz/Desktop/ModelosED/1.5 Articulo 1.5/2 Database/DataBase.rds")
db$Semaforos <-  (ifelse((db$CHOICE == 1), (db$Semaf_A1/db$DISTAlt1),
ifelse((db$CHOICE == 2), (db$Semaf_A2/db$DISTAlt2),
ifelse((db$CHOICE == 3), (db$Semaf_A3/db$DISTAlt3),
(db$Semaf_EC/db$DISTEC)))))
db$Semaforos
db$Camaras <- (ifelse((db$CHOICE == 1), db$CamFD_A1,
ifelse((db$CHOICE == 2), db$CamFD_A2,
ifelse((db$CHOICE == 3), db$CamFD_A3,
db$CamFD_EC))))
db$Camaras
db$Velocidad <- (ifelse((db$V_total<20), 1,
ifelse((db$V_total < 33), 2,3)))
db$Velocidad <- factor(db$Velocidad,
levels = 1:3,
labels = c("Baja","Media","Alta"))
db$Velocidad <- ordered(db$Velocidad, levels = c("Baja","Media","Alta"))
db$CONGESTION <-ordered(db$CONGESTION)
db$CONGESTION <- relevel(db$CONGESTION, ref = "Nivel F")
db$CLIMA <- relevel(db$CLIMA, ref = "Despejado")
db$Experiencia <- relevel(db$Experiencia, ref = "Menos 2 años")
modelo_log <- polr(db$Velocidad ~ db$CONGESTION + db$CLIMA + db$Semaforos +
db$HORAS_TRABAJO + db$HPICOHVALLE + db$Experiencia + db$MERIDIANO, data = db)
library(MASS)
modelo_log <- polr(db$Velocidad ~ db$CONGESTION + db$CLIMA + db$Semaforos +
db$HORAS_TRABAJO + db$HPICOHVALLE + db$Experiencia + db$MERIDIANO, data = db)
summary(modelo_log)
# Probabilidades estimadas
Prob <- data.frame(db$Velocidad, db$CONGESTION, db$CLIMA, db$Semaforos,
db$HORAS_TRABAJO, db$HPICOHVALLE, db$Experiencia,
db$MERIDIANO, fitted.values(modelo_log))
Tabla <- data.frame(db$Velocidad, Prob$Baja, Prob$Media, Prob$Alta)
Tabla
prediccion = array()
for (i in 1:nrow(db)){
if (max(Prob$Baja[i],Prob$Media[i], Prob$Alta[i]) == Prob$Baja[i]) {prediccion[i] = 1}
else
{if (max(Prob$Baja[i],Prob$Media[i], Prob$Alta[i]) == Prob$Media[i]) {prediccion[i] = 2}
else
{prediccion[i] = 3
}}}
prediccion <- factor(prediccion,
levels = 1:3,
labels = c("Baja","Media","Alta"))
matriz_confusion <- table(db$Velocidad, prediccion,
dnn = c("observaciones", "predicciones"))
matriz_confusion
db$Velocidad <- (ifelse((db$V_total<20), 1,
ifelse((db$V_total < 30), 2,3)))
db$Velocidad <- factor(db$Velocidad,
levels = 1:3,
labels = c("Baja","Media","Alta"))
db$Velocidad <- ordered(db$Velocidad, levels = c("Baja","Media","Alta"))
db$CONGESTION <-ordered(db$CONGESTION)
modelo_log <- polr(db$Velocidad ~ db$CONGESTION + db$CLIMA + db$Semaforos +
db$HORAS_TRABAJO + db$HPICOHVALLE + db$Experiencia + db$MERIDIANO, data = db)
summary(modelo_log)
# Probabilidades estimadas
Prob <- data.frame(db$Velocidad, db$CONGESTION, db$CLIMA, db$Semaforos,
db$HORAS_TRABAJO, db$HPICOHVALLE, db$Experiencia,
db$MERIDIANO, fitted.values(modelo_log))
Tabla <- data.frame(db$Velocidad, Prob$Baja, Prob$Media, Prob$Alta)
Tabla
prediccion = array()
for (i in 1:nrow(db)){
if (max(Prob$Baja[i],Prob$Media[i], Prob$Alta[i]) == Prob$Baja[i]) {prediccion[i] = 1}
else
{if (max(Prob$Baja[i],Prob$Media[i], Prob$Alta[i]) == Prob$Media[i]) {prediccion[i] = 2}
else
{prediccion[i] = 3
}}}
prediccion <- factor(prediccion,
levels = 1:3,
labels = c("Baja","Media","Alta"))
matriz_confusion <- table(db$Velocidad, prediccion,
dnn = c("observaciones", "predicciones"))
matriz_confusion
db$Velocidad <- (ifelse((db$V_total<20), 1,
ifelse((db$V_total < 28), 2,3)))
db$Velocidad <- factor(db$Velocidad,
levels = 1:3,
labels = c("Baja","Media","Alta"))
db$Velocidad <- ordered(db$Velocidad, levels = c("Baja","Media","Alta"))
db$CONGESTION <-ordered(db$CONGESTION)
modelo_log <- polr(db$Velocidad ~ db$CONGESTION + db$CLIMA + db$Semaforos +
db$HORAS_TRABAJO + db$HPICOHVALLE + db$Experiencia + db$MERIDIANO, data = db)
summary(modelo_log)
# Probabilidades estimadas
Prob <- data.frame(db$Velocidad, db$CONGESTION, db$CLIMA, db$Semaforos,
db$HORAS_TRABAJO, db$HPICOHVALLE, db$Experiencia,
db$MERIDIANO, fitted.values(modelo_log))
Tabla <- data.frame(db$Velocidad, Prob$Baja, Prob$Media, Prob$Alta)
Tabla
prediccion = array()
for (i in 1:nrow(db)){
if (max(Prob$Baja[i],Prob$Media[i], Prob$Alta[i]) == Prob$Baja[i]) {prediccion[i] = 1}
else
{if (max(Prob$Baja[i],Prob$Media[i], Prob$Alta[i]) == Prob$Media[i]) {prediccion[i] = 2}
else
{prediccion[i] = 3
}}}
prediccion <- factor(prediccion,
levels = 1:3,
labels = c("Baja","Media","Alta"))
matriz_confusion <- table(db$Velocidad, prediccion,
dnn = c("observaciones", "predicciones"))
matriz_confusion
db$Velocidad <- (ifelse((db$V_total<19), 1,
ifelse((db$V_total < 26), 2,3)))
db$Velocidad <- factor(db$Velocidad,
levels = 1:3,
labels = c("Baja","Media","Alta"))
db$Velocidad <- ordered(db$Velocidad, levels = c("Baja","Media","Alta"))
db$CONGESTION <-ordered(db$CONGESTION)
modelo_log <- polr(db$Velocidad ~ db$CONGESTION + db$CLIMA + db$Semaforos +
db$HORAS_TRABAJO + db$HPICOHVALLE + db$Experiencia + db$MERIDIANO, data = db)
summary(modelo_log)
# Probabilidades estimadas
Prob <- data.frame(db$Velocidad, db$CONGESTION, db$CLIMA, db$Semaforos,
db$HORAS_TRABAJO, db$HPICOHVALLE, db$Experiencia,
db$MERIDIANO, fitted.values(modelo_log))
Tabla <- data.frame(db$Velocidad, Prob$Baja, Prob$Media, Prob$Alta)
Tabla
prediccion = array()
for (i in 1:nrow(db)){
if (max(Prob$Baja[i],Prob$Media[i], Prob$Alta[i]) == Prob$Baja[i]) {prediccion[i] = 1}
else
{if (max(Prob$Baja[i],Prob$Media[i], Prob$Alta[i]) == Prob$Media[i]) {prediccion[i] = 2}
else
{prediccion[i] = 3
}}}
prediccion <- factor(prediccion,
levels = 1:3,
labels = c("Baja","Media","Alta"))
matriz_confusion <- table(db$Velocidad, prediccion,
dnn = c("observaciones", "predicciones"))
matriz_confusion
modelo_log <- polr(db$Velocidad ~ db$CONGESTION + db$CLIMA + db$Semaforos +
db$HORAS_TRABAJO + db$HPICOHVALLE + db$Experiencia + db$MERIDIANO, data = db)
summary(modelo_log)
confint(modelo_log)
# En caso de querer los intervalos basados en el error estándar.
confint.default(modelo_log)
# El mismo cálculo se puede obtener directamente con:
anova(modelo_glm, test = "Chisq")
# El mismo cálculo se puede obtener directamente con:
anova(modelo_log, test = "Chisq")
# Diferencia de residuos
dif_residuos <- modelo_log$null.deviance - modelo_log$deviance
# Grados libertad
df <- modelo_log$df.null - modelo_log$df.residual
# p-value
p_value <- pchisq(q = dif_residuos,df = df, lower.tail = FALSE)
paste("Diferencia de residuos:", round(dif_residuos, 4))
paste("Grados de libertad:", df)
paste("p-value:", round(p_value, 4))
modelo_log$fitted.values
# Diferencia de residuos
dif_residuos <- modelo_log$null.deviance - modelo_log$deviance
# Grados libertad
df <- modelo_log$df.null - modelo_log$df.residual
# p-value
p_value <- pchisq(q = dif_residuos,df = df, lower.tail = FALSE)
modelo_log$null.deviance
modelo_log$deviance
modelo_log <- polr(db$Velocidad ~ db$CONGESTION + db$CLIMA + db$Semaforos +
db$HORAS_TRABAJO + db$HPICOHVALLE + db$Experiencia + db$MERIDIANO, data = db)
summary(modelo_log)
# Grados libertad
df <- modelo_log$df.residual
df
predict(modelo_log, db, type = "p")
addterm(modelo_log, ~.^2, test = "Chisq")
modelo.log2 <- stepAIC(modelo.log, ~.^2)
modelo_log2 <- stepAIC(modelo_log, ~.^2)
modelo_log2$anova
anova(modelo_log, modelo_log2)
modelo_log <- update(modelo_log, Hess=TRUE)
pr <- profile(modelo_log)
confint(pr)
plot(pr)
pairs(pr)
modelo_log <- polr(db$Velocidad ~ db$CONGESTION + db$CLIMA + db$Semaforos +
db$HORAS_TRABAJO + db$HPICOHVALLE + db$Experiencia + db$MERIDIANO,
method = "probit", data = db)
summary(modelo_log)
# Probabilidades estimadas
Prob <- data.frame(db$Velocidad, db$CONGESTION, db$CLIMA, db$Semaforos,
db$HORAS_TRABAJO, db$HPICOHVALLE, db$Experiencia,
db$MERIDIANO, fitted.values(modelo_log))
Tabla <- data.frame(db$Velocidad, Prob$Baja, Prob$Media, Prob$Alta)
Tabla
prediccion = array()
for (i in 1:nrow(db)){
if (max(Prob$Baja[i],Prob$Media[i], Prob$Alta[i]) == Prob$Baja[i]) {prediccion[i] = 1}
else
{if (max(Prob$Baja[i],Prob$Media[i], Prob$Alta[i]) == Prob$Media[i]) {prediccion[i] = 2}
else
{prediccion[i] = 3
}}}
prediccion <- factor(prediccion,
levels = 1:3,
labels = c("Baja","Media","Alta"))
matriz_confusion <- table(db$Velocidad, prediccion,
dnn = c("observaciones", "predicciones"))
matriz_confusion
db$Velocidad <- (ifelse((db$V_promedio < 20), 1,
ifelse((db$V_promedio < 33), 2,3)))
db$Velocidad <- factor(db$Velocidad,
levels = 1:3,
labels = c("Baja","Media","Alta"))
db$Velocidad <- ordered(db$Velocidad, levels = c("Baja","Media","Alta"))
modelo_log <- polr(db$Velocidad ~ db$CONGESTION + db$CLIMA + db$Semaforos +
db$HORAS_TRABAJO + db$HPICOHVALLE + db$Experiencia + db$MERIDIANO,
method = "probit", data = db)
summary(modelo_log)
# Probabilidades estimadas
Prob <- data.frame(db$Velocidad, db$CONGESTION, db$CLIMA, db$Semaforos,
db$HORAS_TRABAJO, db$HPICOHVALLE, db$Experiencia,
db$MERIDIANO, fitted.values(modelo_log))
Tabla <- data.frame(db$Velocidad, Prob$Baja, Prob$Media, Prob$Alta)
Tabla
prediccion = array()
for (i in 1:nrow(db)){
if (max(Prob$Baja[i],Prob$Media[i], Prob$Alta[i]) == Prob$Baja[i]) {prediccion[i] = 1}
else
{if (max(Prob$Baja[i],Prob$Media[i], Prob$Alta[i]) == Prob$Media[i]) {prediccion[i] = 2}
else
{prediccion[i] = 3
}}}
prediccion <- factor(prediccion,
levels = 1:3,
labels = c("Baja","Media","Alta"))
matriz_confusion <- table(db$Velocidad, prediccion,
dnn = c("observaciones", "predicciones"))
matriz_confusion
db$Velocidad <- (ifelse((db$V_promedio < 20), 1,
ifelse((db$V_promedio < 32), 2,3)))
db$Velocidad <- factor(db$Velocidad,
levels = 1:3,
labels = c("Baja","Media","Alta"))
db$Velocidad <- ordered(db$Velocidad, levels = c("Baja","Media","Alta"))
db$CONGESTION <-ordered(db$CONGESTION)
modelo_log <- polr(db$Velocidad ~ db$CONGESTION + db$CLIMA + db$Semaforos +
db$HORAS_TRABAJO + db$HPICOHVALLE + db$Experiencia + db$MERIDIANO,
method = "probit", data = db)
summary(modelo_log)
# Probabilidades estimadas
Prob <- data.frame(db$Velocidad, db$CONGESTION, db$CLIMA, db$Semaforos,
db$HORAS_TRABAJO, db$HPICOHVALLE, db$Experiencia,
db$MERIDIANO, fitted.values(modelo_log))
Tabla <- data.frame(db$Velocidad, Prob$Baja, Prob$Media, Prob$Alta)
Tabla
prediccion = array()
for (i in 1:nrow(db)){
if (max(Prob$Baja[i],Prob$Media[i], Prob$Alta[i]) == Prob$Baja[i]) {prediccion[i] = 1}
else
{if (max(Prob$Baja[i],Prob$Media[i], Prob$Alta[i]) == Prob$Media[i]) {prediccion[i] = 2}
else
{prediccion[i] = 3
}}}
prediccion <- factor(prediccion,
levels = 1:3,
labels = c("Baja","Media","Alta"))
matriz_confusion <- table(db$Velocidad, prediccion,
dnn = c("observaciones", "predicciones"))
matriz_confusion
## Intervalos de confianza
confint(modelo_log)
# En caso de querer los intervalos basados en el error estándar.
confint.default(modelo_log)
predict(modelo_log, db, type = "p")
addterm(modelo_log, ~.^2, test = "Chisq")
modelo_log2 <- stepAIC(modelo_log, ~.^2)
modelo_log2$anova
anova(modelo_log, modelo_log2)
modelo_log <- update(modelo_log, Hess=TRUE)
pr <- profile(modelo_log)
confint(pr)
plot(pr)
pairs(pr)
tidy(modelo_log, exponentiate = TRUE, conf.int = TRUE)
glance(modelo_log)
library(MASS)
tidy(modelo_log, p.values = TRUE)
# p-value
p_value <- pchisq(deviance(modelo_log),df.residual(modelo_log))
paste("p-value:", round(p_value, 4))
