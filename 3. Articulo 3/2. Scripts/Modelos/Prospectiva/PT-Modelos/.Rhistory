else {database$P_Alt2[i] <- 0.2}}}}
else {if (database$T_Alt_4[i] > database$T_Alt_2[i]+3*sigma)
{database$P_Alt2[i] <- 0.05}
else {if (database$T_Alt_4[i] > database$T_Alt_2[i]+2*sigma)
{database$P_Alt2[i] <- 0.1}
else {if (database$T_Alt_4[i] > database$T_Alt_2[i]+sigma)
{database$P_Alt2[i] <- 0.15}
else {database$P_Alt2[i] <- 0.2}}}}
## Probabilidad Alt_3
if (database$T_Alt_4[i] < database$T_Alt_3[i])
{if (database$T_Alt_4[i] < database$T_Alt_3[i]-3*sigma)
{database$P_Alt3[i] <- 0.05}
else {if (database$T_Alt_4[i] < database$T_Alt_3[i]-2*sigma)
{database$P_Alt3[i] <- 0.1}
else {if (database$T_Alt_4[i] < database$T_Alt_3[i]-sigma)
{database$P_Alt3[i] <- 0.15}
else {database$P_Alt3[i] <- 0.2}}}}
else {if (database$T_Alt_4[i] > database$T_Alt_3[i]+3*sigma)
{database$P_Alt3[i] <- 0.05}
else {if (database$T_Alt_4[i] > database$T_Alt_3[i]+2*sigma)
{database$P_Alt3[i] <- 0.1}
else {if (database$T_Alt_4[i] > database$T_Alt_3[i]+sigma)
{database$P_Alt3[i] <- 0.15}
else {database$P_Alt3[i] <- 0.2}}}}
## Probabilidad Alt_4
if (database$T_Alt_4[i] < database$T_fl_Alt4[i])
{if (database$T_Alt_4[i] < database$T_fl_Alt4[i]-3*sigma)
{database$P_Alt4[i] <- 0.05}
else {if (database$T_Alt_4[i] < database$T_fl_Alt4[i]-2*sigma)
{database$P_Alt4[i] <- 0.1}
else {if (database$T_Alt_4[i] < database$T_fl_Alt4[i]-sigma)
{database$P_Alt4[i] <- 0.15}
else {database$P_Alt4[i] <- 0.2}}}}
else {if (database$T_Alt_4[i] > database$T_fl_Alt4[i]+3*sigma)
{database$P_Alt4[i] <- 0.05}
else {if (database$T_Alt_4[i] > database$T_fl_Alt4[i]+2*sigma)
{database$P_Alt4[i] <- 0.1}
else {if (database$T_Alt_4[i] > database$T_fl_Alt4[i]+sigma)
{database$P_Alt4[i] <- 0.15}
else {database$P_Alt4[i] <- 0.2}}}}
}
for (i in 1:nrow(database)){
# Pi_Alt_1
if (database$T_Alt_4[i] < database$T_Alt_1[i])
{if (database$P_Alt1[i] == 0.05)
{database$Pi_Alt1[i] = ((0.05)**gamma)/((0.05**gamma+(1-0.05)**gamma)**(1/gamma))}
if (database$P_Alt1[i] == 0.1)
{database$Pi_Alt1[i] = ((0.15)**gamma)/((0.15**gamma+(1-0.15)**gamma)**(1/gamma)) - ((0.05)**gamma)/((0.05**gamma+(1-0.05)**gamma)**(1/gamma))}
if (database$P_Alt1[i] == 0.15)
{database$Pi_Alt1[i] = ((0.30)**gamma)/((0.30**gamma+(1-0.30)**gamma)**(1/gamma)) - ((0.15)**gamma)/((0.15**gamma+(1-0.15)**gamma)**(1/gamma))}
if (database$P_Alt1[i] == 0.2)
{database$Pi_Alt1[i] = ((0.5)**gamma)/((0.5**gamma+(1-0.5)**gamma)**(1/gamma)) - ((0.30)**gamma)/((0.30**gamma+(1-0.30)**gamma)**(1/gamma))}}
else {if (database$P_Alt1[i] == 0.05)
{database$Pi_Alt1[i] = ((0.05)**delta)/((0.05**delta+(1-0.05)**delta)**(1/delta))}
if (database$P_Alt1[i] == 0.1)
{database$Pi_Alt1[i] = ((0.15)**delta)/((0.15**delta+(1-0.15)**delta)**(1/delta)) - ((0.05)**delta)/((0.05**delta+(1-0.05)**delta)**(1/delta))}
if (database$P_Alt1[i] == 0.15)
{database$Pi_Alt1[i] = ((0.30)**delta)/((0.30**delta+(1-0.30)**delta)**(1/delta)) - ((0.15)**delta)/((0.15**delta+(1-0.15)**delta)**(1/delta))}
if (database$P_Alt1[i] == 0.2)
{database$Pi_Alt1[i] = ((0.5)**delta)/((0.5**delta+(1-0.5)**delta)**(1/delta)) - ((0.30)**delta)/((0.30**delta+(1-0.30)**delta)**(1/delta))}}
## Pi_Alt_2
if (database$T_Alt_4[i] < database$T_Alt_2[i])
{if (database$P_Alt2[i] == 0.05)
{database$Pi_Alt2[i] = ((0.05)**gamma)/((0.05**gamma+(1-0.05)**gamma)**(1/gamma))}
if (database$P_Alt2[i] == 0.1)
{database$Pi_Alt2[i] = ((0.15)**gamma)/((0.15**gamma+(1-0.15)**gamma)**(1/gamma)) - ((0.05)**gamma)/((0.05**gamma+(1-0.05)**gamma)**(1/gamma))}
if (database$P_Alt2[i] == 0.15)
{database$Pi_Alt2[i] = ((0.30)**gamma)/((0.30**gamma+(1-0.30)**gamma)**(1/gamma)) - ((0.15)**gamma)/((0.15**gamma+(1-0.15)**gamma)**(1/gamma))}
if (database$P_Alt2[i] == 0.2)
{database$Pi_Alt2[i] = ((0.5)**gamma)/((0.5**gamma+(1-0.5)**gamma)**(1/gamma)) - ((0.30)**gamma)/((0.30**gamma+(1-0.30)**gamma)**(1/gamma))}}
else {if (database$P_Alt2[i] == 0.05)
{database$Pi_Alt2[i] = ((0.05)**delta)/((0.05**delta+(1-0.05)**delta)**(1/delta))}
if (database$P_Alt2[i] == 0.1)
{database$Pi_Alt2[i] = ((0.15)**delta)/((0.15**delta+(1-0.15)**delta)**(1/delta)) - ((0.05)**delta)/((0.05**delta+(1-0.05)**delta)**(1/delta))}
if (database$P_Alt2[i] == 0.15)
{database$Pi_Alt2[i] = ((0.30)**delta)/((0.30**delta+(1-0.30)**delta)**(1/delta)) - ((0.15)**delta)/((0.15**delta+(1-0.15)**delta)**(1/delta))}
if (database$P_Alt2[i] == 0.2)
{database$Pi_Alt2[i] = ((0.5)**delta)/((0.5**delta+(1-0.5)**delta)**(1/delta)) - ((0.30)**delta)/((0.30**delta+(1-0.30)**delta)**(1/delta))}}
## Pi_Alt_3
if (database$T_Alt_4[i] < database$T_Alt_3[i])
{if (database$P_Alt3[i] == 0.05)
{database$Pi_Alt3[i] = ((0.05)**gamma)/((0.05**gamma+(1-0.05)**gamma)**(1/gamma))}
if (database$P_Alt3[i] == 0.1)
{database$Pi_Alt3[i] = ((0.15)**gamma)/((0.15**gamma+(1-0.15)**gamma)**(1/gamma)) - ((0.05)**gamma)/((0.05**gamma+(1-0.05)**gamma)**(1/gamma))}
if (database$P_Alt3[i] == 0.15)
{database$Pi_Alt3[i] = ((0.30)**gamma)/((0.30**gamma+(1-0.30)**gamma)**(1/gamma)) - ((0.15)**gamma)/((0.15**gamma+(1-0.15)**gamma)**(1/gamma))}
if (database$P_Alt3[i] == 0.2)
{database$Pi_Alt3[i] = ((0.5)**gamma)/((0.5**gamma+(1-0.5)**gamma)**(1/gamma)) - ((0.30)**gamma)/((0.30**gamma+(1-0.30)**gamma)**(1/gamma))}}
else {if (database$P_Alt3[i] == 0.05)
{database$Pi_Alt3[i] = ((0.05)**delta)/((0.05**delta+(1-0.05)**delta)**(1/delta))}
if (database$P_Alt3[i] == 0.1)
{database$Pi_Alt3[i] = ((0.15)**delta)/((0.15**delta+(1-0.15)**delta)**(1/delta)) - ((0.05)**delta)/((0.05**delta+(1-0.05)**delta)**(1/delta))}
if (database$P_Alt3[i] == 0.15)
{database$Pi_Alt3[i] = ((0.30)**delta)/((0.30**delta+(1-0.30)**delta)**(1/delta)) - ((0.15)**delta)/((0.15**delta+(1-0.15)**delta)**(1/delta))}
if (database$P_Alt3[i] == 0.2)
{database$Pi_Alt3[i] = ((0.5)**delta)/((0.5**delta+(1-0.5)**delta)**(1/delta)) - ((0.30)**delta)/((0.30**delta+(1-0.30)**delta)**(1/delta))}}
## Pi_Alt_4
if (database$T_Alt_4[i] < database$T_fl_Alt4[i])
{if (database$P_Alt4[i] == 0.05)
{database$Pi_Alt4[i] = ((0.05)**gamma)/((0.05**gamma+(1-0.05)**gamma)**(1/gamma))}
if (database$P_Alt4[i] == 0.1)
{database$Pi_Alt4[i] = ((0.15)**gamma)/((0.15**gamma+(1-0.15)**gamma)**(1/gamma)) - ((0.05)**gamma)/((0.05**gamma+(1-0.05)**gamma)**(1/gamma))}
if (database$P_Alt4[i] == 0.15)
{database$Pi_Alt4[i] = ((0.30)**gamma)/((0.30**gamma+(1-0.30)**gamma)**(1/gamma)) - ((0.15)**gamma)/((0.15**gamma+(1-0.15)**gamma)**(1/gamma))}
if (database$P_Alt4[i] == 0.2)
{database$Pi_Alt4[i] = ((0.5)**gamma)/((0.5**gamma+(1-0.5)**gamma)**(1/gamma)) - ((0.30)**gamma)/((0.30**gamma+(1-0.30)**gamma)**(1/gamma))}}
else {if (database$P_Alt4[i] == 0.05)
{database$Pi_Alt4[i] = ((0.05)**delta)/((0.05**delta+(1-0.05)**delta)**(1/delta))}
if (database$P_Alt4[i] == 0.1)
{database$Pi_Alt4[i] = ((0.15)**delta)/((0.15**delta+(1-0.15)**delta)**(1/delta)) - ((0.05)**delta)/((0.05**delta+(1-0.05)**delta)**(1/delta))}
if (database$P_Alt4[i] == 0.15)
{database$Pi_Alt4[i] = ((0.30)**delta)/((0.30**delta+(1-0.30)**delta)**(1/delta)) - ((0.15)**delta)/((0.15**delta+(1-0.15)**delta)**(1/delta))}
if (database$P_Alt4[i] == 0.2)
{database$Pi_Alt4[i] = ((0.5)**delta)/((0.5**delta+(1-0.5)**delta)**(1/delta)) - ((0.30)**delta)/((0.30**delta+(1-0.30)**delta)**(1/delta))}}
}
database$UsoCel_Poco <- (ifelse((database$UsoCel == 1), 1,0))
#database$UsoCel_AlgVec <- (ifelse((database$UsoCel == 3 ), 1,0))
database$UsoCel_Frec <- (ifelse((database$UsoCel > 1 ), 1,0))
### Vector de parametros, incluidos los que se mantienen fijos en la estimación
apollo_beta=c(asc_ruta1   = 1, asc_ruta2   = 1, asc_ruta3   = 0, asc_ruta4 = 1,
b_gain  = 0,  b_loss = 0,
b_dt  = 0,
#b_Cong  = 0, #b_CongCD  = 0, b_CongEF  = 0,
b_Sem = 0,
b_ACC_0 = 0, b_ACC_1 = 0, b_ACC_2 = 0,
b_NO_CAMFD = 0, b_SI_CAMFD = 0,
b_NO_PANEL = 0, b_SI_PANEL = 0,
b_NO_ZER = 0, b_SI_ZER = 0,
b_No_MTRP = 0, b_Si_MTRP = 0,
b_No_Info = 0, b_Si_Info = 0,
b_UsoCel_P = 0, #b_UsoCel_A = 0,
b_UsoCel_F = 0)
### Vector con nombres (entre comillas) de los parámetros que se mantendrán fijos en su valor inicial en apollo_beta, use apollo_beta_fixed = c () si ninguno
apollo_fixed = c("asc_ruta3", "b_ACC_0", "b_NO_CAMFD","b_NO_PANEL" ,"b_No_MTRP", "b_NO_ZER",
"b_Si_Info", "b_UsoCel_P")
apollo_inputs = apollo_validateInputs()
apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){
### Attach inputs and detach after function exit
apollo_attach(apollo_beta, apollo_inputs)
on.exit(apollo_detach(apollo_beta, apollo_inputs))
### Crear una lista de probabilidades P
P = list()
### List of utilities: these must use the same names as in mnl_settings, order is irrelevant
V = list()
V[['ruta1']]  = asc_ruta1  + b_gain*(VP1) - b_loss*(VN1) + b_dt * D_Alt_1 +
b_Sem*SEM_A1_km +
b_ACC_0*ACC_A1_0 + b_ACC_1*ACC_A1_1 + b_ACC_2*ACC_A1_2 +
b_NO_CAMFD * NO_CAMFD_A1 + b_SI_CAMFD * SI_CAMFD_A1 +
b_NO_PANEL * NO_PANEL_A1 + b_SI_PANEL * SI_PANEL_A1 +
b_NO_ZER * NO_ZER_A1 + b_SI_ZER * SI_ZER_A1 +
b_No_MTRP * NO_MTRP_A1 + b_Si_MTRP * SI_MTRP_A1
V[['ruta2']]  = asc_ruta2  + b_gain*(VP2) - b_loss*(VN2) + b_dt * D_Alt_2 +
b_Sem*SEM_A2_km +
b_ACC_0*ACC_A2_0 + b_ACC_1*ACC_A2_1 + b_ACC_2*ACC_A2_2 +
b_NO_CAMFD * NO_CAMFD_A2 + b_SI_CAMFD * SI_CAMFD_A2 +
b_NO_PANEL * NO_PANEL_A2 + b_SI_PANEL * SI_PANEL_A2 +
b_NO_ZER * NO_ZER_A2 + b_SI_ZER * SI_ZER_A2 +
b_No_MTRP * NO_MTRP_A2 + b_Si_MTRP * SI_MTRP_A2
V[['ruta3']]  = asc_ruta3  + b_gain*(VP3) - b_loss*(VN3) + b_dt * D_Alt_3 +
b_Sem*SEM_A3_km +
b_ACC_0*ACC_A3_0 + b_ACC_1*ACC_A3_1 + b_ACC_2*ACC_A3_2 +
b_NO_CAMFD * NO_CAMFD_A3 + b_SI_CAMFD * SI_CAMFD_A3 +
b_NO_PANEL * NO_PANEL_A3 + b_SI_PANEL * SI_PANEL_A3 +
b_NO_ZER * NO_ZER_A3 + b_SI_ZER * SI_ZER_A3 +
b_No_MTRP * NO_MTRP_A3 + b_Si_MTRP * SI_MTRP_A3
V[['rutaEC']] =  asc_ruta4 + b_gain*(VP4) - b_loss*(VN4) + b_dt * D_Alt_4 +
b_Sem*SEM_EC_km +
b_ACC_0*ACC_EC_0 + b_ACC_1*ACC_EC_1 + b_ACC_2*ACC_EC_2 +
b_NO_PANEL * NO_PANEL_EC + b_SI_PANEL * SI_PANEL_EC +
b_NO_ZER * NO_ZER_EC + b_SI_ZER * SI_ZER_EC +
b_No_MTRP * NO_MTRP_EC + b_Si_MTRP * SI_MTRP_EC +
b_No_Info * SININFOTRF + b_Si_Info * CONINFOTRF +
b_UsoCel_P * UsoCel_Poco +  b_UsoCel_F * UsoCel_Frec
### Define settings for MNL model component
mnl_settings = list(
alternatives  = c(ruta1=1, ruta2=2, ruta3=3, rutaEC=4),
avail         = list(ruta1=1, ruta2=1, ruta3=1, rutaEC=1),
choiceVar     = CHOICE,
V             = V
)
### Compute probabilities using MNL model
P[['model']] = apollo_mnl(mnl_settings, functionality)
### Take product across observation for same individual
#P = apollo_panelProd(P, apollo_inputs, functionality)
### Prepare and return outputs of function
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
model = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)
apollo_modelOutput(model, modelOutput_settings=list(printPVal=TRUE) )
apollo_saveOutput(model, saveOutput_settings=list(printPVal=TRUE) )
#install.packages("apollo")
### Clear memory
#library(dplyr)
rm(list = ls())
workingDirectory="/Users/williz/Desktop/ModelosED/3. Articulo 3/2. Scripts/Modelos/Prospectiva/PT-Modelos"
setwd(workingDirectory)
### Load Apollo library
library(apollo)
### Initialise code
apollo_initialise()
## Establecer controles principales
apollo_control = list(
modelName  = "Prospective Simple",
modelDescr = "Modelos Prospectivo en Eleccion de Ruta",
indivID    = "ViajeId"
)
Muestra = read.csv("/Users/williz/Desktop/ModelosED/3. Articulo 3/3. Database/DBMuestraArt3.csv",sep="\t", dec=".",header=TRUE)
database <- Muestra %>%
# Filtrar viajes Eliminados en la primera revisión
filter(!(MUESTRA %in% c("0")))
alpha = 0.72
beta  = 0.74
lamda = 3.2
sigma = 0
gamma = 0.61
delta = 0.69
theta = 0
# Normalización de las variables tiempo
for (i in 1:nrow(database)){
database$T_Alt_1[i] = (database$TIEMPOAlt1[i]- (min(c(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-3)))/(max(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-(min(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-3))
database$T_Alt_2[i] = (database$TIEMPOAlt2[i]- (min(c(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-3)))/(max(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-(min(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-3))
database$T_Alt_3[i] = (database$TIEMPOAlt3[i]- (min(c(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-3)))/(max(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-(min(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-3))
database$T_Alt_4[i] = (database$TIEMPOEC[i]- (min(c(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-3)))/(max(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-(min(database$TIEMPOAlt1[i],database$TIEMPOAlt2[i],database$TIEMPOAlt3[i],database$TIEMPOEC[i])-3))
# Normalización de la variable distancia
database$D_Alt_1[i] = (database$DISTAlt1[i]- (min(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i])-0.1)))/(max(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i]))-(min(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i])-0.1)))
database$D_Alt_2[i] = (database$DISTAlt2[i]- (min(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i])-0.1)))/(max(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i]))-(min(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i])-0.1)))
database$D_Alt_3[i] = (database$DISTAlt3[i]- (min(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i])-0-1)))/(max(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i]))-(min(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i])-0.1)))
database$D_Alt_4[i] = (database$DISTEC[i]- (min(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i])-0.1)))/(max(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i]))-(min(c(database$DISTAlt1[i],database$DISTAlt2[i],database$DISTAlt3[i],database$DISTEC[i])-0.1)))
if(database$HPICOHVALLE[i] == 1){
database$Vel_fl_Alt1[i] = 28/60;
database$Vel_fl_Alt2[i] = 28/60;
database$Vel_fl_Alt3[i] = 28/60;
database$Vel_fl_Alt4[i] = 28/60}
else{database$Vel_fl_Alt1[i] = 22/60;
database$Vel_fl_Alt2[i] = 22/60;
database$Vel_fl_Alt3[i]= 22/60;
database$Vel_fl_Alt4[i]= 22/60}
database$T_fl_Alt1[i] = database$D_Alt_1[i]/database$Vel_fl_Alt1[i]
database$T_fl_Alt2[i] = database$D_Alt_2[i]/database$Vel_fl_Alt2[i]
database$T_fl_Alt3[i] = database$D_Alt_3[i]/database$Vel_fl_Alt3[i]
database$T_fl_Alt4[i] = database$D_Alt_4[i]/database$Vel_fl_Alt4[i]
database$CG_Alt_1[i] = database$TIEMPOAlt1[i]/database$T_fl_Alt1[i]
database$CG_Alt_2[i] = database$TIEMPOAlt2[i]/database$T_fl_Alt2[i]
database$CG_Alt_3[i] = database$TIEMPOAlt3[i]/database$T_fl_Alt3[i]
database$CG_Alt_4[i] = database$TIEMPOEC[i]/database$T_fl_Alt4[i]
}
for (i in 1:nrow(database)){
database$DT1[i] <- database$T_Alt_1[i] - database$T_fl_Alt1[i]
#database$DT1[i] <- database$T_Alt_4[i] - database$T_Alt_1[i]
if(database$DT1[i] > sigma)
{database$VN1[i] <- -lamda*(database$DT1[i])**beta}
else
{database$VN1[i]<- 0}
if(database$DT1[i] < -sigma)
{database$VP1[i] <- (-database$DT1[i])**alpha}
else
{database$VP1[i]<- 0}
if (abs(database$DT1[i]) <= sigma)
{database$VP1[i] <- 0; database$VN1[i]<- 0}
database$DT2[i] <- database$T_Alt_2[i] - database$T_fl_Alt2[i]
#database$DT2[i] <- database$T_Alt_4[i]- database$T_Alt_2[i]
if(database$DT2[i] > sigma)
{database$VN2[i] <- -lamda*(database$DT2[i])**beta}
else
{database$VN2[i]<- 0}
if(database$DT2[i] < -sigma)
{database$VP2[i] <- (-database$DT2[i])**alpha}
else
{database$VP2[i]<- 0}
if (abs(database$DT2[i]) <= sigma)
{database$VP2[i] <- 0; database$VN2[i]<- 0}
database$DT3[i] <- database$T_Alt_3[i] - database$T_fl_Alt3[i]
#database$DT3[i] <- database$T_Alt_4[i] - database$T_Alt_3[i]
if(database$DT3[i] > sigma)
{database$VN3[i] <- -lamda*(database$DT3[i])**beta}
else
{database$VN3[i]<- 0}
if(database$DT3[i] < -sigma)
{database$VP3[i] <- (-database$DT3[i])**alpha}
else
{database$VP3[i]<- 0}
if (abs(database$DT3[i]) <= sigma)
{database$VP3[i] <- 0; database$VN3[i]<- 0}
database$DT4[i] <- database$T_Alt_4[i] - database$T_fl_Alt4[i]
if(database$DT4[i] > sigma + theta)
{database$VN4[i] <- -lamda*(database$DT4[i])**beta}
else
{database$VN4[i]<- 0}
if(database$DT4[i] < -sigma )
{database$VP4[i] <- (-database$DT4[i])**alpha}
else
{database$VP4[i]<- 0}
if (abs(database$DT4[i]) <= sigma)
{database$VP4[i] <- 0; database$VN4[i]<- 0}
}
for (i in 1:nrow(database)){
## Probabilidad Alt_1
if (database$T_Alt_4[i] < database$T_Alt_1[i])
{if (database$T_Alt_4[i] < database$T_Alt_1[i]-3*sigma)
{database$P_Alt1[i] <- 0.05}
else {if (database$T_Alt_4[i] < database$T_Alt_1[i]-2*sigma)
{database$P_Alt1[i] <- 0.1}
else {if (database$T_Alt_4[i] < database$T_Alt_1[i]-sigma)
{database$P_Alt1[i] <- 0.15}
else {database$P_Alt1[i] <- 0.2}}}}
else {if (database$T_Alt_4[i] > database$T_Alt_1[i]+3*sigma)
{database$P_Alt1[i] <- 0.05}
else {if (database$T_Alt_4[i] > database$T_Alt_1[i]+2*sigma)
{database$P_Alt1[i] <- 0.1}
else {if (database$T_Alt_4[i] > database$T_Alt_1[i]+sigma)
{database$P_Alt1[i] <- 0.15}
else {database$P_Alt1[i] <- 0.2}}}}
## Probabilidad Alt_2
if (database$T_Alt_4[i] < database$T_Alt_2[i])
{if (database$T_Alt_4[i] < database$T_Alt_2[i]-3*sigma)
{database$P_Alt2[i] <- 0.05}
else {if (database$T_Alt_4[i] < database$T_Alt_2[i]-2*sigma)
{database$P_Alt2[i] <- 0.1}
else {if (database$T_Alt_4[i] < database$T_Alt_2[i]-sigma)
{database$P_Alt2[i] <- 0.15}
else {database$P_Alt2[i] <- 0.2}}}}
else {if (database$T_Alt_4[i] > database$T_Alt_2[i]+3*sigma)
{database$P_Alt2[i] <- 0.05}
else {if (database$T_Alt_4[i] > database$T_Alt_2[i]+2*sigma)
{database$P_Alt2[i] <- 0.1}
else {if (database$T_Alt_4[i] > database$T_Alt_2[i]+sigma)
{database$P_Alt2[i] <- 0.15}
else {database$P_Alt2[i] <- 0.2}}}}
## Probabilidad Alt_3
if (database$T_Alt_4[i] < database$T_Alt_3[i])
{if (database$T_Alt_4[i] < database$T_Alt_3[i]-3*sigma)
{database$P_Alt3[i] <- 0.05}
else {if (database$T_Alt_4[i] < database$T_Alt_3[i]-2*sigma)
{database$P_Alt3[i] <- 0.1}
else {if (database$T_Alt_4[i] < database$T_Alt_3[i]-sigma)
{database$P_Alt3[i] <- 0.15}
else {database$P_Alt3[i] <- 0.2}}}}
else {if (database$T_Alt_4[i] > database$T_Alt_3[i]+3*sigma)
{database$P_Alt3[i] <- 0.05}
else {if (database$T_Alt_4[i] > database$T_Alt_3[i]+2*sigma)
{database$P_Alt3[i] <- 0.1}
else {if (database$T_Alt_4[i] > database$T_Alt_3[i]+sigma)
{database$P_Alt3[i] <- 0.15}
else {database$P_Alt3[i] <- 0.2}}}}
## Probabilidad Alt_4
if (database$T_Alt_4[i] < database$T_fl_Alt4[i])
{if (database$T_Alt_4[i] < database$T_fl_Alt4[i]-3*sigma)
{database$P_Alt4[i] <- 0.05}
else {if (database$T_Alt_4[i] < database$T_fl_Alt4[i]-2*sigma)
{database$P_Alt4[i] <- 0.1}
else {if (database$T_Alt_4[i] < database$T_fl_Alt4[i]-sigma)
{database$P_Alt4[i] <- 0.15}
else {database$P_Alt4[i] <- 0.2}}}}
else {if (database$T_Alt_4[i] > database$T_fl_Alt4[i]+3*sigma)
{database$P_Alt4[i] <- 0.05}
else {if (database$T_Alt_4[i] > database$T_fl_Alt4[i]+2*sigma)
{database$P_Alt4[i] <- 0.1}
else {if (database$T_Alt_4[i] > database$T_fl_Alt4[i]+sigma)
{database$P_Alt4[i] <- 0.15}
else {database$P_Alt4[i] <- 0.2}}}}
}
for (i in 1:nrow(database)){
# Pi_Alt_1
if (database$T_Alt_4[i] < database$T_Alt_1[i])
{if (database$P_Alt1[i] == 0.05)
{database$Pi_Alt1[i] = ((0.05)**gamma)/((0.05**gamma+(1-0.05)**gamma)**(1/gamma))}
if (database$P_Alt1[i] == 0.1)
{database$Pi_Alt1[i] = ((0.15)**gamma)/((0.15**gamma+(1-0.15)**gamma)**(1/gamma)) - ((0.05)**gamma)/((0.05**gamma+(1-0.05)**gamma)**(1/gamma))}
if (database$P_Alt1[i] == 0.15)
{database$Pi_Alt1[i] = ((0.30)**gamma)/((0.30**gamma+(1-0.30)**gamma)**(1/gamma)) - ((0.15)**gamma)/((0.15**gamma+(1-0.15)**gamma)**(1/gamma))}
if (database$P_Alt1[i] == 0.2)
{database$Pi_Alt1[i] = ((0.5)**gamma)/((0.5**gamma+(1-0.5)**gamma)**(1/gamma)) - ((0.30)**gamma)/((0.30**gamma+(1-0.30)**gamma)**(1/gamma))}}
else {if (database$P_Alt1[i] == 0.05)
{database$Pi_Alt1[i] = ((0.05)**delta)/((0.05**delta+(1-0.05)**delta)**(1/delta))}
if (database$P_Alt1[i] == 0.1)
{database$Pi_Alt1[i] = ((0.15)**delta)/((0.15**delta+(1-0.15)**delta)**(1/delta)) - ((0.05)**delta)/((0.05**delta+(1-0.05)**delta)**(1/delta))}
if (database$P_Alt1[i] == 0.15)
{database$Pi_Alt1[i] = ((0.30)**delta)/((0.30**delta+(1-0.30)**delta)**(1/delta)) - ((0.15)**delta)/((0.15**delta+(1-0.15)**delta)**(1/delta))}
if (database$P_Alt1[i] == 0.2)
{database$Pi_Alt1[i] = ((0.5)**delta)/((0.5**delta+(1-0.5)**delta)**(1/delta)) - ((0.30)**delta)/((0.30**delta+(1-0.30)**delta)**(1/delta))}}
## Pi_Alt_2
if (database$T_Alt_4[i] < database$T_Alt_2[i])
{if (database$P_Alt2[i] == 0.05)
{database$Pi_Alt2[i] = ((0.05)**gamma)/((0.05**gamma+(1-0.05)**gamma)**(1/gamma))}
if (database$P_Alt2[i] == 0.1)
{database$Pi_Alt2[i] = ((0.15)**gamma)/((0.15**gamma+(1-0.15)**gamma)**(1/gamma)) - ((0.05)**gamma)/((0.05**gamma+(1-0.05)**gamma)**(1/gamma))}
if (database$P_Alt2[i] == 0.15)
{database$Pi_Alt2[i] = ((0.30)**gamma)/((0.30**gamma+(1-0.30)**gamma)**(1/gamma)) - ((0.15)**gamma)/((0.15**gamma+(1-0.15)**gamma)**(1/gamma))}
if (database$P_Alt2[i] == 0.2)
{database$Pi_Alt2[i] = ((0.5)**gamma)/((0.5**gamma+(1-0.5)**gamma)**(1/gamma)) - ((0.30)**gamma)/((0.30**gamma+(1-0.30)**gamma)**(1/gamma))}}
else {if (database$P_Alt2[i] == 0.05)
{database$Pi_Alt2[i] = ((0.05)**delta)/((0.05**delta+(1-0.05)**delta)**(1/delta))}
if (database$P_Alt2[i] == 0.1)
{database$Pi_Alt2[i] = ((0.15)**delta)/((0.15**delta+(1-0.15)**delta)**(1/delta)) - ((0.05)**delta)/((0.05**delta+(1-0.05)**delta)**(1/delta))}
if (database$P_Alt2[i] == 0.15)
{database$Pi_Alt2[i] = ((0.30)**delta)/((0.30**delta+(1-0.30)**delta)**(1/delta)) - ((0.15)**delta)/((0.15**delta+(1-0.15)**delta)**(1/delta))}
if (database$P_Alt2[i] == 0.2)
{database$Pi_Alt2[i] = ((0.5)**delta)/((0.5**delta+(1-0.5)**delta)**(1/delta)) - ((0.30)**delta)/((0.30**delta+(1-0.30)**delta)**(1/delta))}}
## Pi_Alt_3
if (database$T_Alt_4[i] < database$T_Alt_3[i])
{if (database$P_Alt3[i] == 0.05)
{database$Pi_Alt3[i] = ((0.05)**gamma)/((0.05**gamma+(1-0.05)**gamma)**(1/gamma))}
if (database$P_Alt3[i] == 0.1)
{database$Pi_Alt3[i] = ((0.15)**gamma)/((0.15**gamma+(1-0.15)**gamma)**(1/gamma)) - ((0.05)**gamma)/((0.05**gamma+(1-0.05)**gamma)**(1/gamma))}
if (database$P_Alt3[i] == 0.15)
{database$Pi_Alt3[i] = ((0.30)**gamma)/((0.30**gamma+(1-0.30)**gamma)**(1/gamma)) - ((0.15)**gamma)/((0.15**gamma+(1-0.15)**gamma)**(1/gamma))}
if (database$P_Alt3[i] == 0.2)
{database$Pi_Alt3[i] = ((0.5)**gamma)/((0.5**gamma+(1-0.5)**gamma)**(1/gamma)) - ((0.30)**gamma)/((0.30**gamma+(1-0.30)**gamma)**(1/gamma))}}
else {if (database$P_Alt3[i] == 0.05)
{database$Pi_Alt3[i] = ((0.05)**delta)/((0.05**delta+(1-0.05)**delta)**(1/delta))}
if (database$P_Alt3[i] == 0.1)
{database$Pi_Alt3[i] = ((0.15)**delta)/((0.15**delta+(1-0.15)**delta)**(1/delta)) - ((0.05)**delta)/((0.05**delta+(1-0.05)**delta)**(1/delta))}
if (database$P_Alt3[i] == 0.15)
{database$Pi_Alt3[i] = ((0.30)**delta)/((0.30**delta+(1-0.30)**delta)**(1/delta)) - ((0.15)**delta)/((0.15**delta+(1-0.15)**delta)**(1/delta))}
if (database$P_Alt3[i] == 0.2)
{database$Pi_Alt3[i] = ((0.5)**delta)/((0.5**delta+(1-0.5)**delta)**(1/delta)) - ((0.30)**delta)/((0.30**delta+(1-0.30)**delta)**(1/delta))}}
## Pi_Alt_4
if (database$T_Alt_4[i] < database$T_fl_Alt4[i])
{if (database$P_Alt4[i] == 0.05)
{database$Pi_Alt4[i] = ((0.05)**gamma)/((0.05**gamma+(1-0.05)**gamma)**(1/gamma))}
if (database$P_Alt4[i] == 0.1)
{database$Pi_Alt4[i] = ((0.15)**gamma)/((0.15**gamma+(1-0.15)**gamma)**(1/gamma)) - ((0.05)**gamma)/((0.05**gamma+(1-0.05)**gamma)**(1/gamma))}
if (database$P_Alt4[i] == 0.15)
{database$Pi_Alt4[i] = ((0.30)**gamma)/((0.30**gamma+(1-0.30)**gamma)**(1/gamma)) - ((0.15)**gamma)/((0.15**gamma+(1-0.15)**gamma)**(1/gamma))}
if (database$P_Alt4[i] == 0.2)
{database$Pi_Alt4[i] = ((0.5)**gamma)/((0.5**gamma+(1-0.5)**gamma)**(1/gamma)) - ((0.30)**gamma)/((0.30**gamma+(1-0.30)**gamma)**(1/gamma))}}
else {if (database$P_Alt4[i] == 0.05)
{database$Pi_Alt4[i] = ((0.05)**delta)/((0.05**delta+(1-0.05)**delta)**(1/delta))}
if (database$P_Alt4[i] == 0.1)
{database$Pi_Alt4[i] = ((0.15)**delta)/((0.15**delta+(1-0.15)**delta)**(1/delta)) - ((0.05)**delta)/((0.05**delta+(1-0.05)**delta)**(1/delta))}
if (database$P_Alt4[i] == 0.15)
{database$Pi_Alt4[i] = ((0.30)**delta)/((0.30**delta+(1-0.30)**delta)**(1/delta)) - ((0.15)**delta)/((0.15**delta+(1-0.15)**delta)**(1/delta))}
if (database$P_Alt4[i] == 0.2)
{database$Pi_Alt4[i] = ((0.5)**delta)/((0.5**delta+(1-0.5)**delta)**(1/delta)) - ((0.30)**delta)/((0.30**delta+(1-0.30)**delta)**(1/delta))}}
}
database$UsoCel_Poco <- (ifelse((database$UsoCel == 1), 1,0))
#database$UsoCel_AlgVec <- (ifelse((database$UsoCel == 3 ), 1,0))
database$UsoCel_Frec <- (ifelse((database$UsoCel > 1 ), 1,0))
### Vector de parametros, incluidos los que se mantienen fijos en la estimación
apollo_beta=c(asc_ruta1   = 1, asc_ruta2   = 1, asc_ruta3   = 0, asc_ruta4 = 1,
b_gain  = 0,  b_loss = 0,
b_dt  = 0,
#b_Cong  = 0, #b_CongCD  = 0, b_CongEF  = 0,
b_Sem = 0,
b_ACC_0 = 0, b_ACC_1 = 0, b_ACC_2 = 0,
b_NO_CAMFD = 0, b_SI_CAMFD = 0,
b_NO_PANEL = 0, b_SI_PANEL = 0,
b_NO_ZER = 0, b_SI_ZER = 0,
b_No_MTRP = 0, b_Si_MTRP = 0,
b_No_Info = 0, b_Si_Info = 0,
b_UsoCel_P = 0, #b_UsoCel_A = 0,
b_UsoCel_F = 0)
### Vector con nombres (entre comillas) de los parámetros que se mantendrán fijos en su valor inicial en apollo_beta, use apollo_beta_fixed = c () si ninguno
apollo_fixed = c("asc_ruta3", "b_ACC_0", "b_NO_CAMFD","b_NO_PANEL" ,"b_No_MTRP", "b_NO_ZER",
"b_Si_Info", "b_UsoCel_P")
apollo_inputs = apollo_validateInputs()
apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){
### Attach inputs and detach after function exit
apollo_attach(apollo_beta, apollo_inputs)
on.exit(apollo_detach(apollo_beta, apollo_inputs))
### Crear una lista de probabilidades P
P = list()
### List of utilities: these must use the same names as in mnl_settings, order is irrelevant
V = list()
V[['ruta1']]  = asc_ruta1  + b_gain*(VP1) + b_loss*(VN1) + b_dt * D_Alt_1 +
b_Sem*SEM_A1_km +
b_ACC_0*ACC_A1_0 + b_ACC_1*ACC_A1_1 + b_ACC_2*ACC_A1_2 +
b_NO_CAMFD * NO_CAMFD_A1 + b_SI_CAMFD * SI_CAMFD_A1 +
b_NO_PANEL * NO_PANEL_A1 + b_SI_PANEL * SI_PANEL_A1 +
b_NO_ZER * NO_ZER_A1 + b_SI_ZER * SI_ZER_A1 +
b_No_MTRP * NO_MTRP_A1 + b_Si_MTRP * SI_MTRP_A1
V[['ruta2']]  = asc_ruta2  + b_gain*(VP2) + b_loss*(VN2) + b_dt * D_Alt_2 +
b_Sem*SEM_A2_km +
b_ACC_0*ACC_A2_0 + b_ACC_1*ACC_A2_1 + b_ACC_2*ACC_A2_2 +
b_NO_CAMFD * NO_CAMFD_A2 + b_SI_CAMFD * SI_CAMFD_A2 +
b_NO_PANEL * NO_PANEL_A2 + b_SI_PANEL * SI_PANEL_A2 +
b_NO_ZER * NO_ZER_A2 + b_SI_ZER * SI_ZER_A2 +
b_No_MTRP * NO_MTRP_A2 + b_Si_MTRP * SI_MTRP_A2
V[['ruta3']]  = asc_ruta3  + b_gain*(VP3) + b_loss*(VN3) + b_dt * D_Alt_3 +
b_Sem*SEM_A3_km +
b_ACC_0*ACC_A3_0 + b_ACC_1*ACC_A3_1 + b_ACC_2*ACC_A3_2 +
b_NO_CAMFD * NO_CAMFD_A3 + b_SI_CAMFD * SI_CAMFD_A3 +
b_NO_PANEL * NO_PANEL_A3 + b_SI_PANEL * SI_PANEL_A3 +
b_NO_ZER * NO_ZER_A3 + b_SI_ZER * SI_ZER_A3 +
b_No_MTRP * NO_MTRP_A3 + b_Si_MTRP * SI_MTRP_A3
V[['rutaEC']] =  asc_ruta4 + b_gain*(VP4) + b_loss*(VN4) + b_dt * D_Alt_4 +
b_Sem*SEM_EC_km +
b_ACC_0*ACC_EC_0 + b_ACC_1*ACC_EC_1 + b_ACC_2*ACC_EC_2 +
b_NO_PANEL * NO_PANEL_EC + b_SI_PANEL * SI_PANEL_EC +
b_NO_ZER * NO_ZER_EC + b_SI_ZER * SI_ZER_EC +
b_No_MTRP * NO_MTRP_EC + b_Si_MTRP * SI_MTRP_EC +
b_No_Info * SININFOTRF + b_Si_Info * CONINFOTRF +
b_UsoCel_P * UsoCel_Poco +  b_UsoCel_F * UsoCel_Frec
### Define settings for MNL model component
mnl_settings = list(
alternatives  = c(ruta1=1, ruta2=2, ruta3=3, rutaEC=4),
avail         = list(ruta1=1, ruta2=1, ruta3=1, rutaEC=1),
choiceVar     = CHOICE,
V             = V
)
### Compute probabilities using MNL model
P[['model']] = apollo_mnl(mnl_settings, functionality)
### Take product across observation for same individual
#P = apollo_panelProd(P, apollo_inputs, functionality)
### Prepare and return outputs of function
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
model = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)
apollo_modelOutput(model, modelOutput_settings=list(printPVal=TRUE) )
apollo_saveOutput(model, saveOutput_settings=list(printPVal=TRUE) )
