file="/Users/williz/Desktop/ModelosED/3. Articulo 3/3. Base de datos/DBMuestraArt3_3Rutas.csv", sep="\t", dec=".")
DB_test <- DB %>%
# Filtrar viajes Eliminados en la primera revisión
filter(!(MUESTRA %in% c("1")))
write.table(DB_test,
file="/Users/williz/Desktop/ModelosED/3. Articulo 3/3. Base de datos/DBValidacion_3Rutas.csv", sep="\t", dec=".")
### Limpiar memoria
rm(list = ls())
## Semilla
set.seed(1234)
workingDirectory="/Users/williz/Desktop/ModelosED/3. Articulo 3/4. Resultados/MNL/3 Rutas"
setwd(workingDirectory)
### Cargar libreria Apollo
library(apollo)
library(caret)
### Inicializar código
apollo_initialise()
## Establecer controles principales
apollo_control = list(
modelName  = "MNL_Modelo Art3_3Rutas",
modelDescr = "Modelo MNL Art3_Rutas",
indivID    = "ViajeId",
nCores     = 1
)
database = read.csv("/Users/williz/Desktop/ModelosED/3. Articulo 3/3. Base de datos/DBMuestraArt3_3Rutas.csv",sep="\t", dec=".",header=TRUE)
### Vector de parametros, incluidos los que se mantienen fijos en la estimación
apollo_beta=c(asc_ruta1   = 0, asc_ruta2   = 0,  asc_ruta4 = 0,
b_tt  = 0,
b_dt  = 0,
#b_Cong  = 0, #b_CongCD  = 0, b_CongEF  = 0,
b_Sem = 0,
b_ACC_0 = 0, b_ACC_1 = 0, b_ACC_2 = 0,
b_NO_CAMFD = 0, b_SI_CAMFD = 0,
b_NO_PANEL = 0, b_SI_PANEL = 0,
b_NO_ZER = 0, b_SI_ZER = 0,
b_No_MTRP = 0, b_Si_MTRP = 0,
b_No_Info = 0, b_Si_Info = 0,
b_UsoCel_P = 0, #b_UsoCel_A = 0,
b_UsoCel_F = 0)
### Vector con nombres (entre comillas) de los parámetros que se mantendrán fijos en su valor inicial en apollo_beta, use apollo_beta_fixed = c () si ninguno
apollo_fixed = c("asc_ruta2", "b_ACC_0", "b_NO_CAMFD","b_NO_PANEL" ,"b_No_MTRP", "b_NO_ZER",
"b_Si_Info", "b_UsoCel_P")
apollo_inputs = apollo_validateInputs()
apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){
### Attach inputs and detach after function exit
apollo_attach(apollo_beta, apollo_inputs)
on.exit(apollo_detach(apollo_beta, apollo_inputs))
### Create list of probabilities P
P = list()
### List of utilities: these must use the same names as in mnl_settings, order is irrelevant
V = list()
V[['ruta1']]  = asc_ruta1  + b_tt * T_Alt_1*(1 + CG_Alt_1) + b_dt * D_Alt_1 +
b_Sem*SEM_A1_km +
b_ACC_0*ACC_A1_0 + b_ACC_1*ACC_A1_1 + b_ACC_2*ACC_A1_2 +
b_NO_CAMFD * NO_CAMFD_A1 + b_SI_CAMFD * SI_CAMFD_A1 +
b_NO_PANEL * NO_PANEL_A1 + b_SI_PANEL * SI_PANEL_A1 +
b_NO_ZER * NO_ZER_A1 + b_SI_ZER * SI_ZER_A1 +
b_No_MTRP * NO_MTRP_A1 + b_Si_MTRP * SI_MTRP_A1
V[['ruta2']]  = (asc_ruta2  + b_tt * T_Alt_2*(1 + CG_Alt_2) + b_dt * D_Alt_2 +
b_Sem*SEM_A2_km +
b_ACC_0*ACC_A2_0 + b_ACC_1*ACC_A2_1 + b_ACC_2*ACC_A2_2 +
b_NO_CAMFD * NO_CAMFD_A2 + b_SI_CAMFD * SI_CAMFD_A2 +
b_NO_PANEL * NO_PANEL_A2 + b_SI_PANEL * SI_PANEL_A2 +
b_NO_ZER * NO_ZER_A2 + b_SI_ZER * SI_ZER_A2 +
b_No_MTRP * NO_MTRP_A2 + b_Si_MTRP * SI_MTRP_A2)
V[['rutaEC']] =  asc_ruta4 + b_tt * T_Alt_4*(1 + CG_Alt_4) + b_dt * D_Alt_4 +
b_Sem*SEM_EC_km +
b_ACC_0*ACC_EC_0 + b_ACC_1*ACC_EC_1 + b_ACC_2*ACC_EC_2 +
b_NO_CAMFD * NO_CAMFD_EC + b_SI_CAMFD * SI_CAMFD_EC +
b_NO_PANEL * NO_PANEL_EC + b_SI_PANEL * SI_PANEL_EC +
b_NO_ZER * NO_ZER_EC + b_SI_ZER * SI_ZER_EC +
b_No_MTRP * NO_MTRP_EC + b_Si_MTRP * SI_MTRP_EC +
b_No_Info * SININFOTRF + b_Si_Info * CONINFOTRF +
b_UsoCel_P * UsoCel_Poco +  b_UsoCel_F * UsoCel_Frec
### Define settings for MNL model component
mnl_settings = list(
alternatives  = c(ruta1=1, ruta2=2, rutaEC=4),
avail         = list(ruta1=1, ruta2=1, rutaEC=1),
choiceVar     = CHOICE,
V             = V
)
### Compute probabilities using MNL model
P[['model']] = apollo_mnl(mnl_settings, functionality)
### Take product across observation for same individual
#P = apollo_panelProd(P, apollo_inputs, functionality)
### Prepare and return outputs of function
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
model = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)
apollo_modelOutput(model, modelOutput_settings=list(printPVal=TRUE) )
#Cargas las Bases de Datos
rm(list = ls())
DB <- read_xlsx("/Users/williz/Desktop/ModelosED/3. Articulo 3/3. Base de datos/DBMuestraArt3_VF.xlsx")
table(DB$DISTAlt1 == 0)
table(DB$DISTAlt2 == 0)
table(DB$DISTAlt3 == 0)
table(DB$TIEMPOAlt1 == 0)
table(DB$TIEMPOAlt2 == 0)
table(DB$TIEMPOAlt3 == 0)
table(DB$TIEMPOEC == 0)
for (i in 1:nrow(DB)){
if (DB$DISTAlt2[i] == 0){
DB$DISTAlt2[i] = max(DB$DISTAlt1[i],DB$DISTAlt3[i])+0.3}
if (DB$DISTAlt3[i] == 0){
DB$DISTAlt3[i] = max(DB$DISTAlt1[i],DB$DISTAlt2[i])+0.3}
if (DB$TIEMPOAlt2[i] == 0){
DB$TIEMPOAlt2[i] = max(DB$TIEMPOAlt1[i],DB$TIEMPOAlt3[i])+3}
if (DB$TIEMPOAlt3[i]==0){
DB$TIEMPOAlt3[i] = max(DB$TIEMPOAlt1[i],DB$TIEMPOAlt2[i])+3}
}
for (i in 1:nrow(DB)){
if (DB$Semaf_A1[i] == 999){
DB$Semaf_A1[i] = max(DB$Semaf_A2[i],DB$Semaf_A3[i])}
else {DB$Semaf_A1[i]}
if (DB$Semaf_A2[i] == 999){
DB$Semaf_A2[i] = max(DB$Semaf_A1[i],DB$Semaf_A3[i])}
else {DB$Semaf_A2[i]}
if (DB$Semaf_A3[i] == 999){
DB$Semaf_A3[i] = max(DB$Semaf_A1[i],DB$Semaf_A2[i])}
else {DB$Semaf_A3[i]}
if (DB$Semaf_EC[i] == 999){
DB$Semaf_EC[i] = max(DB$Semaf_A1[i],DB$Semaf_A2[i], DB$Semaf_A3[i])}
else {DB$Semaf_EC[i]}
if (DB$ZER_A2[i] == 999){
DB$ZER_A2[i] = max(DB$ZER_A1[i],DB$ZER_A3[i])+2}
if (DB$ZER_A3[i] == 999){
DB$ZER_A3[i] = max(DB$ZER_A1[i],DB$ZER_A2[i])+2}
else{DB$ZER_A3[i]}
if (DB$ZER_EC[i] == 999){
DB$ZER_EC[i] = max(DB$ZER_A1[i],DB$ZER_A2[i],DB$ZER_A3[i])+2}
else{DB$ZER_EC[i]}
}
for (i in 1:nrow(DB)) {
if (DB$Paneles_A2[i] == 999){
DB$Paneles_A2[i] = max(DB$Paneles_A1[i],DB$Paneles_A3[i])}
else{
DB$Paneles_A2[i]
}
if (DB$Paneles_A3[i] == 999){
DB$Paneles_A3[i] = max(DB$Paneles_A1[i],DB$Paneles_A3[i])}
else{
DB$Paneles_A3[i]
}
}
for (i in 1:nrow(DB)) {
DB$SEM_A1_km[i] = DB$Semaf_A1[i]/DB$DISTAlt1[i]
DB$SEM_A2_km[i] = DB$Semaf_A2[i]/DB$DISTAlt2[i]
DB$SEM_A3_km[i] = DB$Semaf_A3[i]/DB$DISTAlt3[i]
DB$SEM_EC_km[i] = DB$Semaf_EC[i]/DB$DISTEC[i]
DB$Panel_A1_km[i] = DB$Paneles_A1[i]/DB$DISTAlt1[i]
DB$Panel_A2_km[i] = DB$Paneles_A2[i]/DB$DISTAlt2[i]
DB$Panel_A3_km[i] = DB$Paneles_A3[i]/DB$DISTAlt3[i]
DB$Panel_EC_km[i] = DB$Paneles_EC[i]/DB$DISTEC[i]
DB$ZER_A1_km[i] = DB$ZER_A1[i]/DB$DISTAlt1[i]
DB$ZER_A2_km[i] = DB$ZER_A2[i]/DB$DISTAlt2[i]
DB$ZER_A3_km[i] = DB$ZER_A3[i]/DB$DISTAlt3[i]
DB$ZER_EC_km[i] = DB$ZER_EC[i]/DB$DISTEC[i]
}
# Normalización de las variables tiempo
for (i in 1:nrow(DB)){
DB$T_Alt_1[i] = (DB$TIEMPOAlt1[i]- (min(c(DB$TIEMPOAlt1[i],DB$TIEMPOAlt2[i],DB$TIEMPOAlt3[i],DB$TIEMPOEC[i])-1)))/((max(DB$TIEMPOAlt1[i],DB$TIEMPOAlt2[i],DB$TIEMPOAlt3[i],DB$TIEMPOEC[i])+0.2)-((min(DB$TIEMPOAlt1[i],DB$TIEMPOAlt2[i],DB$TIEMPOAlt3[i],DB$TIEMPOEC[i])-1)))
DB$T_Alt_2[i] = (DB$TIEMPOAlt2[i]- (min(c(DB$TIEMPOAlt1[i],DB$TIEMPOAlt2[i],DB$TIEMPOAlt3[i],DB$TIEMPOEC[i])-1)))/((max(DB$TIEMPOAlt1[i],DB$TIEMPOAlt2[i],DB$TIEMPOAlt3[i],DB$TIEMPOEC[i])+0.2)-((min(DB$TIEMPOAlt1[i],DB$TIEMPOAlt2[i],DB$TIEMPOAlt3[i],DB$TIEMPOEC[i])-1)))
DB$T_Alt_3[i] = (DB$TIEMPOAlt3[i]- (min(c(DB$TIEMPOAlt1[i],DB$TIEMPOAlt2[i],DB$TIEMPOAlt3[i],DB$TIEMPOEC[i])-1)))/((max(DB$TIEMPOAlt1[i],DB$TIEMPOAlt2[i],DB$TIEMPOAlt3[i],DB$TIEMPOEC[i])+0.2)-((min(DB$TIEMPOAlt1[i],DB$TIEMPOAlt2[i],DB$TIEMPOAlt3[i],DB$TIEMPOEC[i])-1)))
DB$T_Alt_4[i] = (DB$TIEMPOEC[i]- (min(c(DB$TIEMPOAlt1[i],DB$TIEMPOAlt2[i],DB$TIEMPOAlt3[i],DB$TIEMPOEC[i])-1)))/((max(DB$TIEMPOAlt1[i],DB$TIEMPOAlt2[i],DB$TIEMPOAlt3[i],DB$TIEMPOEC[i])+0.2)-((min(DB$TIEMPOAlt1[i],DB$TIEMPOAlt2[i],DB$TIEMPOAlt3[i],DB$TIEMPOEC[i])-1)))
# Normalización de la variable distancia
DB$D_Alt_1[i] = (DB$DISTAlt1[i]- (min(c(DB$DISTAlt1[i],DB$DISTAlt2[i],DB$DISTAlt3[i],DB$DISTEC[i])-0.1)))/((max(c(DB$DISTAlt1[i],DB$DISTAlt2[i],DB$DISTAlt3[i],DB$DISTEC[i]))+0.05)-((min(c(DB$DISTAlt1[i],DB$DISTAlt2[i],DB$DISTAlt3[i],DB$DISTEC[i])-0.1))))
DB$D_Alt_2[i] = (DB$DISTAlt2[i]- (min(c(DB$DISTAlt1[i],DB$DISTAlt2[i],DB$DISTAlt3[i],DB$DISTEC[i])-0.1)))/((max(c(DB$DISTAlt1[i],DB$DISTAlt2[i],DB$DISTAlt3[i],DB$DISTEC[i]))+0.05)-((min(c(DB$DISTAlt1[i],DB$DISTAlt2[i],DB$DISTAlt3[i],DB$DISTEC[i])-0.1))))
DB$D_Alt_3[i] = (DB$DISTAlt3[i]- (min(c(DB$DISTAlt1[i],DB$DISTAlt2[i],DB$DISTAlt3[i],DB$DISTEC[i])-0.1)))/((max(c(DB$DISTAlt1[i],DB$DISTAlt2[i],DB$DISTAlt3[i],DB$DISTEC[i]))+0.05)-((min(c(DB$DISTAlt1[i],DB$DISTAlt2[i],DB$DISTAlt3[i],DB$DISTEC[i])-0.1))))
DB$D_Alt_4[i] = (DB$DISTEC[i]- (min(c(DB$DISTAlt1[i],DB$DISTAlt2[i],DB$DISTAlt3[i],DB$DISTEC[i])-0.1)))/((max(c(DB$DISTAlt1[i],DB$DISTAlt2[i],DB$DISTAlt3[i],DB$DISTEC[i]))+0.05)-((min(c(DB$DISTAlt1[i],DB$DISTAlt2[i],DB$DISTAlt3[i],DB$DISTEC[i])-0.1))))
if(DB$HPICOHVALLE[i] == 1){
DB$Vel_fl_Alt1[i] = 32/58;
DB$Vel_fl_Alt2[i] = 32/58;
DB$Vel_fl_Alt3[i] = 32/58;
DB$Vel_fl_Alt4[i] = 32/58}
else{DB$Vel_fl_Alt1[i] = 24/58;
DB$Vel_fl_Alt2[i] = 24/58;
DB$Vel_fl_Alt3[i]= 24/58;
DB$Vel_fl_Alt4[i]= 24/58}
DB$T_fl_Alt1[i] = DB$DISTAlt1[i]/DB$Vel_fl_Alt1[i]
DB$T_fl_Alt2[i] = DB$DISTAlt2[i]/DB$Vel_fl_Alt2[i]
DB$T_fl_Alt3[i] = DB$DISTAlt3[i]/DB$Vel_fl_Alt3[i]
DB$T_fl_Alt4[i] = DB$DISTEC[i]/DB$Vel_fl_Alt4[i]
DB$CG_Alt_1[i] = DB$TIEMPOAlt1[i]/DB$T_fl_Alt1[i]
DB$CG_Alt_2[i] = DB$TIEMPOAlt2[i]/DB$T_fl_Alt2[i]
DB$CG_Alt_3[i] = DB$TIEMPOAlt3[i]/DB$T_fl_Alt3[i]
DB$CG_Alt_4[i] = DB$TIEMPOEC[i]/DB$T_fl_Alt4[i]
DB$T_rf_Alt1[i] = (DB$T_fl_Alt1[i]-(min(c(DB$T_fl_Alt1[i],DB$T_fl_Alt2[i],DB$T_fl_Alt3[i],DB$T_fl_Alt4[i])-1)))/((max(c(DB$T_fl_Alt1[i],DB$T_fl_Alt2[i],DB$T_fl_Alt3[i],DB$T_fl_Alt4[i]))+0.2)-(min(c(DB$T_fl_Alt1[i],DB$T_fl_Alt2[i],DB$T_fl_Alt3[i],DB$T_fl_Alt4[i])-1)))
DB$T_rf_Alt2[i] = (DB$T_fl_Alt2[i]-(min(c(DB$T_fl_Alt1[i],DB$T_fl_Alt2[i],DB$T_fl_Alt3[i],DB$T_fl_Alt4[i])-1)))/((max(c(DB$T_fl_Alt1[i],DB$T_fl_Alt2[i],DB$T_fl_Alt3[i],DB$T_fl_Alt4[i]))+0.2)-(min(c(DB$T_fl_Alt1[i],DB$T_fl_Alt2[i],DB$T_fl_Alt3[i],DB$T_fl_Alt4[i])-1)))
DB$T_rf_Alt3[i] = (DB$T_fl_Alt3[i]-(min(c(DB$T_fl_Alt1[i],DB$T_fl_Alt2[i],DB$T_fl_Alt3[i],DB$T_fl_Alt4[i])-1)))/((max(c(DB$T_fl_Alt1[i],DB$T_fl_Alt2[i],DB$T_fl_Alt3[i],DB$T_fl_Alt4[i]))+0.2)-(min(c(DB$T_fl_Alt1[i],DB$T_fl_Alt2[i],DB$T_fl_Alt3[i],DB$T_fl_Alt4[i])-1)))
DB$T_rf_Alt4[i] = (DB$T_fl_Alt4[i]-(min(c(DB$T_fl_Alt1[i],DB$T_fl_Alt2[i],DB$T_fl_Alt3[i],DB$T_fl_Alt4[i])-1)))/((max(c(DB$T_fl_Alt1[i],DB$T_fl_Alt2[i],DB$T_fl_Alt3[i],DB$T_fl_Alt4[i]))+0.2)-(min(c(DB$T_fl_Alt1[i],DB$T_fl_Alt2[i],DB$T_fl_Alt3[i],DB$T_fl_Alt4[i])-1)))
}
DB$UsoCel_Poco <- (ifelse((DB$UsoCel == 1), 1,0))
#DB$UsoCel_AlgVec <- (ifelse((DB$UsoCel == 3 ), 1,0))
DB$UsoCel_Frec <- (ifelse((DB$UsoCel > 1 ), 1,0))
DB <- DB %>%
# Filtrar viajes Eliminados en la primera revisión
filter(!(CHOICE %in% c("3")))
prop.table(table(DB$CHOICE))
DB_Muestra <- DB %>%
# Filtrar viajes Eliminados en la primera revisión
filter(!(MUESTRA %in% c("0")))
## Se guarda la DB para usar en los modelos
write.table(DB_Muestra,
file="/Users/williz/Desktop/ModelosED/3. Articulo 3/3. Base de datos/DBMuestraArt3_3Rutas.csv", sep="\t", dec=".")
DB_test <- DB %>%
# Filtrar viajes Eliminados en la primera revisión
filter(!(MUESTRA %in% c("1")))
write.table(DB_test,
file="/Users/williz/Desktop/ModelosED/3. Articulo 3/3. Base de datos/DBValidacion_3Rutas.csv", sep="\t", dec=".")
DB$Semaf_A1
#Cargas las Bases de Datos
rm(list = ls())
DB <- read_xlsx("/Users/williz/Desktop/ModelosED/3. Articulo 3/3. Base de datos/DBMuestraArt3_VF.xlsx")
DB$Semaf_A1
DB$Semaf_A2
DB$Semaf_A3
table(DB$Semaf_A1[i] == 999)
table(DB$Semaf_A1 == 999)
table(DB$Semaf_A2 == 999)
DB$Semaf_A2 == 999
DB$Semaf_A2[13]
DB$Semaf_A1[13]
DB$Semaf_A3[13]
DB$Semaf_A4[13]
DB$Semaf_EC[13]
DB$Semaf_A3[i] == 999
DB$Semaf_A3 == 999
DB$Semaf_A3[13]
DB$Semaf_A2[13]
DB$Semaf_A1[13]
table(DB$Semaf_EC[i] == 999)
table(DB$Semaf_EC == 999)
table(DB$Semaf_A1 == 999)
#Cargas las Bases de Datos
rm(list = ls())
DB <- read_xlsx("/Users/williz/Desktop/ModelosED/3. Articulo 3/3. Base de datos/DBMuestraArt3_VF.xlsx")
table(DB$DISTAlt1 == 0)
table(DB$DISTAlt2 == 0)
table(DB$DISTAlt3 == 0)
table(DB$TIEMPOAlt1 == 0)
table(DB$TIEMPOAlt2 == 0)
table(DB$TIEMPOAlt3 == 0)
table(DB$TIEMPOEC == 0)
for (i in 1:nrow(DB)){
if (DB$DISTAlt2[i] == 0){
DB$DISTAlt2[i] = max(DB$DISTAlt1[i],DB$DISTAlt3[i])+0.3}
if (DB$DISTAlt3[i] == 0){
DB$DISTAlt3[i] = max(DB$DISTAlt1[i],DB$DISTAlt2[i])+0.3}
if (DB$TIEMPOAlt2[i] == 0){
DB$TIEMPOAlt2[i] = max(DB$TIEMPOAlt1[i],DB$TIEMPOAlt3[i])+3}
if (DB$TIEMPOAlt3[i]==0){
DB$TIEMPOAlt3[i] = max(DB$TIEMPOAlt1[i],DB$TIEMPOAlt2[i])+3}
}
for (i in 1:nrow(DB)){
if (DB$Semaf_A2[i] == 999){
DB$Semaf_A2[i] = mean(DB$Semaf_A1[i],DB$Semaf_EC[i])}
if (DB$Semaf_A3[i] == 999){
DB$Semaf_A3[i] = mean(DB$Semaf_A1[i],DB$Semaf_A2[i], DB$Semaf_EC[i])}
if (DB$ZER_A2[i] == 999){
DB$ZER_A2[i] = min(DB$ZER_A1[i],DB$ZER_A3[i])+1}
if (DB$ZER_A3[i] == 999){
DB$ZER_A3[i] = min(DB$ZER_A1[i],DB$ZER_A2[i])+1}
}
for (i in 1:nrow(DB)) {
DB$SEM_A1_km[i] = DB$Semaf_A1[i]/DB$DISTAlt1[i]
DB$SEM_A2_km[i] = DB$Semaf_A2[i]/DB$DISTAlt2[i]
DB$SEM_A3_km[i] = DB$Semaf_A3[i]/DB$DISTAlt3[i]
DB$SEM_EC_km[i] = DB$Semaf_EC[i]/DB$DISTEC[i]
DB$Panel_A1_km[i] = DB$Paneles_A1[i]/DB$DISTAlt1[i]
DB$Panel_A2_km[i] = DB$Paneles_A2[i]/DB$DISTAlt2[i]
DB$Panel_A3_km[i] = DB$Paneles_A3[i]/DB$DISTAlt3[i]
DB$Panel_EC_km[i] = DB$Paneles_EC[i]/DB$DISTEC[i]
DB$ZER_A1_km[i] = DB$ZER_A1[i]/DB$DISTAlt1[i]
DB$ZER_A2_km[i] = DB$ZER_A2[i]/DB$DISTAlt2[i]
DB$ZER_A3_km[i] = DB$ZER_A3[i]/DB$DISTAlt3[i]
DB$ZER_EC_km[i] = DB$ZER_EC[i]/DB$DISTEC[i]
}
# Normalización de las variables tiempo
for (i in 1:nrow(DB)){
DB$T_Alt_1[i] = (DB$TIEMPOAlt1[i]- (min(c(DB$TIEMPOAlt1[i],DB$TIEMPOAlt2[i],DB$TIEMPOAlt3[i],DB$TIEMPOEC[i])-1)))/((max(DB$TIEMPOAlt1[i],DB$TIEMPOAlt2[i],DB$TIEMPOAlt3[i],DB$TIEMPOEC[i])+0.2)-((min(DB$TIEMPOAlt1[i],DB$TIEMPOAlt2[i],DB$TIEMPOAlt3[i],DB$TIEMPOEC[i])-1)))
DB$T_Alt_2[i] = (DB$TIEMPOAlt2[i]- (min(c(DB$TIEMPOAlt1[i],DB$TIEMPOAlt2[i],DB$TIEMPOAlt3[i],DB$TIEMPOEC[i])-1)))/((max(DB$TIEMPOAlt1[i],DB$TIEMPOAlt2[i],DB$TIEMPOAlt3[i],DB$TIEMPOEC[i])+0.2)-((min(DB$TIEMPOAlt1[i],DB$TIEMPOAlt2[i],DB$TIEMPOAlt3[i],DB$TIEMPOEC[i])-1)))
DB$T_Alt_3[i] = (DB$TIEMPOAlt3[i]- (min(c(DB$TIEMPOAlt1[i],DB$TIEMPOAlt2[i],DB$TIEMPOAlt3[i],DB$TIEMPOEC[i])-1)))/((max(DB$TIEMPOAlt1[i],DB$TIEMPOAlt2[i],DB$TIEMPOAlt3[i],DB$TIEMPOEC[i])+0.2)-((min(DB$TIEMPOAlt1[i],DB$TIEMPOAlt2[i],DB$TIEMPOAlt3[i],DB$TIEMPOEC[i])-1)))
DB$T_Alt_4[i] = (DB$TIEMPOEC[i]- (min(c(DB$TIEMPOAlt1[i],DB$TIEMPOAlt2[i],DB$TIEMPOAlt3[i],DB$TIEMPOEC[i])-1)))/((max(DB$TIEMPOAlt1[i],DB$TIEMPOAlt2[i],DB$TIEMPOAlt3[i],DB$TIEMPOEC[i])+0.2)-((min(DB$TIEMPOAlt1[i],DB$TIEMPOAlt2[i],DB$TIEMPOAlt3[i],DB$TIEMPOEC[i])-1)))
# Normalización de la variable distancia
DB$D_Alt_1[i] = (DB$DISTAlt1[i]- (min(c(DB$DISTAlt1[i],DB$DISTAlt2[i],DB$DISTAlt3[i],DB$DISTEC[i])-0.1)))/((max(c(DB$DISTAlt1[i],DB$DISTAlt2[i],DB$DISTAlt3[i],DB$DISTEC[i]))+0.05)-((min(c(DB$DISTAlt1[i],DB$DISTAlt2[i],DB$DISTAlt3[i],DB$DISTEC[i])-0.1))))
DB$D_Alt_2[i] = (DB$DISTAlt2[i]- (min(c(DB$DISTAlt1[i],DB$DISTAlt2[i],DB$DISTAlt3[i],DB$DISTEC[i])-0.1)))/((max(c(DB$DISTAlt1[i],DB$DISTAlt2[i],DB$DISTAlt3[i],DB$DISTEC[i]))+0.05)-((min(c(DB$DISTAlt1[i],DB$DISTAlt2[i],DB$DISTAlt3[i],DB$DISTEC[i])-0.1))))
DB$D_Alt_3[i] = (DB$DISTAlt3[i]- (min(c(DB$DISTAlt1[i],DB$DISTAlt2[i],DB$DISTAlt3[i],DB$DISTEC[i])-0.1)))/((max(c(DB$DISTAlt1[i],DB$DISTAlt2[i],DB$DISTAlt3[i],DB$DISTEC[i]))+0.05)-((min(c(DB$DISTAlt1[i],DB$DISTAlt2[i],DB$DISTAlt3[i],DB$DISTEC[i])-0.1))))
DB$D_Alt_4[i] = (DB$DISTEC[i]- (min(c(DB$DISTAlt1[i],DB$DISTAlt2[i],DB$DISTAlt3[i],DB$DISTEC[i])-0.1)))/((max(c(DB$DISTAlt1[i],DB$DISTAlt2[i],DB$DISTAlt3[i],DB$DISTEC[i]))+0.05)-((min(c(DB$DISTAlt1[i],DB$DISTAlt2[i],DB$DISTAlt3[i],DB$DISTEC[i])-0.1))))
if(DB$HPICOHVALLE[i] == 1){
DB$Vel_fl_Alt1[i] = 32/58;
DB$Vel_fl_Alt2[i] = 32/58;
DB$Vel_fl_Alt3[i] = 32/58;
DB$Vel_fl_Alt4[i] = 32/58}
else{DB$Vel_fl_Alt1[i] = 24/58;
DB$Vel_fl_Alt2[i] = 24/58;
DB$Vel_fl_Alt3[i]= 24/58;
DB$Vel_fl_Alt4[i]= 24/58}
DB$T_fl_Alt1[i] = DB$DISTAlt1[i]/DB$Vel_fl_Alt1[i]
DB$T_fl_Alt2[i] = DB$DISTAlt2[i]/DB$Vel_fl_Alt2[i]
DB$T_fl_Alt3[i] = DB$DISTAlt3[i]/DB$Vel_fl_Alt3[i]
DB$T_fl_Alt4[i] = DB$DISTEC[i]/DB$Vel_fl_Alt4[i]
DB$CG_Alt_1[i] = DB$TIEMPOAlt1[i]/DB$T_fl_Alt1[i]
DB$CG_Alt_2[i] = DB$TIEMPOAlt2[i]/DB$T_fl_Alt2[i]
DB$CG_Alt_3[i] = DB$TIEMPOAlt3[i]/DB$T_fl_Alt3[i]
DB$CG_Alt_4[i] = DB$TIEMPOEC[i]/DB$T_fl_Alt4[i]
DB$T_rf_Alt1[i] = (DB$T_fl_Alt1[i]-(min(c(DB$T_fl_Alt1[i],DB$T_fl_Alt2[i],DB$T_fl_Alt3[i],DB$T_fl_Alt4[i])-1)))/((max(c(DB$T_fl_Alt1[i],DB$T_fl_Alt2[i],DB$T_fl_Alt3[i],DB$T_fl_Alt4[i]))+0.2)-(min(c(DB$T_fl_Alt1[i],DB$T_fl_Alt2[i],DB$T_fl_Alt3[i],DB$T_fl_Alt4[i])-1)))
DB$T_rf_Alt2[i] = (DB$T_fl_Alt2[i]-(min(c(DB$T_fl_Alt1[i],DB$T_fl_Alt2[i],DB$T_fl_Alt3[i],DB$T_fl_Alt4[i])-1)))/((max(c(DB$T_fl_Alt1[i],DB$T_fl_Alt2[i],DB$T_fl_Alt3[i],DB$T_fl_Alt4[i]))+0.2)-(min(c(DB$T_fl_Alt1[i],DB$T_fl_Alt2[i],DB$T_fl_Alt3[i],DB$T_fl_Alt4[i])-1)))
DB$T_rf_Alt3[i] = (DB$T_fl_Alt3[i]-(min(c(DB$T_fl_Alt1[i],DB$T_fl_Alt2[i],DB$T_fl_Alt3[i],DB$T_fl_Alt4[i])-1)))/((max(c(DB$T_fl_Alt1[i],DB$T_fl_Alt2[i],DB$T_fl_Alt3[i],DB$T_fl_Alt4[i]))+0.2)-(min(c(DB$T_fl_Alt1[i],DB$T_fl_Alt2[i],DB$T_fl_Alt3[i],DB$T_fl_Alt4[i])-1)))
DB$T_rf_Alt4[i] = (DB$T_fl_Alt4[i]-(min(c(DB$T_fl_Alt1[i],DB$T_fl_Alt2[i],DB$T_fl_Alt3[i],DB$T_fl_Alt4[i])-1)))/((max(c(DB$T_fl_Alt1[i],DB$T_fl_Alt2[i],DB$T_fl_Alt3[i],DB$T_fl_Alt4[i]))+0.2)-(min(c(DB$T_fl_Alt1[i],DB$T_fl_Alt2[i],DB$T_fl_Alt3[i],DB$T_fl_Alt4[i])-1)))
}
DB$UsoCel_Poco <- (ifelse((DB$UsoCel == 1), 1,0))
#DB$UsoCel_AlgVec <- (ifelse((DB$UsoCel == 3 ), 1,0))
DB$UsoCel_Frec <- (ifelse((DB$UsoCel > 1 ), 1,0))
DB <- DB %>%
# Filtrar viajes Eliminados en la primera revisión
filter(!(CHOICE %in% c("3")))
prop.table(table(DB$CHOICE))
DB_Muestra <- DB %>%
# Filtrar viajes Eliminados en la primera revisión
filter(!(MUESTRA %in% c("0")))
## Se guarda la DB para usar en los modelos
write.table(DB_Muestra,
file="/Users/williz/Desktop/ModelosED/3. Articulo 3/3. Base de datos/DBMuestraArt3_3Rutas.csv", sep="\t", dec=".")
DB_test <- DB %>%
# Filtrar viajes Eliminados en la primera revisión
filter(!(MUESTRA %in% c("1")))
write.table(DB_test,
file="/Users/williz/Desktop/ModelosED/3. Articulo 3/3. Base de datos/DBValidacion_3Rutas.csv", sep="\t", dec=".")
#Cargas las Bases de Datos
rm(list = ls())
DB <- read_xlsx("/Users/williz/Desktop/ModelosED/3. Articulo 3/3. Base de datos/DBMuestraArt3_VF.xlsx")
#Cargas las Bases de Datos
rm(list = ls())
DB <- read_xlsx("/Users/williz/Desktop/ModelosED/3. Articulo 3/3. Base de datos/DBMuestraArt3_VF.xlsx")
table(DB$DISTAlt1 == 0)
table(DB$DISTAlt2 == 0)
table(DB$DISTAlt3 == 0)
table(DB$TIEMPOAlt1 == 0)
table(DB$TIEMPOAlt2 == 0)
table(DB$TIEMPOAlt3 == 0)
table(DB$TIEMPOEC == 0)
for (i in 1:nrow(DB)){
if (DB$DISTAlt2[i] == 0){
DB$DISTAlt2[i] = max(DB$DISTAlt1[i],DB$DISTAlt3[i])+0.3}
if (DB$DISTAlt3[i] == 0){
DB$DISTAlt3[i] = max(DB$DISTAlt1[i],DB$DISTAlt2[i])+0.3}
if (DB$TIEMPOAlt2[i] == 0){
DB$TIEMPOAlt2[i] = max(DB$TIEMPOAlt1[i],DB$TIEMPOAlt3[i])+3}
if (DB$TIEMPOAlt3[i]==0){
DB$TIEMPOAlt3[i] = max(DB$TIEMPOAlt1[i],DB$TIEMPOAlt2[i])+3}
}
for (i in 1:nrow(DB)){
if (DB$Semaf_A2[i] == 999){
DB$Semaf_A2[i] = mean(DB$Semaf_A1[i],DB$Semaf_EC[i])}
if (DB$Semaf_A3[i] == 999){
DB$Semaf_A3[i] = mean(DB$Semaf_A1[i],DB$Semaf_A2[i], DB$Semaf_EC[i])}
if (DB$ZER_A2[i] == 999){
DB$ZER_A2[i] = min(DB$ZER_A1[i],DB$ZER_A3[i])+1}
if (DB$ZER_A3[i] == 999){
DB$ZER_A3[i] = min(DB$ZER_A1[i],DB$ZER_A2[i])+1}
}
for (i in 1:nrow(DB)) {
DB$SEM_A1_km[i] = DB$Semaf_A1[i]/DB$DISTAlt1[i]
DB$SEM_A2_km[i] = DB$Semaf_A2[i]/DB$DISTAlt2[i]
DB$SEM_A3_km[i] = DB$Semaf_A3[i]/DB$DISTAlt3[i]
DB$SEM_EC_km[i] = DB$Semaf_EC[i]/DB$DISTEC[i]
DB$Panel_A1_km[i] = DB$Paneles_A1[i]/DB$DISTAlt1[i]
DB$Panel_A2_km[i] = DB$Paneles_A2[i]/DB$DISTAlt2[i]
DB$Panel_A3_km[i] = DB$Paneles_A3[i]/DB$DISTAlt3[i]
DB$Panel_EC_km[i] = DB$Paneles_EC[i]/DB$DISTEC[i]
DB$ZER_A1_km[i] = DB$ZER_A1[i]/DB$DISTAlt1[i]
DB$ZER_A2_km[i] = DB$ZER_A2[i]/DB$DISTAlt2[i]
DB$ZER_A3_km[i] = DB$ZER_A3[i]/DB$DISTAlt3[i]
DB$ZER_EC_km[i] = DB$ZER_EC[i]/DB$DISTEC[i]
}
# Normalización de las variables tiempo
for (i in 1:nrow(DB)){
DB$T_Alt_1[i] = (DB$TIEMPOAlt1[i]- (min(c(DB$TIEMPOAlt1[i],DB$TIEMPOAlt2[i],DB$TIEMPOAlt3[i],DB$TIEMPOEC[i])-1)))/((max(DB$TIEMPOAlt1[i],DB$TIEMPOAlt2[i],DB$TIEMPOAlt3[i],DB$TIEMPOEC[i])+0.2)-((min(DB$TIEMPOAlt1[i],DB$TIEMPOAlt2[i],DB$TIEMPOAlt3[i],DB$TIEMPOEC[i])-1)))
DB$T_Alt_2[i] = (DB$TIEMPOAlt2[i]- (min(c(DB$TIEMPOAlt1[i],DB$TIEMPOAlt2[i],DB$TIEMPOAlt3[i],DB$TIEMPOEC[i])-1)))/((max(DB$TIEMPOAlt1[i],DB$TIEMPOAlt2[i],DB$TIEMPOAlt3[i],DB$TIEMPOEC[i])+0.2)-((min(DB$TIEMPOAlt1[i],DB$TIEMPOAlt2[i],DB$TIEMPOAlt3[i],DB$TIEMPOEC[i])-1)))
DB$T_Alt_3[i] = (DB$TIEMPOAlt3[i]- (min(c(DB$TIEMPOAlt1[i],DB$TIEMPOAlt2[i],DB$TIEMPOAlt3[i],DB$TIEMPOEC[i])-1)))/((max(DB$TIEMPOAlt1[i],DB$TIEMPOAlt2[i],DB$TIEMPOAlt3[i],DB$TIEMPOEC[i])+0.2)-((min(DB$TIEMPOAlt1[i],DB$TIEMPOAlt2[i],DB$TIEMPOAlt3[i],DB$TIEMPOEC[i])-1)))
DB$T_Alt_4[i] = (DB$TIEMPOEC[i]- (min(c(DB$TIEMPOAlt1[i],DB$TIEMPOAlt2[i],DB$TIEMPOAlt3[i],DB$TIEMPOEC[i])-1)))/((max(DB$TIEMPOAlt1[i],DB$TIEMPOAlt2[i],DB$TIEMPOAlt3[i],DB$TIEMPOEC[i])+0.2)-((min(DB$TIEMPOAlt1[i],DB$TIEMPOAlt2[i],DB$TIEMPOAlt3[i],DB$TIEMPOEC[i])-1)))
# Normalización de la variable distancia
DB$D_Alt_1[i] = (DB$DISTAlt1[i]- (min(c(DB$DISTAlt1[i],DB$DISTAlt2[i],DB$DISTAlt3[i],DB$DISTEC[i])-0.1)))/((max(c(DB$DISTAlt1[i],DB$DISTAlt2[i],DB$DISTAlt3[i],DB$DISTEC[i]))+0.05)-((min(c(DB$DISTAlt1[i],DB$DISTAlt2[i],DB$DISTAlt3[i],DB$DISTEC[i])-0.1))))
DB$D_Alt_2[i] = (DB$DISTAlt2[i]- (min(c(DB$DISTAlt1[i],DB$DISTAlt2[i],DB$DISTAlt3[i],DB$DISTEC[i])-0.1)))/((max(c(DB$DISTAlt1[i],DB$DISTAlt2[i],DB$DISTAlt3[i],DB$DISTEC[i]))+0.05)-((min(c(DB$DISTAlt1[i],DB$DISTAlt2[i],DB$DISTAlt3[i],DB$DISTEC[i])-0.1))))
DB$D_Alt_3[i] = (DB$DISTAlt3[i]- (min(c(DB$DISTAlt1[i],DB$DISTAlt2[i],DB$DISTAlt3[i],DB$DISTEC[i])-0.1)))/((max(c(DB$DISTAlt1[i],DB$DISTAlt2[i],DB$DISTAlt3[i],DB$DISTEC[i]))+0.05)-((min(c(DB$DISTAlt1[i],DB$DISTAlt2[i],DB$DISTAlt3[i],DB$DISTEC[i])-0.1))))
DB$D_Alt_4[i] = (DB$DISTEC[i]- (min(c(DB$DISTAlt1[i],DB$DISTAlt2[i],DB$DISTAlt3[i],DB$DISTEC[i])-0.1)))/((max(c(DB$DISTAlt1[i],DB$DISTAlt2[i],DB$DISTAlt3[i],DB$DISTEC[i]))+0.05)-((min(c(DB$DISTAlt1[i],DB$DISTAlt2[i],DB$DISTAlt3[i],DB$DISTEC[i])-0.1))))
if(DB$HPICOHVALLE[i] == 1){
DB$Vel_fl_Alt1[i] = 32/58;
DB$Vel_fl_Alt2[i] = 32/58;
DB$Vel_fl_Alt3[i] = 32/58;
DB$Vel_fl_Alt4[i] = 32/58}
else{DB$Vel_fl_Alt1[i] = 24/58;
DB$Vel_fl_Alt2[i] = 24/58;
DB$Vel_fl_Alt3[i]= 24/58;
DB$Vel_fl_Alt4[i]= 24/58}
DB$T_fl_Alt1[i] = DB$DISTAlt1[i]/DB$Vel_fl_Alt1[i]
DB$T_fl_Alt2[i] = DB$DISTAlt2[i]/DB$Vel_fl_Alt2[i]
DB$T_fl_Alt3[i] = DB$DISTAlt3[i]/DB$Vel_fl_Alt3[i]
DB$T_fl_Alt4[i] = DB$DISTEC[i]/DB$Vel_fl_Alt4[i]
DB$CG_Alt_1[i] = DB$TIEMPOAlt1[i]/DB$T_fl_Alt1[i]
DB$CG_Alt_2[i] = DB$TIEMPOAlt2[i]/DB$T_fl_Alt2[i]
DB$CG_Alt_3[i] = DB$TIEMPOAlt3[i]/DB$T_fl_Alt3[i]
DB$CG_Alt_4[i] = DB$TIEMPOEC[i]/DB$T_fl_Alt4[i]
DB$T_rf_Alt1[i] = (DB$T_fl_Alt1[i]-(min(c(DB$T_fl_Alt1[i],DB$T_fl_Alt2[i],DB$T_fl_Alt3[i],DB$T_fl_Alt4[i])-1)))/((max(c(DB$T_fl_Alt1[i],DB$T_fl_Alt2[i],DB$T_fl_Alt3[i],DB$T_fl_Alt4[i]))+0.2)-(min(c(DB$T_fl_Alt1[i],DB$T_fl_Alt2[i],DB$T_fl_Alt3[i],DB$T_fl_Alt4[i])-1)))
DB$T_rf_Alt2[i] = (DB$T_fl_Alt2[i]-(min(c(DB$T_fl_Alt1[i],DB$T_fl_Alt2[i],DB$T_fl_Alt3[i],DB$T_fl_Alt4[i])-1)))/((max(c(DB$T_fl_Alt1[i],DB$T_fl_Alt2[i],DB$T_fl_Alt3[i],DB$T_fl_Alt4[i]))+0.2)-(min(c(DB$T_fl_Alt1[i],DB$T_fl_Alt2[i],DB$T_fl_Alt3[i],DB$T_fl_Alt4[i])-1)))
DB$T_rf_Alt3[i] = (DB$T_fl_Alt3[i]-(min(c(DB$T_fl_Alt1[i],DB$T_fl_Alt2[i],DB$T_fl_Alt3[i],DB$T_fl_Alt4[i])-1)))/((max(c(DB$T_fl_Alt1[i],DB$T_fl_Alt2[i],DB$T_fl_Alt3[i],DB$T_fl_Alt4[i]))+0.2)-(min(c(DB$T_fl_Alt1[i],DB$T_fl_Alt2[i],DB$T_fl_Alt3[i],DB$T_fl_Alt4[i])-1)))
DB$T_rf_Alt4[i] = (DB$T_fl_Alt4[i]-(min(c(DB$T_fl_Alt1[i],DB$T_fl_Alt2[i],DB$T_fl_Alt3[i],DB$T_fl_Alt4[i])-1)))/((max(c(DB$T_fl_Alt1[i],DB$T_fl_Alt2[i],DB$T_fl_Alt3[i],DB$T_fl_Alt4[i]))+0.2)-(min(c(DB$T_fl_Alt1[i],DB$T_fl_Alt2[i],DB$T_fl_Alt3[i],DB$T_fl_Alt4[i])-1)))
}
DB$UsoCel_Poco <- (ifelse((DB$UsoCel == 1), 1,0))
#DB$UsoCel_AlgVec <- (ifelse((DB$UsoCel == 3 ), 1,0))
DB$UsoCel_Frec <- (ifelse((DB$UsoCel > 1 ), 1,0))
DB <- DB %>%
# Filtrar viajes Eliminados en la primera revisión
filter(!(CHOICE %in% c("3")))
prop.table(table(DB$CHOICE))
DB_Muestra <- DB %>%
# Filtrar viajes Eliminados en la primera revisión
filter(!(MUESTRA %in% c("0")))
## Se guarda la DB para usar en los modelos
write.table(DB_Muestra,
file="/Users/williz/Desktop/ModelosED/3. Articulo 3/3. Base de datos/DBMuestraArt3_3Rutas.csv", sep="\t", dec=".")
DB_test <- DB %>%
# Filtrar viajes Eliminados en la primera revisión
filter(!(MUESTRA %in% c("1")))
write.table(DB_test,
file="/Users/williz/Desktop/ModelosED/3. Articulo 3/3. Base de datos/DBValidacion_3Rutas.csv", sep="\t", dec=".")
### Limpiar memoria
rm(list = ls())
## Semilla
set.seed(1234)
workingDirectory="/Users/williz/Desktop/ModelosED/3. Articulo 3/4. Resultados/MNL/3 Rutas"
setwd(workingDirectory)
### Cargar libreria Apollo
library(apollo)
library(caret)
### Inicializar código
apollo_initialise()
## Establecer controles principales
apollo_control = list(
modelName  = "MNL_Modelo Art3_3Rutas",
modelDescr = "Modelo MNL Art3_Rutas",
indivID    = "ViajeId",
nCores     = 1
)
database = read.csv("/Users/williz/Desktop/ModelosED/3. Articulo 3/3. Base de datos/DBMuestraArt3_3Rutas.csv",sep="\t", dec=".",header=TRUE)
### Vector de parametros, incluidos los que se mantienen fijos en la estimación
apollo_beta=c(asc_ruta1   = 0, asc_ruta2   = 0,  asc_ruta4 = 0,
b_tt  = 0,
b_dt  = 0,
#b_Cong  = 0, #b_CongCD  = 0, b_CongEF  = 0,
b_Sem = 0,
b_ACC_0 = 0, b_ACC_1 = 0, b_ACC_2 = 0,
b_NO_CAMFD = 0, b_SI_CAMFD = 0,
b_NO_PANEL = 0, b_SI_PANEL = 0,
b_NO_ZER = 0, b_SI_ZER = 0,
b_No_MTRP = 0, b_Si_MTRP = 0,
b_No_Info = 0, b_Si_Info = 0,
b_UsoCel_P = 0, #b_UsoCel_A = 0,
b_UsoCel_F = 0)
### Vector con nombres (entre comillas) de los parámetros que se mantendrán fijos en su valor inicial en apollo_beta, use apollo_beta_fixed = c () si ninguno
apollo_fixed = c("asc_ruta2", "b_ACC_0", "b_NO_CAMFD","b_NO_PANEL" ,"b_No_MTRP", "b_NO_ZER",
"b_Si_Info", "b_UsoCel_P")
apollo_inputs = apollo_validateInputs()
apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){
### Attach inputs and detach after function exit
apollo_attach(apollo_beta, apollo_inputs)
on.exit(apollo_detach(apollo_beta, apollo_inputs))
### Create list of probabilities P
P = list()
### List of utilities: these must use the same names as in mnl_settings, order is irrelevant
V = list()
V[['ruta1']]  = asc_ruta1  + b_tt * T_Alt_1*(1 + CG_Alt_1) + b_dt * D_Alt_1 +
b_Sem*SEM_A1_km +
b_ACC_0*ACC_A1_0 + b_ACC_1*ACC_A1_1 + b_ACC_2*ACC_A1_2 +
b_NO_CAMFD * NO_CAMFD_A1 + b_SI_CAMFD * SI_CAMFD_A1 +
b_NO_PANEL * NO_PANEL_A1 + b_SI_PANEL * SI_PANEL_A1 +
b_NO_ZER * NO_ZER_A1 + b_SI_ZER * SI_ZER_A1 +
b_No_MTRP * NO_MTRP_A1 + b_Si_MTRP * SI_MTRP_A1
V[['ruta2']]  = (asc_ruta2  + b_tt * T_Alt_2*(1 + CG_Alt_2) + b_dt * D_Alt_2 +
b_Sem*SEM_A2_km +
b_ACC_0*ACC_A2_0 + b_ACC_1*ACC_A2_1 + b_ACC_2*ACC_A2_2 +
b_NO_CAMFD * NO_CAMFD_A2 + b_SI_CAMFD * SI_CAMFD_A2 +
b_NO_PANEL * NO_PANEL_A2 + b_SI_PANEL * SI_PANEL_A2 +
b_NO_ZER * NO_ZER_A2 + b_SI_ZER * SI_ZER_A2 +
b_No_MTRP * NO_MTRP_A2 + b_Si_MTRP * SI_MTRP_A2)
V[['rutaEC']] =  asc_ruta4 + b_tt * T_Alt_4*(1 + CG_Alt_4) + b_dt * D_Alt_4 +
b_Sem*SEM_EC_km +
b_ACC_0*ACC_EC_0 + b_ACC_1*ACC_EC_1 + b_ACC_2*ACC_EC_2 +
b_NO_CAMFD * NO_CAMFD_EC + b_SI_CAMFD * SI_CAMFD_EC +
b_NO_PANEL * NO_PANEL_EC + b_SI_PANEL * SI_PANEL_EC +
b_NO_ZER * NO_ZER_EC + b_SI_ZER * SI_ZER_EC +
b_No_MTRP * NO_MTRP_EC + b_Si_MTRP * SI_MTRP_EC +
b_No_Info * SININFOTRF + b_Si_Info * CONINFOTRF +
b_UsoCel_P * UsoCel_Poco +  b_UsoCel_F * UsoCel_Frec
### Define settings for MNL model component
mnl_settings = list(
alternatives  = c(ruta1=1, ruta2=2, rutaEC=4),
avail         = list(ruta1=1, ruta2=1, rutaEC=1),
choiceVar     = CHOICE,
V             = V
)
### Compute probabilities using MNL model
P[['model']] = apollo_mnl(mnl_settings, functionality)
### Take product across observation for same individual
#P = apollo_panelProd(P, apollo_inputs, functionality)
### Prepare and return outputs of function
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
model = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)
apollo_modelOutput(model, modelOutput_settings=list(printPVal=TRUE) )
