# -*- coding: utf-8 -*-
"""
Created on Tue Aug 28 15:03:24 2018

@author: albeiro.alvarez
"""

import math,pants,os,re
import random
import numpy as np

#from aco1 import AntColony
#from aco2 import AntColony
#from aco3 import AntColony, Graph
#from plot import plot

#Para correr con ACO4
from aco4 import ACO, Graph
from plot import plot


"Matriz de distancias entre nodos"

distances = np.array([[np.inf,99999,99999,99999,99999,99999,99999,99999,1723,1712,2977,3112,4343,5355,5928,	5952,7836, 9489,11970,11393,99999,99999,99999,99999,99999,99999,99999,99999],
                      [99999,	np.inf,	99999,	99999,	99999,	99999,	99999,	99999,	7450,	5730,	4288,	3735,	3591,	5072,	5645,	5750,	7898,	9551,	12032,	11455,	99999,	99999,	99999,	99999,	99999,	99999,	99999,	99999],
                      [99999,	99999,	np.inf,	99999,	99999,	99999,	99999,	99999,	3550,	1618,	2443,	2923,	4180,	4944,	5517,	5763,	7425,	9078,	11559,	10982,	99999,	99999,	99999,	99999,	99999,	99999,	99999,	99999],
                      [99999,	99999,	99999,	np.inf,	99999,	99999,	99999,	99999,	6454,	5163,	3993,	3478,	2584,	1124,	2075,	2725,	4097,	5750,	8230,	7654,	99999,	99999,	99999,	99999,	99999,	99999,	99999,	99999],
                      [99999,	99999,	99999,	99999,	np.inf,	99999,	99999,	99999,	9341,	8050,	6879,	6364,	5471,	4011,	4199,	5612,	4359,	6041,	7552,	6256,	99999,	99999,	99999,	99999,	99999,	99999,	99999,	99999],
                      [99999,	99999,	99999,	99999,	99999,	np.inf,	99999,	99999,	7334,	6043,	4865,	4349,	2881,	3327,	4294,	4954,	6316,	7969,	10450,	9874,	99999,	99999,	99999,	99999,	99999,	99999,	99999,	99999],
                      [99999,	99999,	99999,	99999,	99999,	99999,	np.inf,	99999,	11318,	10915,	9745,	9229,	7304,	5700,	5169,	7121,	5622,	3190,	3917,	2621,	99999,	99999,	99999,	99999,	99999,	99999,	99999,	99999],
                      [99999,	99999,	99999,	99999,	99999,	99999,	99999,	np.inf,	9363,	8072,	6902,	6386,	5499,	3673,	3123,	5196,	2770,	1906,	3754,	3785,	99999,	99999,	99999,	99999,	99999,	99999,	99999,	99999],
                      [1410,	4951,	1959,	6534,	8758,	6075,	12263,	10021,	np.inf,	2367,	3160,	3640,	4897,	5661,	6234,	6480,	8142,	9795,	12276,	11699,	1740,	4010,	4648,	5199,	6313,	7318,	10983,	8837],
                      [2036,	4073,	550,	5368,	7591,	4480,	11097,	8855,	1932,	np.inf,	2036,	2251,	3482,	4495,	5067,	5092,	6976,	8629,	11109,	10533,	2256,	1643,	2421,	3810,	4925,	6151,	9817,	7671],
                      [3029,	4846,	1821,	4047,	6271,	3589,	9776,	7534,	3162,	1733,	np.inf,	1159,	2416,	3174,	3747,	3999,	5655,	7308,	9789,	9212,	3486,	1524,	1488,	2718,	3833,	4831,	8496,	6350],
                      [3622,	5119,	2137,	3646,	5870,	3188,	8647,	7133,	3813,	2048,	812,	np.inf,	1231,	2773,	3346,	2840,	5254,	6907,	9388,	8811,	4137,	3691,	1565,	1559,	2674,	3495,	8095,	5949],
                      [4330,	4263,	3605,	3537,	5240,	2022,	7878,	4947,	4453,	3162,	1983,	1468,	np.inf,	2143,	2716,	2072,	3086,	5957,	8438,	7861,	4777,	3022,	2479,	2627,	3742,	2726,	7145,	4619],
                      [5898,	5723,	4490,	3066,	5373,	3482,	7408,	4476,	5330,	4039,	2869,	2353,	1460,	np.inf,	1906,	1601,	2615,	5486,	7967,	7390,	5655,	5192,	3127,	3274,	2880,	2256,	6674,	4589],
                      [6968,	8886,	5560,	2235,	4542,	4558,	7426,	4976,	6400,	5110,	3939,	3424,	2536,	2387,	np.inf,	2353,	1443,	3510,	7231,	6654,	6725,	4176,	3477,	3625,	3250,	1084,	5938,	3305],
                      [8266,	7949,	6859,	3366,	3624,	4840,	5806,	2875,	7699,	6408,	5238,	4722,	3686,	2884,	2334,	np.inf,	1851,	3885,	6366,	5789,	8023,	5325,	4626,	4774,	4445,	3418,	5073,	2547],
                      [8690,	7362,	7283,	3044,	3302,	4811,	5964,	2282,	8123,	6832,	5661,	5146,	4258,	2802,	2251,	3757,	np.inf,	3369,	5850,	5273,	8447,	7984,	4881,	5029,	4699,	3335,	4557,	2225],
                      [10086,	9768,	8782,	4882,	5911,	7162,	3745,	1295,	9518,	8113,	7057,	6541,	5505,	4685,	4135,	5321,	3118,	np.inf,	3695,	3116,	9843,	7144,	6446,	6593,	6264,	4516,	2403,	2256],
                      [11482,	11301,	10178,	6910,	5383,	8921,	3217,	2731,	10914,	9624,	8453,	7938,	7050,	7244,	5750,	6715,	4331,	3194,	np.inf,	2054,	11239,	10776,	7839,	7987,	7657,	5729,	3973,	3501],
                      [12297,	12116,	10993,	6347,	5626,	9887,	3460,	3422,	11729,	10438,	9268,	8752,	7865,	6812,	6565,	8018,	5145,	3362,	3531,	np.inf,	12053,	11590,	8967,	9582,	8586,	6543,	3924,	4316],
                      [99999,	99999,	99999,	99999,	99999,	99999,	99999,	99999,	991,	2099,	4151,	4631,	5888,	6652,	7225,	7471,	9133,	10786,	13267,	12690,	np.inf,	99999,	99999,	99999,	99999,	99999,	99999,	99999],
                      [99999,	99999,	99999,	99999,	99999,	99999,	99999,	99999,	3819,	2143,	1186,	2345,	3603,	4360,	4933,	4295,	6841,	8494,	10975,	10399,	99999,	np.inf,	99999,	99999,	99999,	99999,	99999,	99999],
                      [99999,	99999,	99999,	99999,	99999,	99999,	99999,	99999,	4278,	2988,	1646,	1606,	2222,	4820,	5393,	3831,	4862,	8954,	11435,	10858,	99999,	99999,	np.inf,	99999,	99999,	99999,	99999,	99999],
                      [99999,	99999,	99999,	99999,	99999,	99999,	99999,	99999,	5994,	4063,	2827,	2014,	2631,	4787,	5360,	4241,	3639,	6035,	7270,	10825,	99999,	99999,	99999,	np.inf,	99999,	99999,	99999,	99999],
                      [99999,	99999,	99999,	99999,	99999,	99999,	99999,	99999,	4676,	3524,	2206,	1476,	1341,	3484,	2987,	2682,	3526,	5922,	7157,	8471,	99999,	99999,	99999,	99999,	np.inf,	99999,	99999,	99999],
                      [99999,	99999,	99999,	99999,	99999,	99999,	99999,	99999,	7290,	5999,	4828,	4313,	3425,	2936,	1624,	2902,	1651,	4046,	5282,	7203,	99999,	99999,	99999,	99999,	99999,	np.inf,	99999,	99999],
                      [99999,	99999,	99999,	99999,	99999,	99999,	99999,	99999,	10833,	9542,	8372,	7856,	6969,	7357,	5659,	7122,	4240,	2053,	2127,	2848,	99999,	99999,	99999,	99999,	99999,	99999,	np.inf,	99999],
                      [99999,	99999,	99999,	99999,	99999,	99999,	99999,	99999,	8767,	7477,	6002,	5486,	4599,	4526,	3214,	4492,	1996,	3144,	4916,	4761,	99999,	99999,	99999,	99999,	99999,	99999,	99999,	np.inf]])


def main():
    coord = []
    nodes = []
    with open('Med.txt') as f:
        for line in f.readlines():
            nodo = line.split( )
            coord.append(dict(index=float(nodo[0]), x=float(nodo[1]), y=float(nodo[2])))
            nodes.append((float(nodo[1]), float(nodo[2])))
    cost_matrix = []
    num_nodos = len(coord)
    
    for i in range(num_nodos):
        row = []
        for j in range(num_nodos):
            row.append(distances[i][j])
        cost_matrix.append(row)
    
    "Para Correr con ACO4"
    #aco = ACO(n_ants, n_iterations, alpha, beta, rho, NodoInicio, NodoFin, q, strategy)
    aco = ACO(100, 100, 1.0, 10.0, 0.5, 4, 23, 10, 2)
    graph = Graph(cost_matrix, num_nodos)
    path, cost = aco.solve(graph)
    print('costo: {}, Camino: {}'.format(cost, path))
    plot(nodes, path)

    #print(coord)
    #print(puntos)
    #print(cost_matrix)
    #plot(points, path)

    #_colony_size = 10
   # _steps = 50
    #_NodoInicio = 2
    #_NodoFin = 3

    #_nodes = [(random.uniform(-400, 400), random.uniform(-400, 400)) for _ in range(0, 15)]
    #_nodes = puntos
    
    "Para Correr con ACO3"
    """ant_colony = AntColony(distances, nodes, 1, 1, 100, 0.95, 4, 23, alpha=1, beta=1)
    shortest_path = ant_colony.run()
    print ( "shorted_path: {}".format(shortest_path[0]))
    print("Distancia Total de viaje para completar el tour: {}".format(shortest_path[1]))
    plot(nodes, path)
    #ant_colony.plot()"""

    #graph = Graph(cost_matrix, rank)
    #plot(nodes, path)



    

if __name__ == '__main__':
    main()
