shiny::runApp()
runApp()
library(readr)
Ubicacion <- read_csv("C:/Users/sin definir/Desktop/Shinny/Ubicacion.rds")
View(Ubicacion)
DB_file <- "DB_Viajes.xlsx"
library(tidyverse)
library(readxl)
library(lubridate)
library(sf)
library(leaflet)
library(RColorBrewer)
DB_file <- "CamFotomultas"
DB <- DB_file %>%
excel_sheets() %>%
set_names() %>%
map(read_xlsx, path = DB_file)
DB_file <- "CamFotomultas.xlsx"
DB <- DB_file %>%
excel_sheets() %>%
set_names() %>%
map(read_xlsx, path = DB_file)
Camaras <- DB %>%
separate(Direccion,
c("Calle", "Carrera"),
sep = " - ") %>%
arrange(Direccion) %>%
mutate(Cod = 1:n()) %>%
st_as_sf(coords = c("Point_X",
"Point_X")) %>%
st_set_crs(4326)
Camaras <- DB %>%
separate(Direccion,
c("Calle", "Carrera"),
sep = " - C") %>%
arrange(Direccion) %>%
mutate(Cod = 1:n()) %>%
st_as_sf(coords = c("Point_X",
"Point_X")) %>%
st_set_crs(4326)
Camaras <- DB %>%
separate(Direccion,
c("Calle", "Carrera"),
sep = " - Cl") %>%
arrange(Direccion) %>%
mutate(Cod = 1:n()) %>%
st_as_sf(coords = c("Point_X",
"Point_X")) %>%
st_set_crs(4326)
Camaras <- DB %>%
separate(Direccion,
c("Ub1", "Ub2"),
sep = "-") %>%
arrange(Direccion) %>%
mutate(Cod = 1:n()) %>%
st_as_sf(coords = c("Point_X",
"Point_X")) %>%
st_set_crs(4326)
Camaras <- DB %>%
separate(Direccion,
c("Ub1", "Ub2"),
sep = "-") %>%
arrange(Direccion) %>%
mutate(Cod = 1:n()) %>%
st_as_sf(coords = c("Point_X",
"Point_X")) %>%
st_set_crs(4326)
Camaras <- DB %>%
separate(Direccion,
c("Ub1", "Ub2"),
sep = "-", extra = "merge") %>%
arrange(Direccion) %>%
mutate(Cod = 1:n()) %>%
st_as_sf(coords = c("Point_X",
"Point_X")) %>%
st_set_crs(4326)
Camaras <- DB %>%
separate(Direccion,
c("Ub1", "Ub2"),
sep = ": ", extra = "merge") %>%
arrange(Direccion) %>%
mutate(Cod = 1:n()) %>%
st_as_sf(coords = c("Point_X",
"Point_X")) %>%
st_set_crs(4326)
DB <- DB_file %>%
excel_sheets() %>%
set_names() %>%
map(read_xlsx, path = DB_file)
DB <- DB_file %>%
excel_sheets() %>%
map(read_xlsx, path = DB_file)
DB <- DB_file %>%
set_names() %>%
map(read_xlsx, path = DB_file)
DB_file <- "CamFotomultas.xlsx"
DB <- DB_file %>%
set_names() %>%
map(read_xlsx, path = DB_file)
DB <- DB_file %>%
excel_sheets() %>%
set_names() %>%
map(read_xlsx, path = DB_file)
DB_file <- "CamFotomultas.xlsx"
DB <- DB_file %>%
excel_sheets(Hoja1) %>%
set_names() %>%
map(read_xlsx, path = DB_file)
DB <- DB_file %>%
excel_sheets("Hoja1") %>%
set_names() %>%
map(read_xlsx, path = DB_file)
DB <- DB_file %>%
excel_sheets() %>%
set_names() %>%
map(read_xlsx, path = DB_file)
Camaras <- DB %>%
separate(Direccion,
c("Ub1", "Ub2"),
sep = ": ", extra = "merge") %>%
arrange(Direccion) %>%
mutate(Cod = 1:n()) %>%
st_as_sf(coords = c("Point_X",
"Point_X")) %>%
st_set_crs(4326)
Camaras <- DB %>%
separate(Direccion,
c("Ub1", "Ub2"),
sep = "- ", extra = "merge") %>%
arrange(Direccion) %>%
mutate(Cod = 1:n()) %>%
st_as_sf(coords = c("Point_X",
"Point_X")) %>%
st_set_crs(4326)
Camaras <- DB %>%
separate(Direccion,
c("Ub1", "Ub2"),
sep = " - C", extra = "merge") %>%
arrange(Direccion) %>%
mutate(Cod = 1:n()) %>%
st_as_sf(coords = c("Point_X",
"Point_X")) %>%
st_set_crs(4326)
Camaras <- DB$Hoja1 %>%
separate(Direccion,
c("Ub1", "Ub2"),
sep = " - C", extra = "merge") %>%
arrange(Direccion) %>%
mutate(Cod = 1:n()) %>%
st_as_sf(coords = c("Point_X",
"Point_X")) %>%
st_set_crs(4326)
Camaras <- DB$Hoja1 %>%
separate(Direccion,
c("Ub1", "Ub2"),
sep = " - C", extra = "merge") %>%
arrange(Ub1) %>%
mutate(Cod = 1:n()) %>%
st_as_sf(coords = c("Point_X",
"Point_X")) %>%
st_set_crs(4326)
saveRDS(Camaras, file.path("Camaras.rds"))
runApp()
runApp()
View(Camaras)
Camaras <- DB$Hoja1 %>%
separate(Direccion,
c("Ub1", "Ub2"),
sep = " - ", extra = "merge") %>%
arrange(Ub1) %>%
mutate(Cod = 1:n()) %>%
st_as_sf(coords = c("Point_X",
"Point_X")) %>%
st_set_crs(4326)
saveRDS(Camaras, file.path("Camaras.rds"))
runApp()
runApp()
runApp()
runApp()
runApp()
library(tidyverse)
library(readxl)
library(lubridate)
library(sf)
library(leaflet)
library(RColorBrewer)
DB_file <- "CamFotomultas.xlsx"
DB <- DB_file %>%
excel_sheets() %>%
set_names() %>%
map(read_xlsx, path = DB_file)
Camaras <- DB$Hoja1 %>%
separate(Direccion,
c("Ub1", "Ub2"),
sep = " - ", extra = "merge") %>%
arrange(Ub1) %>%
mutate(Cod = 1:n()) %>%
st_as_sf(coords = c("Point_X",
"Point_X")) %>%
st_set_crs(4326)
saveRDS(Camaras, file.path("Camaras.rds"))
shiny::runApp()
runApp()
library(shiny)
library(shinythemes)
library(tidyverse)
library(scales)
library(sf)
library(leaflet)
library(RColorBrewer)
library(DT)
Ubicacion <- readRDS(file.path("Ubicacion.rds"))
Rutas     <- readRDS(file.path("Rutas.rds"))
Puntos    <- readRDS(file.path("Puntos.rds"))
Camaras   <- readRDS(file.path("Camaras.rds"))
ui <- navbarPage("Rutas de viajes", id = "nav",
# Mapa -----------------------------------------------------------------------
tabPanel("Mapa",
div(class = "outer",
tags$head(includeCSS("styles.css")),
leafletOutput("mapa", width = "100%", height = "100%"),
# Filtros ----------------------------------------------------------------
absolutePanel(id = "filtros", class = "panel panel-default",
fixed = TRUE, draggable = TRUE, width = 330, height = "auto",
top = 60, bottom = "auto", left = "auto", right = 20,
h2("Explorar viajes"),
selectInput("ViajeId", "Viaje", selected = "",
choices = c("Todos" = "", set_names(str_sub(Rutas$ViajeId, 2, 9),
# Rutas$Cod_Viaje))),
Rutas$ViajeId))),
selectInput("OrigenId", "Origen:", selected = "",
choices = c("Todos" = "", set_names(str_sub(Ubicacion$Id, 2, 9),
Ubicacion$Nombre))),
selectInput("Zona_Origen", "Zona de Origen:", selected = "",
choices = c("Todas" = "", unique(Ubicacion$Zona))),
selectInput("DestinoId", "Destino:", selected = "",
choices = c("Todos" = "", set_names(str_sub(Ubicacion$Id, 2, 9),
Ubicacion$Nombre))),
selectInput("Zona_Destino", "Zona de Destino:", selected = "",
choices = c("Todas" = "", unique(Ubicacion$Zona))),
selectInput("Dia", "Dia:", selected = "",
choices = c("Todos" = "", levels(Rutas$Dia))),
selectInput("Hora", "Hora:", selected = "",
choices = c("Todos" = "", levels(Rutas$Meridiano))),
selectInput("Horario", "Horario:", selected = "",
choices = c("Todos" = "", levels(Rutas$Horario))),
selectInput("Clima", "Clima:", selected = "",
choices = c("Todos" = "", levels(Rutas$Clima))),
selectInput("Congestion", "Nivel de congestiÃƒÂƒÃ‚Â³n:", selected = "",
choices = c("Todos" = "", levels(Rutas$Congestion))),
selectInput("Pavimento", "Pavimento:", selected = "",
choices = c("Todos" = "", levels(Rutas$Pavimento))),
selectInput("Camaras", "Camaras:", selected = "",
choices = c("Todos" = "", set_names(str_sub(Camaras$ID, 2, 9),
Camaras$ID))),
selectInput("Incidente", "Incidente:", selected = "",
choices = c("Todos" = "", levels(Rutas$Incidente)))),
uiOutput("GraficarPuntos"))),
# Diagramas ------------------------------------------------------------------
tabPanel("Diagramas",
fluidRow(align = "center",
column(width = 6,
plotOutput("scatterPlot", height = 500),
fluidRow(
column(width = 6,
selectInput("x", "Eje X:", selected = "Costo",
choices = c("Costo",
"DuraciÃƒÂƒÃ‚Â³n" = "Duracion",
"Distancia",
"Velocidad media" = "V_promedio",
"Velocidad total" = "V_total"))),
column(width = 6,
selectInput("y", "Eje Y:", selected = "Duracion",
choices = c("Costo",
"DuraciÃƒÂƒÃ‚Â³n" = "Duracion",
"Distancia",
"Velocidad media" = "V_promedio",
"Velocidad total" = "V_total"))))),
column(width = 6,
plotOutput("boxPlot", height = 500),
fluidRow(
column(width = 6,
selectInput("var", "Variable:", selected = "Distancia",
choices = c("Costo",
"DuraciÃƒÂƒÃ‚Â³n" = "Duracion",
"Distancia",
"Velocidad media" = "V_promedio",
"Velocidad total" = "V_total"))),
column(width = 6,
selectInput("cat", "CategorÃƒÂƒ­a:", selected = "",
choices = c(Todas = "",
"Zona de Origen" = "Zona_Origen",
"Zona de Destino" = "Zona_Destino",
"Dia",
"Hora" = "Meridiano",
"Horario",
"Clima",
"Nivel de congestiÃƒÂƒÃ‚Â³n" = "Congestion",
"Pavimento",
"Incidente"))))))),
# Datos ----------------------------------------------------------------------
tabPanel("Datos", DTOutput("datos")))
server <- function(input, output, session) {
# Datos reactivos de Rutas (lÃƒÂƒ­neas) ------------------------------------------
datosRutas <- reactive({
filter(Rutas,
str_detect(ViajeId, input$ViajeId),
str_detect(OrigenId, input$OrigenId),
str_detect(Zona_Origen, input$Zona_Origen),
str_detect(DestinoId, input$DestinoId),
str_detect(Zona_Destino, input$Zona_Destino),
str_detect(Dia, input$Dia),
str_detect(Meridiano, input$Hora),
str_detect(Horario, input$Horario),
str_detect(Clima, input$Clima),
str_detect(Congestion, input$Congestion),
str_detect(Pavimento, input$Pavimento),
str_detect(Incidente, input$Incidente))
})
# Datos reactivos de Puntos --------------------------------------------------
datosPuntos <- reactive({
filter(Puntos,
str_detect(ViajeId, input$ViajeId))
})
# Permitir seleccionar puntos ÃƒÂƒÃ‚Âºnicamente si se selecciona un viaje -----------
output$GraficarPuntos <- renderUI({
if (nrow(datosRutas()) == 1) {
absolutePanel(id = "checkboxPuntos", class = "panel panel-default",
fixed = TRUE, width = 150, height = "auto",
top = "auto", bottom = 10, left = 10, right = "auto",
checkboxInput("Puntos", "Graficar puntos"))
}
})
# Crear una paleta de colores para los puntos del viaje seleccionado ---------
colorpal <- reactive({
if (isTruthy(input$Puntos)) {
pts <- datosPuntos()
colorNumeric("RdYlBu", pts$Velocidad)
} else {
rts <- datosRutas()
colorNumeric("RdYlBu", rts$V_total)
}
})
# Renderizar el mapa ---------------------------------------------------------
output$mapa <- renderLeaflet({
leaflet() %>%
# Default basemap
# addTiles() %>%
# OpenStreetMap.DE
# addProviderTiles(providers$OpenStreetMap.DE) %>%
# CartoDB
addProviderTiles(providers$CartoDB) %>%
# Thunderforest.Transport
# addProviderTiles(providers$Thunderforest.Transport,
#                  options = providerTileOptions(apikey = Sys.getenv("api_key"))) %>%
# Esri.WorldTopoMap
# addProviderTiles(providers$Esri.WorldTopoMap) %>%
fitBounds(lng1 = -75.61, lat1 = 6.18,
lng2 = -75.55, lat2 = 6.30)
})
# Dibujar las lÃƒÂƒ­neas o puntos segÃƒÂƒÃ‚Âºn los filtros ------------------------------
observe({
# Crear la paleta a partir de los datos existentes
pal <- colorpal()
# Dibujar las lÃƒÂƒ­neas de las rutas actuales
leafletProxy("mapa") %>%
clearShapes() %>%
addPolylines(data    = datosRutas(),
color   = ~pal(V_promedio),
# color   = ~pal(V_total),
opacity = 0.7,
popup   = ~paste0("<b>Viaje:</b> ", ViajeId, "<br/>",
"<b>Desde:</b> ", Nombre_Origen, "<br/>",
"<b>Hasta:</b> ", Nombre_Destino, "<br/>",
"<b>Costo:</b> $", Costo, "<br/>",
"<b>DuraciÃƒÂƒÃ‚Â³n:</b> ",
round(Duracion, 1), "min", "<br/>",
"<b>Distancia:</b> ",
round(Distancia, 1), "km", "<br/>",
"<b>Velocidad media:</b> ",
round(V_promedio, 1), "km/h", "<br/>",
"<b>Velocidad total:</b> ",
round(V_total, 1), "km/h", "<br/>"))
if (isTruthy(input$Puntos)) {
leafletProxy("mapa") %>%
clearShapes() %>%
addCircles(data        = datosPuntos(),
radius      = 15,
color       = ~pal(Velocidad),
opacity     = 0.7,
fillColor   = ~pal(Velocidad),
fillOpacity = 0.7,
stroke      = FALSE,
popup       = ~paste0("<b>ID:</b> ", Id, "<br/>",
"<b>Velocidad:</b> ",round(Velocidad, 2), "km/h"))
}
})
# FunciÃƒÂƒÃ‚Â³n para poner las unidades en los plots -------------------------------
unidades <- function(var) {
switch(var,
"Costo"      = number_format(prefix = "$"),
"Duracion"   = unit_format(unit = "min"),
"Distancia"  = unit_format(unit = "km"),
"V_promedio" = unit_format(unit = "km/h"),
"V_total"    = unit_format(unit = "km/h"))
}
# Renderizar el diagrama de dispersiÃƒÂƒÃ‚Â³n----------------------------------------
output$scatterPlot <- renderPlot({
ggplot(datosRutas(),
aes_string(x = input$x,
y = input$y)) +
geom_point() +
scale_x_continuous(labels = unidades(input$x)) +
scale_y_continuous(labels = unidades(input$y))
})
# Renderizar el diagrama de violÃƒÂƒ­n con puntos dispersos ----------------------
output$boxPlot <- renderPlot({
if (input$cat == "") {
boxPlot <- ggplot(datosRutas(),
aes_string(x = factor(0),
y = input$var)) +
theme(axis.title.y = element_blank(),
axis.text.y  = element_blank(),
axis.ticks.y = element_blank())
} else {
boxPlot <- ggplot(datosRutas(),
aes_string(x    = input$cat,
y    = input$var,
fill = input$cat))
}
boxPlot +
geom_violin(draw_quantiles = c(0.25, 0.5, 0.75)) +
geom_jitter(width = 0.25) +
scale_y_continuous(labels = unidades(input$var))
})
# Renderizar los datos -------------------------------------------------------
output$datos <- renderDT({
datosRutas() %>%
as.data.frame() %>%
select(Cod_Viaje,
Nombre_Origen, Zona_Origen,
Nombre_Destino, Zona_Destino,
Dia, Meridiano, Horario,
Clima, Congestion,
Pavimento, Incidente,
Costo, Duracion, Distancia,
V_promedio, V_total) %>%
datatable(rownames = FALSE,
options = list(dom = "Bltip",
buttons = I("colvis")),
extensions = c("Responsive",
"Buttons"),
colnames = c("CÃƒÂƒÃ‚Â³digo Viaje"    = 1,
"Origen"          = 2,
"Zona de Origen"  = 3,
"Destino"         = 4,
"Zona de Destino" = 5,
"CongestiÃƒÂƒÃ‚Â³n"      = 10,
"DuraciÃƒÂƒÃ‚Â³n"        = 14,
"Velocidad media" = 16,
"Velocidad total" = 17),
selection = "none") %>%
formatCurrency("Costo") %>%
formatRound("DuraciÃƒÂƒÃ‚Â³n", 1) %>%
formatString("DuraciÃƒÂƒÃ‚Â³n", suffix = " min") %>%
formatRound("Distancia", 1) %>%
formatString("Distancia", suffix = " km") %>%
formatRound(c("Velocidad media", "Velocidad total"), 0) %>%
formatString(c("Velocidad media", "Velocidad total"), suffix = " km/h")
})
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
DB_file <- "CamFotomultas.xlsx"
DB <- DB_file %>%
excel_sheets() %>%
set_names() %>%
map(read_xlsx, path = DB_file)
Camaras <- DB$Hoja1 %>%
separate(Direccion,
c("Ub1", "Ub2"),
sep = " - ", extra = "merge") %>%
arrange(Ub1) %>%
mutate(Cod = 1:n()) %>%
st_as_sf(coords = c("Point_X",
"Point_X")) %>%
st_set_crs(4326)
saveRDS(Camaras, file.path("Camaras.rds"))
runApp()
